
Smart_Light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c14  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc4  08005de4  08005de4  00015de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ba8  08006ba8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006ba8  08006ba8  00016ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bb0  08006bb0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bb0  08006bb0  00016bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bb4  08006bb4  00016bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  20000078  08006c30  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ec  08006c30  000205ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b4e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c4  00000000  00000000  00031bf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  00033ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f58  00000000  00000000  00034ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000226e3  00000000  00000000  00035e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138ed  00000000  00000000  00058513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2b58  00000000  00000000  0006be00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013e958  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049f4  00000000  00000000  0013e9a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005dcc 	.word	0x08005dcc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08005dcc 	.word	0x08005dcc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b974 	b.w	8000d8c <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	468e      	mov	lr, r1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d14d      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000aca:	428a      	cmp	r2, r1
 8000acc:	4694      	mov	ip, r2
 8000ace:	d969      	bls.n	8000ba4 <__udivmoddi4+0xe8>
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	b152      	cbz	r2, 8000aec <__udivmoddi4+0x30>
 8000ad6:	fa01 f302 	lsl.w	r3, r1, r2
 8000ada:	f1c2 0120 	rsb	r1, r2, #32
 8000ade:	fa20 f101 	lsr.w	r1, r0, r1
 8000ae2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aea:	4094      	lsls	r4, r2
 8000aec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000af0:	0c21      	lsrs	r1, r4, #16
 8000af2:	fbbe f6f8 	udiv	r6, lr, r8
 8000af6:	fa1f f78c 	uxth.w	r7, ip
 8000afa:	fb08 e316 	mls	r3, r8, r6, lr
 8000afe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b02:	fb06 f107 	mul.w	r1, r6, r7
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b12:	f080 811f 	bcs.w	8000d54 <__udivmoddi4+0x298>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 811c 	bls.w	8000d54 <__udivmoddi4+0x298>
 8000b1c:	3e02      	subs	r6, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a5b      	subs	r3, r3, r1
 8000b22:	b2a4      	uxth	r4, r4
 8000b24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b28:	fb08 3310 	mls	r3, r8, r0, r3
 8000b2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b30:	fb00 f707 	mul.w	r7, r0, r7
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	d90a      	bls.n	8000b4e <__udivmoddi4+0x92>
 8000b38:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b40:	f080 810a 	bcs.w	8000d58 <__udivmoddi4+0x29c>
 8000b44:	42a7      	cmp	r7, r4
 8000b46:	f240 8107 	bls.w	8000d58 <__udivmoddi4+0x29c>
 8000b4a:	4464      	add	r4, ip
 8000b4c:	3802      	subs	r0, #2
 8000b4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b52:	1be4      	subs	r4, r4, r7
 8000b54:	2600      	movs	r6, #0
 8000b56:	b11d      	cbz	r5, 8000b60 <__udivmoddi4+0xa4>
 8000b58:	40d4      	lsrs	r4, r2
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b60:	4631      	mov	r1, r6
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d909      	bls.n	8000b7e <__udivmoddi4+0xc2>
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	f000 80ef 	beq.w	8000d4e <__udivmoddi4+0x292>
 8000b70:	2600      	movs	r6, #0
 8000b72:	e9c5 0100 	strd	r0, r1, [r5]
 8000b76:	4630      	mov	r0, r6
 8000b78:	4631      	mov	r1, r6
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	fab3 f683 	clz	r6, r3
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	d14a      	bne.n	8000c1c <__udivmoddi4+0x160>
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xd4>
 8000b8a:	4282      	cmp	r2, r0
 8000b8c:	f200 80f9 	bhi.w	8000d82 <__udivmoddi4+0x2c6>
 8000b90:	1a84      	subs	r4, r0, r2
 8000b92:	eb61 0303 	sbc.w	r3, r1, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	469e      	mov	lr, r3
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d0e0      	beq.n	8000b60 <__udivmoddi4+0xa4>
 8000b9e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ba2:	e7dd      	b.n	8000b60 <__udivmoddi4+0xa4>
 8000ba4:	b902      	cbnz	r2, 8000ba8 <__udivmoddi4+0xec>
 8000ba6:	deff      	udf	#255	; 0xff
 8000ba8:	fab2 f282 	clz	r2, r2
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	f040 8092 	bne.w	8000cd6 <__udivmoddi4+0x21a>
 8000bb2:	eba1 010c 	sub.w	r1, r1, ip
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f fe8c 	uxth.w	lr, ip
 8000bbe:	2601      	movs	r6, #1
 8000bc0:	0c20      	lsrs	r0, r4, #16
 8000bc2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bc6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bce:	fb0e f003 	mul.w	r0, lr, r3
 8000bd2:	4288      	cmp	r0, r1
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0x12c>
 8000bd6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bda:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x12a>
 8000be0:	4288      	cmp	r0, r1
 8000be2:	f200 80cb 	bhi.w	8000d7c <__udivmoddi4+0x2c0>
 8000be6:	4643      	mov	r3, r8
 8000be8:	1a09      	subs	r1, r1, r0
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bf4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bf8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bfc:	45a6      	cmp	lr, r4
 8000bfe:	d908      	bls.n	8000c12 <__udivmoddi4+0x156>
 8000c00:	eb1c 0404 	adds.w	r4, ip, r4
 8000c04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c08:	d202      	bcs.n	8000c10 <__udivmoddi4+0x154>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f200 80bb 	bhi.w	8000d86 <__udivmoddi4+0x2ca>
 8000c10:	4608      	mov	r0, r1
 8000c12:	eba4 040e 	sub.w	r4, r4, lr
 8000c16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c1a:	e79c      	b.n	8000b56 <__udivmoddi4+0x9a>
 8000c1c:	f1c6 0720 	rsb	r7, r6, #32
 8000c20:	40b3      	lsls	r3, r6
 8000c22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c32:	431c      	orrs	r4, r3
 8000c34:	40f9      	lsrs	r1, r7
 8000c36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c42:	0c20      	lsrs	r0, r4, #16
 8000c44:	fa1f fe8c 	uxth.w	lr, ip
 8000c48:	fb09 1118 	mls	r1, r9, r8, r1
 8000c4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c50:	fb08 f00e 	mul.w	r0, r8, lr
 8000c54:	4288      	cmp	r0, r1
 8000c56:	fa02 f206 	lsl.w	r2, r2, r6
 8000c5a:	d90b      	bls.n	8000c74 <__udivmoddi4+0x1b8>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c64:	f080 8088 	bcs.w	8000d78 <__udivmoddi4+0x2bc>
 8000c68:	4288      	cmp	r0, r1
 8000c6a:	f240 8085 	bls.w	8000d78 <__udivmoddi4+0x2bc>
 8000c6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c72:	4461      	add	r1, ip
 8000c74:	1a09      	subs	r1, r1, r0
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c88:	458e      	cmp	lr, r1
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x1e2>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c94:	d26c      	bcs.n	8000d70 <__udivmoddi4+0x2b4>
 8000c96:	458e      	cmp	lr, r1
 8000c98:	d96a      	bls.n	8000d70 <__udivmoddi4+0x2b4>
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	4461      	add	r1, ip
 8000c9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ca2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ca6:	eba1 010e 	sub.w	r1, r1, lr
 8000caa:	42a1      	cmp	r1, r4
 8000cac:	46c8      	mov	r8, r9
 8000cae:	46a6      	mov	lr, r4
 8000cb0:	d356      	bcc.n	8000d60 <__udivmoddi4+0x2a4>
 8000cb2:	d053      	beq.n	8000d5c <__udivmoddi4+0x2a0>
 8000cb4:	b15d      	cbz	r5, 8000cce <__udivmoddi4+0x212>
 8000cb6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cba:	eb61 010e 	sbc.w	r1, r1, lr
 8000cbe:	fa01 f707 	lsl.w	r7, r1, r7
 8000cc2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cc6:	40f1      	lsrs	r1, r6
 8000cc8:	431f      	orrs	r7, r3
 8000cca:	e9c5 7100 	strd	r7, r1, [r5]
 8000cce:	2600      	movs	r6, #0
 8000cd0:	4631      	mov	r1, r6
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	f1c2 0320 	rsb	r3, r2, #32
 8000cda:	40d8      	lsrs	r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ce4:	4091      	lsls	r1, r2
 8000ce6:	4301      	orrs	r1, r0
 8000ce8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cec:	fa1f fe8c 	uxth.w	lr, ip
 8000cf0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cf4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cf8:	0c0b      	lsrs	r3, r1, #16
 8000cfa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cfe:	fb00 f60e 	mul.w	r6, r0, lr
 8000d02:	429e      	cmp	r6, r3
 8000d04:	fa04 f402 	lsl.w	r4, r4, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x260>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d12:	d22f      	bcs.n	8000d74 <__udivmoddi4+0x2b8>
 8000d14:	429e      	cmp	r6, r3
 8000d16:	d92d      	bls.n	8000d74 <__udivmoddi4+0x2b8>
 8000d18:	3802      	subs	r0, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	b289      	uxth	r1, r1
 8000d20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d24:	fb07 3316 	mls	r3, r7, r6, r3
 8000d28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d30:	428b      	cmp	r3, r1
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x28a>
 8000d34:	eb1c 0101 	adds.w	r1, ip, r1
 8000d38:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d3c:	d216      	bcs.n	8000d6c <__udivmoddi4+0x2b0>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d914      	bls.n	8000d6c <__udivmoddi4+0x2b0>
 8000d42:	3e02      	subs	r6, #2
 8000d44:	4461      	add	r1, ip
 8000d46:	1ac9      	subs	r1, r1, r3
 8000d48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d4c:	e738      	b.n	8000bc0 <__udivmoddi4+0x104>
 8000d4e:	462e      	mov	r6, r5
 8000d50:	4628      	mov	r0, r5
 8000d52:	e705      	b.n	8000b60 <__udivmoddi4+0xa4>
 8000d54:	4606      	mov	r6, r0
 8000d56:	e6e3      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d58:	4618      	mov	r0, r3
 8000d5a:	e6f8      	b.n	8000b4e <__udivmoddi4+0x92>
 8000d5c:	454b      	cmp	r3, r9
 8000d5e:	d2a9      	bcs.n	8000cb4 <__udivmoddi4+0x1f8>
 8000d60:	ebb9 0802 	subs.w	r8, r9, r2
 8000d64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d68:	3801      	subs	r0, #1
 8000d6a:	e7a3      	b.n	8000cb4 <__udivmoddi4+0x1f8>
 8000d6c:	4646      	mov	r6, r8
 8000d6e:	e7ea      	b.n	8000d46 <__udivmoddi4+0x28a>
 8000d70:	4620      	mov	r0, r4
 8000d72:	e794      	b.n	8000c9e <__udivmoddi4+0x1e2>
 8000d74:	4640      	mov	r0, r8
 8000d76:	e7d1      	b.n	8000d1c <__udivmoddi4+0x260>
 8000d78:	46d0      	mov	r8, sl
 8000d7a:	e77b      	b.n	8000c74 <__udivmoddi4+0x1b8>
 8000d7c:	3b02      	subs	r3, #2
 8000d7e:	4461      	add	r1, ip
 8000d80:	e732      	b.n	8000be8 <__udivmoddi4+0x12c>
 8000d82:	4630      	mov	r0, r6
 8000d84:	e709      	b.n	8000b9a <__udivmoddi4+0xde>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	e742      	b.n	8000c12 <__udivmoddi4+0x156>

08000d8c <__aeabi_idiv0>:
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <HAL_TIM_IC_CaptureCallback>:
uint32_t difference = 0;
uint8_t is_captured_first = 0;
uint8_t distance = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	// if the interrupt is even triggered by channel1
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	7f1b      	ldrb	r3, [r3, #28]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	f040 8086 	bne.w	8000eae <HAL_TIM_IC_CaptureCallback+0x11e>
	{

		distance = 0;
 8000da2:	4b47      	ldr	r3, [pc, #284]	; (8000ec0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]

		if (is_captured_first == 0) // if the first value is not captured
 8000da8:	4b46      	ldr	r3, [pc, #280]	; (8000ec4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d11a      	bne.n	8000de6 <HAL_TIM_IC_CaptureCallback+0x56>
		{
			// read the first value:
			ic_val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000db0:	2100      	movs	r1, #0
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f003 fc0c 	bl	80045d0 <HAL_TIM_ReadCapturedValue>
 8000db8:	4603      	mov	r3, r0
 8000dba:	4a43      	ldr	r2, [pc, #268]	; (8000ec8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000dbc:	6013      	str	r3, [r2, #0]
			// this will give the time when the interrupt happened by reading the current time

			// set the first captured as true:
			is_captured_first = 1;
 8000dbe:	4b41      	ldr	r3, [pc, #260]	; (8000ec4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	701a      	strb	r2, [r3, #0]

			// change the polarity to falling edge to find when the
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	6a1a      	ldr	r2, [r3, #32]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f022 020a 	bic.w	r2, r2, #10
 8000dd2:	621a      	str	r2, [r3, #32]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	6a1a      	ldr	r2, [r3, #32]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f042 0202 	orr.w	r2, r2, #2
 8000de2:	621a      	str	r2, [r3, #32]

			// don't need it anymore
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000de4:	e063      	b.n	8000eae <HAL_TIM_IC_CaptureCallback+0x11e>
		else if (is_captured_first == 1)   // if the first is captured
 8000de6:	4b37      	ldr	r3, [pc, #220]	; (8000ec4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d15f      	bne.n	8000eae <HAL_TIM_IC_CaptureCallback+0x11e>
			ic_val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000dee:	2100      	movs	r1, #0
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f003 fbed 	bl	80045d0 <HAL_TIM_ReadCapturedValue>
 8000df6:	4603      	mov	r3, r0
 8000df8:	4a34      	ldr	r2, [pc, #208]	; (8000ecc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000dfa:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2200      	movs	r2, #0
 8000e02:	625a      	str	r2, [r3, #36]	; 0x24
			if (ic_val2 > ic_val1)
 8000e04:	4b31      	ldr	r3, [pc, #196]	; (8000ecc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b2f      	ldr	r3, [pc, #188]	; (8000ec8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d907      	bls.n	8000e20 <HAL_TIM_IC_CaptureCallback+0x90>
				difference = ic_val2 - ic_val1;
 8000e10:	4b2e      	ldr	r3, [pc, #184]	; (8000ecc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b2c      	ldr	r3, [pc, #176]	; (8000ec8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	4a2d      	ldr	r2, [pc, #180]	; (8000ed0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000e1c:	6013      	str	r3, [r2, #0]
 8000e1e:	e00f      	b.n	8000e40 <HAL_TIM_IC_CaptureCallback+0xb0>
			else if (ic_val1 > ic_val2)
 8000e20:	4b29      	ldr	r3, [pc, #164]	; (8000ec8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b29      	ldr	r3, [pc, #164]	; (8000ecc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d909      	bls.n	8000e40 <HAL_TIM_IC_CaptureCallback+0xb0>
				difference = (0xffff - ic_val1) + ic_val2;
 8000e2c:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000e3a:	33ff      	adds	r3, #255	; 0xff
 8000e3c:	4a24      	ldr	r2, [pc, #144]	; (8000ed0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000e3e:	6013      	str	r3, [r2, #0]
			distance = difference * 0.034/2;
 8000e40:	4b23      	ldr	r3, [pc, #140]	; (8000ed0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fb75 	bl	8000534 <__aeabi_ui2d>
 8000e4a:	a31b      	add	r3, pc, #108	; (adr r3, 8000eb8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e50:	f7ff fbea 	bl	8000628 <__aeabi_dmul>
 8000e54:	4602      	mov	r2, r0
 8000e56:	460b      	mov	r3, r1
 8000e58:	4610      	mov	r0, r2
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	f04f 0200 	mov.w	r2, #0
 8000e60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e64:	f7ff fd0a 	bl	800087c <__aeabi_ddiv>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f7ff fdec 	bl	8000a4c <__aeabi_d2uiz>
 8000e74:	4603      	mov	r3, r0
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e7a:	701a      	strb	r2, [r3, #0]
			is_captured_first = 0;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	6a1a      	ldr	r2, [r3, #32]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f022 020a 	bic.w	r2, r2, #10
 8000e90:	621a      	str	r2, [r3, #32]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	6a12      	ldr	r2, [r2, #32]
 8000e9c:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	68da      	ldr	r2, [r3, #12]
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f022 0202 	bic.w	r2, r2, #2
 8000eac:	60da      	str	r2, [r3, #12]
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	b020c49c 	.word	0xb020c49c
 8000ebc:	3fa16872 	.word	0x3fa16872
 8000ec0:	200001c9 	.word	0x200001c9
 8000ec4:	200001c8 	.word	0x200001c8
 8000ec8:	200001bc 	.word	0x200001bc
 8000ecc:	200001c0 	.word	0x200001c0
 8000ed0:	200001c4 	.word	0x200001c4
 8000ed4:	200000e8 	.word	0x200000e8

08000ed8 <delay>:

// for the delay in microseconds using a timer
void delay(uint16_t time)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <delay+0x30>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < time);
 8000eea:	bf00      	nop
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <delay+0x30>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ef2:	88fb      	ldrh	r3, [r7, #6]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d3f9      	bcc.n	8000eec <delay+0x14>
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	200000e8 	.word	0x200000e8

08000f0c <HCSR04_Read>:

void HCSR04_Read()
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	// sending high for 10ms to activate the readings and then the sensor sends ultrasonic wave
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000f10:	2201      	movs	r2, #1
 8000f12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f16:	480b      	ldr	r0, [pc, #44]	; (8000f44 <HCSR04_Read+0x38>)
 8000f18:	f001 fae8 	bl	80024ec <HAL_GPIO_WritePin>
	delay(10);
 8000f1c:	200a      	movs	r0, #10
 8000f1e:	f7ff ffdb 	bl	8000ed8 <delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f28:	4806      	ldr	r0, [pc, #24]	; (8000f44 <HCSR04_Read+0x38>)
 8000f2a:	f001 fadf 	bl	80024ec <HAL_GPIO_WritePin>
	// interrupt is enabled
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HCSR04_Read+0x3c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	68da      	ldr	r2, [r3, #12]
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <HCSR04_Read+0x3c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f042 0202 	orr.w	r2, r2, #2
 8000f3c:	60da      	str	r2, [r3, #12]
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40020400 	.word	0x40020400
 8000f48:	200000e8 	.word	0x200000e8

08000f4c <display_distance>:
	HAL_UART_Transmit(&huart2, &buf, strlen(buf), HAL_MAX_DELAY);
	//38400
}

void display_distance(uint8_t num)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
	char buf[11];
	sprintf(buf, "%d       ", num);
 8000f56:	79fa      	ldrb	r2, [r7, #7]
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	490a      	ldr	r1, [pc, #40]	; (8000f88 <display_distance+0x3c>)
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f004 fac6 	bl	80054f0 <siprintf>

	SSD1306_GotoXY (70,10);
 8000f64:	210a      	movs	r1, #10
 8000f66:	2046      	movs	r0, #70	; 0x46
 8000f68:	f000 fc24 	bl	80017b4 <SSD1306_GotoXY>
	SSD1306_Puts (buf, &Font_11x18, 1);
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	2201      	movs	r2, #1
 8000f72:	4906      	ldr	r1, [pc, #24]	; (8000f8c <display_distance+0x40>)
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 fcb3 	bl	80018e0 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8000f7a:	f000 fb75 	bl	8001668 <SSD1306_UpdateScreen>
}
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	08005dec 	.word	0x08005dec
 8000f8c:	20000000 	.word	0x20000000

08000f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f96:	f000 ff6d 	bl	8001e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9a:	f000 f89f 	bl	80010dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9e:	f000 fa13 	bl	80013c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fa2:	f000 f9e7 	bl	8001374 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000fa6:	f000 f98b 	bl	80012c0 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000faa:	f000 f933 	bl	8001214 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000fae:	f000 f903 	bl	80011b8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4843      	ldr	r0, [pc, #268]	; (80010c4 <main+0x134>)
 8000fb6:	f002 ff7d 	bl	8003eb4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000fba:	2104      	movs	r1, #4
 8000fbc:	4842      	ldr	r0, [pc, #264]	; (80010c8 <main+0x138>)
 8000fbe:	f002 fe61 	bl	8003c84 <HAL_TIM_PWM_Start>
  SSD1306_Init();
 8000fc2:	f000 fa8d 	bl	80014e0 <SSD1306_Init>

  SSD1306_GotoXY (10,10);
 8000fc6:	210a      	movs	r1, #10
 8000fc8:	200a      	movs	r0, #10
 8000fca:	f000 fbf3 	bl	80017b4 <SSD1306_GotoXY>
  SSD1306_Puts ("Dist: ", &Font_11x18, 1);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	493e      	ldr	r1, [pc, #248]	; (80010cc <main+0x13c>)
 8000fd2:	483f      	ldr	r0, [pc, #252]	; (80010d0 <main+0x140>)
 8000fd4:	f000 fc84 	bl	80018e0 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000fd8:	f000 fb46 	bl	8001668 <SSD1306_UpdateScreen>

  uint8_t i = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	71fb      	strb	r3, [r7, #7]
  uint8_t avg_val = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	70fb      	strb	r3, [r7, #3]
  uint8_t sum = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	71bb      	strb	r3, [r7, #6]
  uint16_t brightness = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	80bb      	strh	r3, [r7, #4]

  HAL_Delay(1000);
 8000fec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ff0:	f000 ffb2 	bl	8001f58 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	i = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	71fb      	strb	r3, [r7, #7]
	avg_val = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	70fb      	strb	r3, [r7, #3]
	sum = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	71bb      	strb	r3, [r7, #6]
	while(i<5)
 8001000:	e00c      	b.n	800101c <main+0x8c>
	{
		HCSR04_Read();
 8001002:	f7ff ff83 	bl	8000f0c <HCSR04_Read>
		sum += distance;
 8001006:	4b33      	ldr	r3, [pc, #204]	; (80010d4 <main+0x144>)
 8001008:	781a      	ldrb	r2, [r3, #0]
 800100a:	79bb      	ldrb	r3, [r7, #6]
 800100c:	4413      	add	r3, r2
 800100e:	71bb      	strb	r3, [r7, #6]
		i++;
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	3301      	adds	r3, #1
 8001014:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(100);
 8001016:	2064      	movs	r0, #100	; 0x64
 8001018:	f000 ff9e 	bl	8001f58 <HAL_Delay>
	while(i<5)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	2b04      	cmp	r3, #4
 8001020:	d9ef      	bls.n	8001002 <main+0x72>
	}
	avg_val = sum / 5;
 8001022:	79bb      	ldrb	r3, [r7, #6]
 8001024:	4a2c      	ldr	r2, [pc, #176]	; (80010d8 <main+0x148>)
 8001026:	fba2 2303 	umull	r2, r3, r2, r3
 800102a:	089b      	lsrs	r3, r3, #2
 800102c:	70fb      	strb	r3, [r7, #3]

	display_distance(avg_val);
 800102e:	78fb      	ldrb	r3, [r7, #3]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff8b 	bl	8000f4c <display_distance>

	if(avg_val < 8) brightness = 100;
 8001036:	78fb      	ldrb	r3, [r7, #3]
 8001038:	2b07      	cmp	r3, #7
 800103a:	d802      	bhi.n	8001042 <main+0xb2>
 800103c:	2364      	movs	r3, #100	; 0x64
 800103e:	80bb      	strh	r3, [r7, #4]
 8001040:	e037      	b.n	80010b2 <main+0x122>
	else if(avg_val < 11) brightness = 90;
 8001042:	78fb      	ldrb	r3, [r7, #3]
 8001044:	2b0a      	cmp	r3, #10
 8001046:	d802      	bhi.n	800104e <main+0xbe>
 8001048:	235a      	movs	r3, #90	; 0x5a
 800104a:	80bb      	strh	r3, [r7, #4]
 800104c:	e031      	b.n	80010b2 <main+0x122>
	else if(avg_val < 15) brightness = 80;
 800104e:	78fb      	ldrb	r3, [r7, #3]
 8001050:	2b0e      	cmp	r3, #14
 8001052:	d802      	bhi.n	800105a <main+0xca>
 8001054:	2350      	movs	r3, #80	; 0x50
 8001056:	80bb      	strh	r3, [r7, #4]
 8001058:	e02b      	b.n	80010b2 <main+0x122>
	else if(avg_val < 18) brightness = 70;
 800105a:	78fb      	ldrb	r3, [r7, #3]
 800105c:	2b11      	cmp	r3, #17
 800105e:	d802      	bhi.n	8001066 <main+0xd6>
 8001060:	2346      	movs	r3, #70	; 0x46
 8001062:	80bb      	strh	r3, [r7, #4]
 8001064:	e025      	b.n	80010b2 <main+0x122>
	else if(avg_val < 22) brightness = 60;
 8001066:	78fb      	ldrb	r3, [r7, #3]
 8001068:	2b15      	cmp	r3, #21
 800106a:	d802      	bhi.n	8001072 <main+0xe2>
 800106c:	233c      	movs	r3, #60	; 0x3c
 800106e:	80bb      	strh	r3, [r7, #4]
 8001070:	e01f      	b.n	80010b2 <main+0x122>
	else if(avg_val < 26) brightness = 50;
 8001072:	78fb      	ldrb	r3, [r7, #3]
 8001074:	2b19      	cmp	r3, #25
 8001076:	d802      	bhi.n	800107e <main+0xee>
 8001078:	2332      	movs	r3, #50	; 0x32
 800107a:	80bb      	strh	r3, [r7, #4]
 800107c:	e019      	b.n	80010b2 <main+0x122>
	else if(avg_val < 31) brightness = 40;
 800107e:	78fb      	ldrb	r3, [r7, #3]
 8001080:	2b1e      	cmp	r3, #30
 8001082:	d802      	bhi.n	800108a <main+0xfa>
 8001084:	2328      	movs	r3, #40	; 0x28
 8001086:	80bb      	strh	r3, [r7, #4]
 8001088:	e013      	b.n	80010b2 <main+0x122>
	else if(avg_val < 37) brightness = 30;
 800108a:	78fb      	ldrb	r3, [r7, #3]
 800108c:	2b24      	cmp	r3, #36	; 0x24
 800108e:	d802      	bhi.n	8001096 <main+0x106>
 8001090:	231e      	movs	r3, #30
 8001092:	80bb      	strh	r3, [r7, #4]
 8001094:	e00d      	b.n	80010b2 <main+0x122>
	else if(avg_val < 43) brightness = 20;
 8001096:	78fb      	ldrb	r3, [r7, #3]
 8001098:	2b2a      	cmp	r3, #42	; 0x2a
 800109a:	d802      	bhi.n	80010a2 <main+0x112>
 800109c:	2314      	movs	r3, #20
 800109e:	80bb      	strh	r3, [r7, #4]
 80010a0:	e007      	b.n	80010b2 <main+0x122>
	else if(avg_val < 50) brightness = 10;
 80010a2:	78fb      	ldrb	r3, [r7, #3]
 80010a4:	2b31      	cmp	r3, #49	; 0x31
 80010a6:	d802      	bhi.n	80010ae <main+0x11e>
 80010a8:	230a      	movs	r3, #10
 80010aa:	80bb      	strh	r3, [r7, #4]
 80010ac:	e001      	b.n	80010b2 <main+0x122>
	else brightness = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	80bb      	strh	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, brightness * 650);
 80010b2:	88bb      	ldrh	r3, [r7, #4]
 80010b4:	f240 228a 	movw	r2, #650	; 0x28a
 80010b8:	fb03 f202 	mul.w	r2, r3, r2
 80010bc:	4b02      	ldr	r3, [pc, #8]	; (80010c8 <main+0x138>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	639a      	str	r2, [r3, #56]	; 0x38
	i = 0;
 80010c2:	e797      	b.n	8000ff4 <main+0x64>
 80010c4:	200000e8 	.word	0x200000e8
 80010c8:	20000130 	.word	0x20000130
 80010cc:	20000000 	.word	0x20000000
 80010d0:	08005df8 	.word	0x08005df8
 80010d4:	200001c9 	.word	0x200001c9
 80010d8:	cccccccd 	.word	0xcccccccd

080010dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b094      	sub	sp, #80	; 0x50
 80010e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e2:	f107 031c 	add.w	r3, r7, #28
 80010e6:	2234      	movs	r2, #52	; 0x34
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f004 f9f8 	bl	80054e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f0:	f107 0308 	add.w	r3, r7, #8
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <SystemClock_Config+0xd4>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	4a29      	ldr	r2, [pc, #164]	; (80011b0 <SystemClock_Config+0xd4>)
 800110a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110e:	6413      	str	r3, [r2, #64]	; 0x40
 8001110:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <SystemClock_Config+0xd4>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800111c:	2300      	movs	r3, #0
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <SystemClock_Config+0xd8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001128:	4a22      	ldr	r2, [pc, #136]	; (80011b4 <SystemClock_Config+0xd8>)
 800112a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	4b20      	ldr	r3, [pc, #128]	; (80011b4 <SystemClock_Config+0xd8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800113c:	2302      	movs	r3, #2
 800113e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001140:	2301      	movs	r3, #1
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001144:	2310      	movs	r3, #16
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001148:	2302      	movs	r3, #2
 800114a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800114c:	2300      	movs	r3, #0
 800114e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001150:	2310      	movs	r3, #16
 8001152:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001154:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001158:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800115a:	2304      	movs	r3, #4
 800115c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800115e:	2302      	movs	r3, #2
 8001160:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001162:	2302      	movs	r3, #2
 8001164:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001166:	f107 031c 	add.w	r3, r7, #28
 800116a:	4618      	mov	r0, r3
 800116c:	f002 fa9c 	bl	80036a8 <HAL_RCC_OscConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001176:	f000 f9ad 	bl	80014d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117a:	230f      	movs	r3, #15
 800117c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800117e:	2302      	movs	r3, #2
 8001180:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001190:	f107 0308 	add.w	r3, r7, #8
 8001194:	2102      	movs	r1, #2
 8001196:	4618      	mov	r0, r3
 8001198:	f001 ff3c 	bl	8003014 <HAL_RCC_ClockConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80011a2:	f000 f997 	bl	80014d4 <Error_Handler>
  }
}
 80011a6:	bf00      	nop
 80011a8:	3750      	adds	r7, #80	; 0x50
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40007000 	.word	0x40007000

080011b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <MX_I2C1_Init+0x50>)
 80011be:	4a13      	ldr	r2, [pc, #76]	; (800120c <MX_I2C1_Init+0x54>)
 80011c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <MX_I2C1_Init+0x50>)
 80011c4:	4a12      	ldr	r2, [pc, #72]	; (8001210 <MX_I2C1_Init+0x58>)
 80011c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MX_I2C1_Init+0x50>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <MX_I2C1_Init+0x50>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <MX_I2C1_Init+0x50>)
 80011d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <MX_I2C1_Init+0x50>)
 80011de:	2200      	movs	r2, #0
 80011e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_I2C1_Init+0x50>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <MX_I2C1_Init+0x50>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <MX_I2C1_Init+0x50>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011f4:	4804      	ldr	r0, [pc, #16]	; (8001208 <MX_I2C1_Init+0x50>)
 80011f6:	f001 f993 	bl	8002520 <HAL_I2C_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001200:	f000 f968 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000094 	.word	0x20000094
 800120c:	40005400 	.word	0x40005400
 8001210:	00061a80 	.word	0x00061a80

08001214 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121a:	f107 0310 	add.w	r3, r7, #16
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001224:	463b      	mov	r3, r7
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001230:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <MX_TIM1_Init+0xa4>)
 8001232:	4a22      	ldr	r2, [pc, #136]	; (80012bc <MX_TIM1_Init+0xa8>)
 8001234:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001236:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <MX_TIM1_Init+0xa4>)
 8001238:	2253      	movs	r2, #83	; 0x53
 800123a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123c:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <MX_TIM1_Init+0xa4>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001242:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <MX_TIM1_Init+0xa4>)
 8001244:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001248:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124a:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <MX_TIM1_Init+0xa4>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <MX_TIM1_Init+0xa4>)
 8001252:	2200      	movs	r2, #0
 8001254:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001256:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <MX_TIM1_Init+0xa4>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800125c:	4816      	ldr	r0, [pc, #88]	; (80012b8 <MX_TIM1_Init+0xa4>)
 800125e:	f002 fdd9 	bl	8003e14 <HAL_TIM_IC_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001268:	f000 f934 	bl	80014d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126c:	2300      	movs	r3, #0
 800126e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	4619      	mov	r1, r3
 800127a:	480f      	ldr	r0, [pc, #60]	; (80012b8 <MX_TIM1_Init+0xa4>)
 800127c:	f003 fdb4 	bl	8004de8 <HAL_TIMEx_MasterConfigSynchronization>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001286:	f000 f925 	bl	80014d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800128a:	2300      	movs	r3, #0
 800128c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800128e:	2301      	movs	r3, #1
 8001290:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800129a:	463b      	mov	r3, r7
 800129c:	2200      	movs	r2, #0
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_TIM1_Init+0xa4>)
 80012a2:	f003 f837 	bl	8004314 <HAL_TIM_IC_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80012ac:	f000 f912 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200000e8 	.word	0x200000e8
 80012bc:	40010000 	.word	0x40010000

080012c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c6:	f107 0320 	add.w	r3, r7, #32
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
 80012dc:	611a      	str	r2, [r3, #16]
 80012de:	615a      	str	r2, [r3, #20]
 80012e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012e2:	4b22      	ldr	r3, [pc, #136]	; (800136c <MX_TIM3_Init+0xac>)
 80012e4:	4a22      	ldr	r2, [pc, #136]	; (8001370 <MX_TIM3_Init+0xb0>)
 80012e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012e8:	4b20      	ldr	r3, [pc, #128]	; (800136c <MX_TIM3_Init+0xac>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ee:	4b1f      	ldr	r3, [pc, #124]	; (800136c <MX_TIM3_Init+0xac>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012f4:	4b1d      	ldr	r3, [pc, #116]	; (800136c <MX_TIM3_Init+0xac>)
 80012f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <MX_TIM3_Init+0xac>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <MX_TIM3_Init+0xac>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001308:	4818      	ldr	r0, [pc, #96]	; (800136c <MX_TIM3_Init+0xac>)
 800130a:	f002 fc6b 	bl	8003be4 <HAL_TIM_PWM_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001314:	f000 f8de 	bl	80014d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001318:	2300      	movs	r3, #0
 800131a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001320:	f107 0320 	add.w	r3, r7, #32
 8001324:	4619      	mov	r1, r3
 8001326:	4811      	ldr	r0, [pc, #68]	; (800136c <MX_TIM3_Init+0xac>)
 8001328:	f003 fd5e 	bl	8004de8 <HAL_TIMEx_MasterConfigSynchronization>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001332:	f000 f8cf 	bl	80014d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001336:	2360      	movs	r3, #96	; 0x60
 8001338:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	2204      	movs	r2, #4
 800134a:	4619      	mov	r1, r3
 800134c:	4807      	ldr	r0, [pc, #28]	; (800136c <MX_TIM3_Init+0xac>)
 800134e:	f003 f87d 	bl	800444c <HAL_TIM_PWM_ConfigChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001358:	f000 f8bc 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800135c:	4803      	ldr	r0, [pc, #12]	; (800136c <MX_TIM3_Init+0xac>)
 800135e:	f000 fc61 	bl	8001c24 <HAL_TIM_MspPostInit>

}
 8001362:	bf00      	nop
 8001364:	3728      	adds	r7, #40	; 0x28
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000130 	.word	0x20000130
 8001370:	40000400 	.word	0x40000400

08001374 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 800137a:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <MX_USART2_UART_Init+0x50>)
 800137c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 8001380:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001384:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 800139a:	220c      	movs	r2, #12
 800139c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139e:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 80013ac:	f003 fdac 	bl	8004f08 <HAL_UART_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013b6:	f000 f88d 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000178 	.word	0x20000178
 80013c4:	40004400 	.word	0x40004400

080013c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	4b38      	ldr	r3, [pc, #224]	; (80014c4 <MX_GPIO_Init+0xfc>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a37      	ldr	r2, [pc, #220]	; (80014c4 <MX_GPIO_Init+0xfc>)
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b35      	ldr	r3, [pc, #212]	; (80014c4 <MX_GPIO_Init+0xfc>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0304 	and.w	r3, r3, #4
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	4b31      	ldr	r3, [pc, #196]	; (80014c4 <MX_GPIO_Init+0xfc>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a30      	ldr	r2, [pc, #192]	; (80014c4 <MX_GPIO_Init+0xfc>)
 8001404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b2e      	ldr	r3, [pc, #184]	; (80014c4 <MX_GPIO_Init+0xfc>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	4b2a      	ldr	r3, [pc, #168]	; (80014c4 <MX_GPIO_Init+0xfc>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a29      	ldr	r2, [pc, #164]	; (80014c4 <MX_GPIO_Init+0xfc>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <MX_GPIO_Init+0xfc>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <MX_GPIO_Init+0xfc>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a22      	ldr	r2, [pc, #136]	; (80014c4 <MX_GPIO_Init+0xfc>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <MX_GPIO_Init+0xfc>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	2120      	movs	r1, #32
 8001452:	481d      	ldr	r0, [pc, #116]	; (80014c8 <MX_GPIO_Init+0x100>)
 8001454:	f001 f84a 	bl	80024ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800145e:	481b      	ldr	r0, [pc, #108]	; (80014cc <MX_GPIO_Init+0x104>)
 8001460:	f001 f844 	bl	80024ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001464:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001468:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800146a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800146e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	4619      	mov	r1, r3
 800147a:	4815      	ldr	r0, [pc, #84]	; (80014d0 <MX_GPIO_Init+0x108>)
 800147c:	f000 fea2 	bl	80021c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001480:	2320      	movs	r3, #32
 8001482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001484:	2301      	movs	r3, #1
 8001486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4619      	mov	r1, r3
 8001496:	480c      	ldr	r0, [pc, #48]	; (80014c8 <MX_GPIO_Init+0x100>)
 8001498:	f000 fe94 	bl	80021c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800149c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a2:	2301      	movs	r3, #1
 80014a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_GPIO_Init+0x104>)
 80014b6:	f000 fe85 	bl	80021c4 <HAL_GPIO_Init>

}
 80014ba:	bf00      	nop
 80014bc:	3728      	adds	r7, #40	; 0x28
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40020000 	.word	0x40020000
 80014cc:	40020400 	.word	0x40020400
 80014d0:	40020800 	.word	0x40020800

080014d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d8:	b672      	cpsid	i
}
 80014da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014dc:	e7fe      	b.n	80014dc <Error_Handler+0x8>
	...

080014e0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80014e6:	f000 fa21 	bl	800192c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80014ea:	f644 6320 	movw	r3, #20000	; 0x4e20
 80014ee:	2201      	movs	r2, #1
 80014f0:	2178      	movs	r1, #120	; 0x78
 80014f2:	485b      	ldr	r0, [pc, #364]	; (8001660 <SSD1306_Init+0x180>)
 80014f4:	f001 fa56 	bl	80029a4 <HAL_I2C_IsDeviceReady>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	e0a9      	b.n	8001656 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001502:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001506:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001508:	e002      	b.n	8001510 <SSD1306_Init+0x30>
		p--;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3b01      	subs	r3, #1
 800150e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f9      	bne.n	800150a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001516:	22ae      	movs	r2, #174	; 0xae
 8001518:	2100      	movs	r1, #0
 800151a:	2078      	movs	r0, #120	; 0x78
 800151c:	f000 fa82 	bl	8001a24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001520:	2220      	movs	r2, #32
 8001522:	2100      	movs	r1, #0
 8001524:	2078      	movs	r0, #120	; 0x78
 8001526:	f000 fa7d 	bl	8001a24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800152a:	2210      	movs	r2, #16
 800152c:	2100      	movs	r1, #0
 800152e:	2078      	movs	r0, #120	; 0x78
 8001530:	f000 fa78 	bl	8001a24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001534:	22b0      	movs	r2, #176	; 0xb0
 8001536:	2100      	movs	r1, #0
 8001538:	2078      	movs	r0, #120	; 0x78
 800153a:	f000 fa73 	bl	8001a24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800153e:	22c8      	movs	r2, #200	; 0xc8
 8001540:	2100      	movs	r1, #0
 8001542:	2078      	movs	r0, #120	; 0x78
 8001544:	f000 fa6e 	bl	8001a24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001548:	2200      	movs	r2, #0
 800154a:	2100      	movs	r1, #0
 800154c:	2078      	movs	r0, #120	; 0x78
 800154e:	f000 fa69 	bl	8001a24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001552:	2210      	movs	r2, #16
 8001554:	2100      	movs	r1, #0
 8001556:	2078      	movs	r0, #120	; 0x78
 8001558:	f000 fa64 	bl	8001a24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800155c:	2240      	movs	r2, #64	; 0x40
 800155e:	2100      	movs	r1, #0
 8001560:	2078      	movs	r0, #120	; 0x78
 8001562:	f000 fa5f 	bl	8001a24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001566:	2281      	movs	r2, #129	; 0x81
 8001568:	2100      	movs	r1, #0
 800156a:	2078      	movs	r0, #120	; 0x78
 800156c:	f000 fa5a 	bl	8001a24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001570:	22ff      	movs	r2, #255	; 0xff
 8001572:	2100      	movs	r1, #0
 8001574:	2078      	movs	r0, #120	; 0x78
 8001576:	f000 fa55 	bl	8001a24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800157a:	22a1      	movs	r2, #161	; 0xa1
 800157c:	2100      	movs	r1, #0
 800157e:	2078      	movs	r0, #120	; 0x78
 8001580:	f000 fa50 	bl	8001a24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001584:	22a6      	movs	r2, #166	; 0xa6
 8001586:	2100      	movs	r1, #0
 8001588:	2078      	movs	r0, #120	; 0x78
 800158a:	f000 fa4b 	bl	8001a24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800158e:	22a8      	movs	r2, #168	; 0xa8
 8001590:	2100      	movs	r1, #0
 8001592:	2078      	movs	r0, #120	; 0x78
 8001594:	f000 fa46 	bl	8001a24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001598:	223f      	movs	r2, #63	; 0x3f
 800159a:	2100      	movs	r1, #0
 800159c:	2078      	movs	r0, #120	; 0x78
 800159e:	f000 fa41 	bl	8001a24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80015a2:	22a4      	movs	r2, #164	; 0xa4
 80015a4:	2100      	movs	r1, #0
 80015a6:	2078      	movs	r0, #120	; 0x78
 80015a8:	f000 fa3c 	bl	8001a24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80015ac:	22d3      	movs	r2, #211	; 0xd3
 80015ae:	2100      	movs	r1, #0
 80015b0:	2078      	movs	r0, #120	; 0x78
 80015b2:	f000 fa37 	bl	8001a24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	2078      	movs	r0, #120	; 0x78
 80015bc:	f000 fa32 	bl	8001a24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80015c0:	22d5      	movs	r2, #213	; 0xd5
 80015c2:	2100      	movs	r1, #0
 80015c4:	2078      	movs	r0, #120	; 0x78
 80015c6:	f000 fa2d 	bl	8001a24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80015ca:	22f0      	movs	r2, #240	; 0xf0
 80015cc:	2100      	movs	r1, #0
 80015ce:	2078      	movs	r0, #120	; 0x78
 80015d0:	f000 fa28 	bl	8001a24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80015d4:	22d9      	movs	r2, #217	; 0xd9
 80015d6:	2100      	movs	r1, #0
 80015d8:	2078      	movs	r0, #120	; 0x78
 80015da:	f000 fa23 	bl	8001a24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80015de:	2222      	movs	r2, #34	; 0x22
 80015e0:	2100      	movs	r1, #0
 80015e2:	2078      	movs	r0, #120	; 0x78
 80015e4:	f000 fa1e 	bl	8001a24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80015e8:	22da      	movs	r2, #218	; 0xda
 80015ea:	2100      	movs	r1, #0
 80015ec:	2078      	movs	r0, #120	; 0x78
 80015ee:	f000 fa19 	bl	8001a24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80015f2:	2212      	movs	r2, #18
 80015f4:	2100      	movs	r1, #0
 80015f6:	2078      	movs	r0, #120	; 0x78
 80015f8:	f000 fa14 	bl	8001a24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80015fc:	22db      	movs	r2, #219	; 0xdb
 80015fe:	2100      	movs	r1, #0
 8001600:	2078      	movs	r0, #120	; 0x78
 8001602:	f000 fa0f 	bl	8001a24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001606:	2220      	movs	r2, #32
 8001608:	2100      	movs	r1, #0
 800160a:	2078      	movs	r0, #120	; 0x78
 800160c:	f000 fa0a 	bl	8001a24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001610:	228d      	movs	r2, #141	; 0x8d
 8001612:	2100      	movs	r1, #0
 8001614:	2078      	movs	r0, #120	; 0x78
 8001616:	f000 fa05 	bl	8001a24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800161a:	2214      	movs	r2, #20
 800161c:	2100      	movs	r1, #0
 800161e:	2078      	movs	r0, #120	; 0x78
 8001620:	f000 fa00 	bl	8001a24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001624:	22af      	movs	r2, #175	; 0xaf
 8001626:	2100      	movs	r1, #0
 8001628:	2078      	movs	r0, #120	; 0x78
 800162a:	f000 f9fb 	bl	8001a24 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800162e:	222e      	movs	r2, #46	; 0x2e
 8001630:	2100      	movs	r1, #0
 8001632:	2078      	movs	r0, #120	; 0x78
 8001634:	f000 f9f6 	bl	8001a24 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001638:	2000      	movs	r0, #0
 800163a:	f000 f843 	bl	80016c4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800163e:	f000 f813 	bl	8001668 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001642:	4b08      	ldr	r3, [pc, #32]	; (8001664 <SSD1306_Init+0x184>)
 8001644:	2200      	movs	r2, #0
 8001646:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <SSD1306_Init+0x184>)
 800164a:	2200      	movs	r2, #0
 800164c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800164e:	4b05      	ldr	r3, [pc, #20]	; (8001664 <SSD1306_Init+0x184>)
 8001650:	2201      	movs	r2, #1
 8001652:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001654:	2301      	movs	r3, #1
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000094 	.word	0x20000094
 8001664:	200005cc 	.word	0x200005cc

08001668 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800166e:	2300      	movs	r3, #0
 8001670:	71fb      	strb	r3, [r7, #7]
 8001672:	e01d      	b.n	80016b0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	3b50      	subs	r3, #80	; 0x50
 8001678:	b2db      	uxtb	r3, r3
 800167a:	461a      	mov	r2, r3
 800167c:	2100      	movs	r1, #0
 800167e:	2078      	movs	r0, #120	; 0x78
 8001680:	f000 f9d0 	bl	8001a24 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001684:	2200      	movs	r2, #0
 8001686:	2100      	movs	r1, #0
 8001688:	2078      	movs	r0, #120	; 0x78
 800168a:	f000 f9cb 	bl	8001a24 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800168e:	2210      	movs	r2, #16
 8001690:	2100      	movs	r1, #0
 8001692:	2078      	movs	r0, #120	; 0x78
 8001694:	f000 f9c6 	bl	8001a24 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	01db      	lsls	r3, r3, #7
 800169c:	4a08      	ldr	r2, [pc, #32]	; (80016c0 <SSD1306_UpdateScreen+0x58>)
 800169e:	441a      	add	r2, r3
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	2140      	movs	r1, #64	; 0x40
 80016a4:	2078      	movs	r0, #120	; 0x78
 80016a6:	f000 f957 	bl	8001958 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	3301      	adds	r3, #1
 80016ae:	71fb      	strb	r3, [r7, #7]
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	2b07      	cmp	r3, #7
 80016b4:	d9de      	bls.n	8001674 <SSD1306_UpdateScreen+0xc>
	}
}
 80016b6:	bf00      	nop
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200001cc 	.word	0x200001cc

080016c4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <SSD1306_Fill+0x14>
 80016d4:	2300      	movs	r3, #0
 80016d6:	e000      	b.n	80016da <SSD1306_Fill+0x16>
 80016d8:	23ff      	movs	r3, #255	; 0xff
 80016da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016de:	4619      	mov	r1, r3
 80016e0:	4803      	ldr	r0, [pc, #12]	; (80016f0 <SSD1306_Fill+0x2c>)
 80016e2:	f003 fefd 	bl	80054e0 <memset>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200001cc 	.word	0x200001cc

080016f4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	80fb      	strh	r3, [r7, #6]
 80016fe:	460b      	mov	r3, r1
 8001700:	80bb      	strh	r3, [r7, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	70fb      	strb	r3, [r7, #3]
	if (
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	2b7f      	cmp	r3, #127	; 0x7f
 800170a:	d848      	bhi.n	800179e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800170c:	88bb      	ldrh	r3, [r7, #4]
 800170e:	2b3f      	cmp	r3, #63	; 0x3f
 8001710:	d845      	bhi.n	800179e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001712:	4b26      	ldr	r3, [pc, #152]	; (80017ac <SSD1306_DrawPixel+0xb8>)
 8001714:	791b      	ldrb	r3, [r3, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d006      	beq.n	8001728 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800171a:	78fb      	ldrb	r3, [r7, #3]
 800171c:	2b00      	cmp	r3, #0
 800171e:	bf0c      	ite	eq
 8001720:	2301      	moveq	r3, #1
 8001722:	2300      	movne	r3, #0
 8001724:	b2db      	uxtb	r3, r3
 8001726:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001728:	78fb      	ldrb	r3, [r7, #3]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d11a      	bne.n	8001764 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800172e:	88fa      	ldrh	r2, [r7, #6]
 8001730:	88bb      	ldrh	r3, [r7, #4]
 8001732:	08db      	lsrs	r3, r3, #3
 8001734:	b298      	uxth	r0, r3
 8001736:	4603      	mov	r3, r0
 8001738:	01db      	lsls	r3, r3, #7
 800173a:	4413      	add	r3, r2
 800173c:	4a1c      	ldr	r2, [pc, #112]	; (80017b0 <SSD1306_DrawPixel+0xbc>)
 800173e:	5cd3      	ldrb	r3, [r2, r3]
 8001740:	b25a      	sxtb	r2, r3
 8001742:	88bb      	ldrh	r3, [r7, #4]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	2101      	movs	r1, #1
 800174a:	fa01 f303 	lsl.w	r3, r1, r3
 800174e:	b25b      	sxtb	r3, r3
 8001750:	4313      	orrs	r3, r2
 8001752:	b259      	sxtb	r1, r3
 8001754:	88fa      	ldrh	r2, [r7, #6]
 8001756:	4603      	mov	r3, r0
 8001758:	01db      	lsls	r3, r3, #7
 800175a:	4413      	add	r3, r2
 800175c:	b2c9      	uxtb	r1, r1
 800175e:	4a14      	ldr	r2, [pc, #80]	; (80017b0 <SSD1306_DrawPixel+0xbc>)
 8001760:	54d1      	strb	r1, [r2, r3]
 8001762:	e01d      	b.n	80017a0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001764:	88fa      	ldrh	r2, [r7, #6]
 8001766:	88bb      	ldrh	r3, [r7, #4]
 8001768:	08db      	lsrs	r3, r3, #3
 800176a:	b298      	uxth	r0, r3
 800176c:	4603      	mov	r3, r0
 800176e:	01db      	lsls	r3, r3, #7
 8001770:	4413      	add	r3, r2
 8001772:	4a0f      	ldr	r2, [pc, #60]	; (80017b0 <SSD1306_DrawPixel+0xbc>)
 8001774:	5cd3      	ldrb	r3, [r2, r3]
 8001776:	b25a      	sxtb	r2, r3
 8001778:	88bb      	ldrh	r3, [r7, #4]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	2101      	movs	r1, #1
 8001780:	fa01 f303 	lsl.w	r3, r1, r3
 8001784:	b25b      	sxtb	r3, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	b25b      	sxtb	r3, r3
 800178a:	4013      	ands	r3, r2
 800178c:	b259      	sxtb	r1, r3
 800178e:	88fa      	ldrh	r2, [r7, #6]
 8001790:	4603      	mov	r3, r0
 8001792:	01db      	lsls	r3, r3, #7
 8001794:	4413      	add	r3, r2
 8001796:	b2c9      	uxtb	r1, r1
 8001798:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <SSD1306_DrawPixel+0xbc>)
 800179a:	54d1      	strb	r1, [r2, r3]
 800179c:	e000      	b.n	80017a0 <SSD1306_DrawPixel+0xac>
		return;
 800179e:	bf00      	nop
	}
}
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	200005cc 	.word	0x200005cc
 80017b0:	200001cc 	.word	0x200001cc

080017b4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	460a      	mov	r2, r1
 80017be:	80fb      	strh	r3, [r7, #6]
 80017c0:	4613      	mov	r3, r2
 80017c2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80017c4:	4a05      	ldr	r2, [pc, #20]	; (80017dc <SSD1306_GotoXY+0x28>)
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80017ca:	4a04      	ldr	r2, [pc, #16]	; (80017dc <SSD1306_GotoXY+0x28>)
 80017cc:	88bb      	ldrh	r3, [r7, #4]
 80017ce:	8053      	strh	r3, [r2, #2]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	200005cc 	.word	0x200005cc

080017e0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	6039      	str	r1, [r7, #0]
 80017ea:	71fb      	strb	r3, [r7, #7]
 80017ec:	4613      	mov	r3, r2
 80017ee:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80017f0:	4b3a      	ldr	r3, [pc, #232]	; (80018dc <SSD1306_Putc+0xfc>)
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	4413      	add	r3, r2
	if (
 80017fc:	2b7f      	cmp	r3, #127	; 0x7f
 80017fe:	dc07      	bgt.n	8001810 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001800:	4b36      	ldr	r3, [pc, #216]	; (80018dc <SSD1306_Putc+0xfc>)
 8001802:	885b      	ldrh	r3, [r3, #2]
 8001804:	461a      	mov	r2, r3
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	785b      	ldrb	r3, [r3, #1]
 800180a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800180c:	2b3f      	cmp	r3, #63	; 0x3f
 800180e:	dd01      	ble.n	8001814 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001810:	2300      	movs	r3, #0
 8001812:	e05e      	b.n	80018d2 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	e04b      	b.n	80018b2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	3b20      	subs	r3, #32
 8001822:	6839      	ldr	r1, [r7, #0]
 8001824:	7849      	ldrb	r1, [r1, #1]
 8001826:	fb01 f303 	mul.w	r3, r1, r3
 800182a:	4619      	mov	r1, r3
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	440b      	add	r3, r1
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4413      	add	r3, r2
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001838:	2300      	movs	r3, #0
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	e030      	b.n	80018a0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d010      	beq.n	8001870 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800184e:	4b23      	ldr	r3, [pc, #140]	; (80018dc <SSD1306_Putc+0xfc>)
 8001850:	881a      	ldrh	r2, [r3, #0]
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	b29b      	uxth	r3, r3
 8001856:	4413      	add	r3, r2
 8001858:	b298      	uxth	r0, r3
 800185a:	4b20      	ldr	r3, [pc, #128]	; (80018dc <SSD1306_Putc+0xfc>)
 800185c:	885a      	ldrh	r2, [r3, #2]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	b29b      	uxth	r3, r3
 8001862:	4413      	add	r3, r2
 8001864:	b29b      	uxth	r3, r3
 8001866:	79ba      	ldrb	r2, [r7, #6]
 8001868:	4619      	mov	r1, r3
 800186a:	f7ff ff43 	bl	80016f4 <SSD1306_DrawPixel>
 800186e:	e014      	b.n	800189a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001870:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <SSD1306_Putc+0xfc>)
 8001872:	881a      	ldrh	r2, [r3, #0]
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	b29b      	uxth	r3, r3
 8001878:	4413      	add	r3, r2
 800187a:	b298      	uxth	r0, r3
 800187c:	4b17      	ldr	r3, [pc, #92]	; (80018dc <SSD1306_Putc+0xfc>)
 800187e:	885a      	ldrh	r2, [r3, #2]
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	b29b      	uxth	r3, r3
 8001884:	4413      	add	r3, r2
 8001886:	b299      	uxth	r1, r3
 8001888:	79bb      	ldrb	r3, [r7, #6]
 800188a:	2b00      	cmp	r3, #0
 800188c:	bf0c      	ite	eq
 800188e:	2301      	moveq	r3, #1
 8001890:	2300      	movne	r3, #0
 8001892:	b2db      	uxtb	r3, r3
 8001894:	461a      	mov	r2, r3
 8001896:	f7ff ff2d 	bl	80016f4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	3301      	adds	r3, #1
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d3c8      	bcc.n	800183e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	3301      	adds	r3, #1
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	785b      	ldrb	r3, [r3, #1]
 80018b6:	461a      	mov	r2, r3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d3ad      	bcc.n	800181a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <SSD1306_Putc+0xfc>)
 80018c0:	881a      	ldrh	r2, [r3, #0]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	4413      	add	r3, r2
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	4b03      	ldr	r3, [pc, #12]	; (80018dc <SSD1306_Putc+0xfc>)
 80018ce:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80018d0:	79fb      	ldrb	r3, [r7, #7]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200005cc 	.word	0x200005cc

080018e0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	4613      	mov	r3, r2
 80018ec:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80018ee:	e012      	b.n	8001916 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	79fa      	ldrb	r2, [r7, #7]
 80018f6:	68b9      	ldr	r1, [r7, #8]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff71 	bl	80017e0 <SSD1306_Putc>
 80018fe:	4603      	mov	r3, r0
 8001900:	461a      	mov	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d002      	beq.n	8001910 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	e008      	b.n	8001922 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	3301      	adds	r3, #1
 8001914:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1e8      	bne.n	80018f0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	781b      	ldrb	r3, [r3, #0]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001932:	4b08      	ldr	r3, [pc, #32]	; (8001954 <ssd1306_I2C_Init+0x28>)
 8001934:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001936:	e002      	b.n	800193e <ssd1306_I2C_Init+0x12>
		p--;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1f9      	bne.n	8001938 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001944:	bf00      	nop
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	0003d090 	.word	0x0003d090

08001958 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b0c7      	sub	sp, #284	; 0x11c
 800195c:	af02      	add	r7, sp, #8
 800195e:	4604      	mov	r4, r0
 8001960:	4608      	mov	r0, r1
 8001962:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001966:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800196a:	600a      	str	r2, [r1, #0]
 800196c:	4619      	mov	r1, r3
 800196e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001972:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001976:	4622      	mov	r2, r4
 8001978:	701a      	strb	r2, [r3, #0]
 800197a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800197e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001982:	4602      	mov	r2, r0
 8001984:	701a      	strb	r2, [r3, #0]
 8001986:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800198a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800198e:	460a      	mov	r2, r1
 8001990:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001992:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001996:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800199a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800199e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80019a2:	7812      	ldrb	r2, [r2, #0]
 80019a4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80019a6:	2300      	movs	r3, #0
 80019a8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80019ac:	e015      	b.n	80019da <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80019ae:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019b2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80019b6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80019ba:	6812      	ldr	r2, [r2, #0]
 80019bc:	441a      	add	r2, r3
 80019be:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019c2:	3301      	adds	r3, #1
 80019c4:	7811      	ldrb	r1, [r2, #0]
 80019c6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80019ca:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80019ce:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80019d0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019d4:	3301      	adds	r3, #1
 80019d6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80019da:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019de:	b29b      	uxth	r3, r3
 80019e0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80019e4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80019e8:	8812      	ldrh	r2, [r2, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d8df      	bhi.n	80019ae <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80019ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019f2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	b299      	uxth	r1, r3
 80019fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	3301      	adds	r3, #1
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	f107 020c 	add.w	r2, r7, #12
 8001a0c:	200a      	movs	r0, #10
 8001a0e:	9000      	str	r0, [sp, #0]
 8001a10:	4803      	ldr	r0, [pc, #12]	; (8001a20 <ssd1306_I2C_WriteMulti+0xc8>)
 8001a12:	f000 fec9 	bl	80027a8 <HAL_I2C_Master_Transmit>
}
 8001a16:	bf00      	nop
 8001a18:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd90      	pop	{r4, r7, pc}
 8001a20:	20000094 	.word	0x20000094

08001a24 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af02      	add	r7, sp, #8
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
 8001a2e:	460b      	mov	r3, r1
 8001a30:	71bb      	strb	r3, [r7, #6]
 8001a32:	4613      	mov	r3, r2
 8001a34:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001a36:	79bb      	ldrb	r3, [r7, #6]
 8001a38:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001a3a:	797b      	ldrb	r3, [r7, #5]
 8001a3c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	b299      	uxth	r1, r3
 8001a42:	f107 020c 	add.w	r2, r7, #12
 8001a46:	230a      	movs	r3, #10
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	4803      	ldr	r0, [pc, #12]	; (8001a5c <ssd1306_I2C_Write+0x38>)
 8001a4e:	f000 feab 	bl	80027a8 <HAL_I2C_Master_Transmit>
}
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000094 	.word	0x20000094

08001a60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <HAL_MspInit+0x4c>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	4a0f      	ldr	r2, [pc, #60]	; (8001aac <HAL_MspInit+0x4c>)
 8001a70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a74:	6453      	str	r3, [r2, #68]	; 0x44
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <HAL_MspInit+0x4c>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <HAL_MspInit+0x4c>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	4a08      	ldr	r2, [pc, #32]	; (8001aac <HAL_MspInit+0x4c>)
 8001a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a90:	6413      	str	r3, [r2, #64]	; 0x40
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_MspInit+0x4c>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	603b      	str	r3, [r7, #0]
 8001a9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a9e:	2007      	movs	r0, #7
 8001aa0:	f000 fb4e 	bl	8002140 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40023800 	.word	0x40023800

08001ab0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	; 0x28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a19      	ldr	r2, [pc, #100]	; (8001b34 <HAL_I2C_MspInit+0x84>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d12c      	bne.n	8001b2c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_I2C_MspInit+0x88>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a17      	ldr	r2, [pc, #92]	; (8001b38 <HAL_I2C_MspInit+0x88>)
 8001adc:	f043 0302 	orr.w	r3, r3, #2
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <HAL_I2C_MspInit+0x88>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001aee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001af4:	2312      	movs	r3, #18
 8001af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afc:	2303      	movs	r3, #3
 8001afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b00:	2304      	movs	r3, #4
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	4619      	mov	r1, r3
 8001b0a:	480c      	ldr	r0, [pc, #48]	; (8001b3c <HAL_I2C_MspInit+0x8c>)
 8001b0c:	f000 fb5a 	bl	80021c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_I2C_MspInit+0x88>)
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <HAL_I2C_MspInit+0x88>)
 8001b1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <HAL_I2C_MspInit+0x88>)
 8001b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b2c:	bf00      	nop
 8001b2e:	3728      	adds	r7, #40	; 0x28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40005400 	.word	0x40005400
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40020400 	.word	0x40020400

08001b40 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	; 0x28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a1d      	ldr	r2, [pc, #116]	; (8001bd4 <HAL_TIM_IC_MspInit+0x94>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d134      	bne.n	8001bcc <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <HAL_TIM_IC_MspInit+0x98>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	4a1b      	ldr	r2, [pc, #108]	; (8001bd8 <HAL_TIM_IC_MspInit+0x98>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6453      	str	r3, [r2, #68]	; 0x44
 8001b72:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <HAL_TIM_IC_MspInit+0x98>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <HAL_TIM_IC_MspInit+0x98>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a14      	ldr	r2, [pc, #80]	; (8001bd8 <HAL_TIM_IC_MspInit+0x98>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_TIM_IC_MspInit+0x98>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bac:	2301      	movs	r3, #1
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4809      	ldr	r0, [pc, #36]	; (8001bdc <HAL_TIM_IC_MspInit+0x9c>)
 8001bb8:	f000 fb04 	bl	80021c4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	201b      	movs	r0, #27
 8001bc2:	f000 fac8 	bl	8002156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001bc6:	201b      	movs	r0, #27
 8001bc8:	f000 fae1 	bl	800218e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001bcc:	bf00      	nop
 8001bce:	3728      	adds	r7, #40	; 0x28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40010000 	.word	0x40010000
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40020000 	.word	0x40020000

08001be0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <HAL_TIM_PWM_MspInit+0x3c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d10d      	bne.n	8001c0e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_TIM_PWM_MspInit+0x40>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <HAL_TIM_PWM_MspInit+0x40>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	6413      	str	r3, [r2, #64]	; 0x40
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <HAL_TIM_PWM_MspInit+0x40>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c0e:	bf00      	nop
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40000400 	.word	0x40000400
 8001c20:	40023800 	.word	0x40023800

08001c24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a12      	ldr	r2, [pc, #72]	; (8001c8c <HAL_TIM_MspPostInit+0x68>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d11d      	bne.n	8001c82 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <HAL_TIM_MspPostInit+0x6c>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a10      	ldr	r2, [pc, #64]	; (8001c90 <HAL_TIM_MspPostInit+0x6c>)
 8001c50:	f043 0304 	orr.w	r3, r3, #4
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <HAL_TIM_MspPostInit+0x6c>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c62:	2380      	movs	r3, #128	; 0x80
 8001c64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c66:	2302      	movs	r3, #2
 8001c68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c72:	2302      	movs	r3, #2
 8001c74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c76:	f107 030c 	add.w	r3, r7, #12
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4805      	ldr	r0, [pc, #20]	; (8001c94 <HAL_TIM_MspPostInit+0x70>)
 8001c7e:	f000 faa1 	bl	80021c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c82:	bf00      	nop
 8001c84:	3720      	adds	r7, #32
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40000400 	.word	0x40000400
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40020800 	.word	0x40020800

08001c98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08a      	sub	sp, #40	; 0x28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a19      	ldr	r2, [pc, #100]	; (8001d1c <HAL_UART_MspInit+0x84>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d12b      	bne.n	8001d12 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <HAL_UART_MspInit+0x88>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	4a17      	ldr	r2, [pc, #92]	; (8001d20 <HAL_UART_MspInit+0x88>)
 8001cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cca:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <HAL_UART_MspInit+0x88>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <HAL_UART_MspInit+0x88>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4a10      	ldr	r2, [pc, #64]	; (8001d20 <HAL_UART_MspInit+0x88>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <HAL_UART_MspInit+0x88>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001cf2:	230c      	movs	r3, #12
 8001cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d02:	2307      	movs	r3, #7
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d06:	f107 0314 	add.w	r3, r7, #20
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4805      	ldr	r0, [pc, #20]	; (8001d24 <HAL_UART_MspInit+0x8c>)
 8001d0e:	f000 fa59 	bl	80021c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d12:	bf00      	nop
 8001d14:	3728      	adds	r7, #40	; 0x28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40004400 	.word	0x40004400
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40020000 	.word	0x40020000

08001d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d2c:	e7fe      	b.n	8001d2c <NMI_Handler+0x4>

08001d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d32:	e7fe      	b.n	8001d32 <HardFault_Handler+0x4>

08001d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d38:	e7fe      	b.n	8001d38 <MemManage_Handler+0x4>

08001d3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d3e:	e7fe      	b.n	8001d3e <BusFault_Handler+0x4>

08001d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <UsageFault_Handler+0x4>

08001d46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d74:	f000 f8d0 	bl	8001f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d78:	bf00      	nop
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d80:	4802      	ldr	r0, [pc, #8]	; (8001d8c <TIM1_CC_IRQHandler+0x10>)
 8001d82:	f002 f9bf 	bl	8004104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200000e8 	.word	0x200000e8

08001d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d98:	4a14      	ldr	r2, [pc, #80]	; (8001dec <_sbrk+0x5c>)
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <_sbrk+0x60>)
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da4:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <_sbrk+0x64>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d102      	bne.n	8001db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dac:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <_sbrk+0x64>)
 8001dae:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <_sbrk+0x68>)
 8001db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <_sbrk+0x64>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d207      	bcs.n	8001dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc0:	f003 fb64 	bl	800548c <__errno>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	220c      	movs	r2, #12
 8001dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
 8001dce:	e009      	b.n	8001de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <_sbrk+0x64>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dd6:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <_sbrk+0x64>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <_sbrk+0x64>)
 8001de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001de2:	68fb      	ldr	r3, [r7, #12]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20020000 	.word	0x20020000
 8001df0:	00000400 	.word	0x00000400
 8001df4:	200005d4 	.word	0x200005d4
 8001df8:	200005f0 	.word	0x200005f0

08001dfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <SystemInit+0x20>)
 8001e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e06:	4a05      	ldr	r2, [pc, #20]	; (8001e1c <SystemInit+0x20>)
 8001e08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e24:	480d      	ldr	r0, [pc, #52]	; (8001e5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e26:	490e      	ldr	r1, [pc, #56]	; (8001e60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e28:	4a0e      	ldr	r2, [pc, #56]	; (8001e64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e2c:	e002      	b.n	8001e34 <LoopCopyDataInit>

08001e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e32:	3304      	adds	r3, #4

08001e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e38:	d3f9      	bcc.n	8001e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e3a:	4a0b      	ldr	r2, [pc, #44]	; (8001e68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e3c:	4c0b      	ldr	r4, [pc, #44]	; (8001e6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e40:	e001      	b.n	8001e46 <LoopFillZerobss>

08001e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e44:	3204      	adds	r2, #4

08001e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e48:	d3fb      	bcc.n	8001e42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e4a:	f7ff ffd7 	bl	8001dfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e4e:	f003 fb23 	bl	8005498 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e52:	f7ff f89d 	bl	8000f90 <main>
  bx  lr    
 8001e56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e60:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001e64:	08006bb8 	.word	0x08006bb8
  ldr r2, =_sbss
 8001e68:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001e6c:	200005ec 	.word	0x200005ec

08001e70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e70:	e7fe      	b.n	8001e70 <ADC_IRQHandler>
	...

08001e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e78:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <HAL_Init+0x40>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a0d      	ldr	r2, [pc, #52]	; (8001eb4 <HAL_Init+0x40>)
 8001e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_Init+0x40>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <HAL_Init+0x40>)
 8001e8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <HAL_Init+0x40>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a07      	ldr	r2, [pc, #28]	; (8001eb4 <HAL_Init+0x40>)
 8001e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e9c:	2003      	movs	r0, #3
 8001e9e:	f000 f94f 	bl	8002140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f000 f808 	bl	8001eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea8:	f7ff fdda 	bl	8001a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40023c00 	.word	0x40023c00

08001eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ec0:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_InitTick+0x54>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_InitTick+0x58>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 f967 	bl	80021aa <HAL_SYSTICK_Config>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e00e      	b.n	8001f04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b0f      	cmp	r3, #15
 8001eea:	d80a      	bhi.n	8001f02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eec:	2200      	movs	r2, #0
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef4:	f000 f92f 	bl	8002156 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef8:	4a06      	ldr	r2, [pc, #24]	; (8001f14 <HAL_InitTick+0x5c>)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
 8001f00:	e000      	b.n	8001f04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20000008 	.word	0x20000008
 8001f10:	20000010 	.word	0x20000010
 8001f14:	2000000c 	.word	0x2000000c

08001f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_IncTick+0x20>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_IncTick+0x24>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4413      	add	r3, r2
 8001f28:	4a04      	ldr	r2, [pc, #16]	; (8001f3c <HAL_IncTick+0x24>)
 8001f2a:	6013      	str	r3, [r2, #0]
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20000010 	.word	0x20000010
 8001f3c:	200005d8 	.word	0x200005d8

08001f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return uwTick;
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <HAL_GetTick+0x14>)
 8001f46:	681b      	ldr	r3, [r3, #0]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	200005d8 	.word	0x200005d8

08001f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f60:	f7ff ffee 	bl	8001f40 <HAL_GetTick>
 8001f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f70:	d005      	beq.n	8001f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f72:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <HAL_Delay+0x44>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f7e:	bf00      	nop
 8001f80:	f7ff ffde 	bl	8001f40 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d8f7      	bhi.n	8001f80 <HAL_Delay+0x28>
  {
  }
}
 8001f90:	bf00      	nop
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000010 	.word	0x20000010

08001fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd2:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	60d3      	str	r3, [r2, #12]
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fec:	4b04      	ldr	r3, [pc, #16]	; (8002000 <__NVIC_GetPriorityGrouping+0x18>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	0a1b      	lsrs	r3, r3, #8
 8001ff2:	f003 0307 	and.w	r3, r3, #7
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	2b00      	cmp	r3, #0
 8002014:	db0b      	blt.n	800202e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	f003 021f 	and.w	r2, r3, #31
 800201c:	4907      	ldr	r1, [pc, #28]	; (800203c <__NVIC_EnableIRQ+0x38>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	095b      	lsrs	r3, r3, #5
 8002024:	2001      	movs	r0, #1
 8002026:	fa00 f202 	lsl.w	r2, r0, r2
 800202a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000e100 	.word	0xe000e100

08002040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	6039      	str	r1, [r7, #0]
 800204a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002050:	2b00      	cmp	r3, #0
 8002052:	db0a      	blt.n	800206a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	b2da      	uxtb	r2, r3
 8002058:	490c      	ldr	r1, [pc, #48]	; (800208c <__NVIC_SetPriority+0x4c>)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	0112      	lsls	r2, r2, #4
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	440b      	add	r3, r1
 8002064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002068:	e00a      	b.n	8002080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4908      	ldr	r1, [pc, #32]	; (8002090 <__NVIC_SetPriority+0x50>)
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	3b04      	subs	r3, #4
 8002078:	0112      	lsls	r2, r2, #4
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	440b      	add	r3, r1
 800207e:	761a      	strb	r2, [r3, #24]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000e100 	.word	0xe000e100
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002094:	b480      	push	{r7}
 8002096:	b089      	sub	sp, #36	; 0x24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f1c3 0307 	rsb	r3, r3, #7
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	bf28      	it	cs
 80020b2:	2304      	movcs	r3, #4
 80020b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3304      	adds	r3, #4
 80020ba:	2b06      	cmp	r3, #6
 80020bc:	d902      	bls.n	80020c4 <NVIC_EncodePriority+0x30>
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3b03      	subs	r3, #3
 80020c2:	e000      	b.n	80020c6 <NVIC_EncodePriority+0x32>
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	f04f 32ff 	mov.w	r2, #4294967295
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43da      	mvns	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	401a      	ands	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020dc:	f04f 31ff 	mov.w	r1, #4294967295
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	fa01 f303 	lsl.w	r3, r1, r3
 80020e6:	43d9      	mvns	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ec:	4313      	orrs	r3, r2
         );
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3724      	adds	r7, #36	; 0x24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3b01      	subs	r3, #1
 8002108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800210c:	d301      	bcc.n	8002112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800210e:	2301      	movs	r3, #1
 8002110:	e00f      	b.n	8002132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <SysTick_Config+0x40>)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3b01      	subs	r3, #1
 8002118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800211a:	210f      	movs	r1, #15
 800211c:	f04f 30ff 	mov.w	r0, #4294967295
 8002120:	f7ff ff8e 	bl	8002040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002124:	4b05      	ldr	r3, [pc, #20]	; (800213c <SysTick_Config+0x40>)
 8002126:	2200      	movs	r2, #0
 8002128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800212a:	4b04      	ldr	r3, [pc, #16]	; (800213c <SysTick_Config+0x40>)
 800212c:	2207      	movs	r2, #7
 800212e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	e000e010 	.word	0xe000e010

08002140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff ff29 	bl	8001fa0 <__NVIC_SetPriorityGrouping>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002156:	b580      	push	{r7, lr}
 8002158:	b086      	sub	sp, #24
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002168:	f7ff ff3e 	bl	8001fe8 <__NVIC_GetPriorityGrouping>
 800216c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68b9      	ldr	r1, [r7, #8]
 8002172:	6978      	ldr	r0, [r7, #20]
 8002174:	f7ff ff8e 	bl	8002094 <NVIC_EncodePriority>
 8002178:	4602      	mov	r2, r0
 800217a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217e:	4611      	mov	r1, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ff5d 	bl	8002040 <__NVIC_SetPriority>
}
 8002186:	bf00      	nop
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	4603      	mov	r3, r0
 8002196:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ff31 	bl	8002004 <__NVIC_EnableIRQ>
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff ffa2 	bl	80020fc <SysTick_Config>
 80021b8:	4603      	mov	r3, r0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b089      	sub	sp, #36	; 0x24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]
 80021de:	e165      	b.n	80024ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021e0:	2201      	movs	r2, #1
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	4013      	ands	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	f040 8154 	bne.w	80024a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	2b01      	cmp	r3, #1
 8002208:	d005      	beq.n	8002216 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002212:	2b02      	cmp	r3, #2
 8002214:	d130      	bne.n	8002278 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	2203      	movs	r2, #3
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800224c:	2201      	movs	r2, #1
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	091b      	lsrs	r3, r3, #4
 8002262:	f003 0201 	and.w	r2, r3, #1
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	2b03      	cmp	r3, #3
 8002282:	d017      	beq.n	80022b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	2203      	movs	r2, #3
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d123      	bne.n	8002308 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	08da      	lsrs	r2, r3, #3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3208      	adds	r2, #8
 80022c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	220f      	movs	r2, #15
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	08da      	lsrs	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3208      	adds	r2, #8
 8002302:	69b9      	ldr	r1, [r7, #24]
 8002304:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	2203      	movs	r2, #3
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 0203 	and.w	r2, r3, #3
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80ae 	beq.w	80024a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	4b5d      	ldr	r3, [pc, #372]	; (80024c4 <HAL_GPIO_Init+0x300>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	4a5c      	ldr	r2, [pc, #368]	; (80024c4 <HAL_GPIO_Init+0x300>)
 8002354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002358:	6453      	str	r3, [r2, #68]	; 0x44
 800235a:	4b5a      	ldr	r3, [pc, #360]	; (80024c4 <HAL_GPIO_Init+0x300>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002366:	4a58      	ldr	r2, [pc, #352]	; (80024c8 <HAL_GPIO_Init+0x304>)
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	089b      	lsrs	r3, r3, #2
 800236c:	3302      	adds	r3, #2
 800236e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002372:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	220f      	movs	r2, #15
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4013      	ands	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a4f      	ldr	r2, [pc, #316]	; (80024cc <HAL_GPIO_Init+0x308>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d025      	beq.n	80023de <HAL_GPIO_Init+0x21a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a4e      	ldr	r2, [pc, #312]	; (80024d0 <HAL_GPIO_Init+0x30c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d01f      	beq.n	80023da <HAL_GPIO_Init+0x216>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a4d      	ldr	r2, [pc, #308]	; (80024d4 <HAL_GPIO_Init+0x310>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d019      	beq.n	80023d6 <HAL_GPIO_Init+0x212>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a4c      	ldr	r2, [pc, #304]	; (80024d8 <HAL_GPIO_Init+0x314>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d013      	beq.n	80023d2 <HAL_GPIO_Init+0x20e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a4b      	ldr	r2, [pc, #300]	; (80024dc <HAL_GPIO_Init+0x318>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d00d      	beq.n	80023ce <HAL_GPIO_Init+0x20a>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a4a      	ldr	r2, [pc, #296]	; (80024e0 <HAL_GPIO_Init+0x31c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d007      	beq.n	80023ca <HAL_GPIO_Init+0x206>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a49      	ldr	r2, [pc, #292]	; (80024e4 <HAL_GPIO_Init+0x320>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d101      	bne.n	80023c6 <HAL_GPIO_Init+0x202>
 80023c2:	2306      	movs	r3, #6
 80023c4:	e00c      	b.n	80023e0 <HAL_GPIO_Init+0x21c>
 80023c6:	2307      	movs	r3, #7
 80023c8:	e00a      	b.n	80023e0 <HAL_GPIO_Init+0x21c>
 80023ca:	2305      	movs	r3, #5
 80023cc:	e008      	b.n	80023e0 <HAL_GPIO_Init+0x21c>
 80023ce:	2304      	movs	r3, #4
 80023d0:	e006      	b.n	80023e0 <HAL_GPIO_Init+0x21c>
 80023d2:	2303      	movs	r3, #3
 80023d4:	e004      	b.n	80023e0 <HAL_GPIO_Init+0x21c>
 80023d6:	2302      	movs	r3, #2
 80023d8:	e002      	b.n	80023e0 <HAL_GPIO_Init+0x21c>
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <HAL_GPIO_Init+0x21c>
 80023de:	2300      	movs	r3, #0
 80023e0:	69fa      	ldr	r2, [r7, #28]
 80023e2:	f002 0203 	and.w	r2, r2, #3
 80023e6:	0092      	lsls	r2, r2, #2
 80023e8:	4093      	lsls	r3, r2
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023f0:	4935      	ldr	r1, [pc, #212]	; (80024c8 <HAL_GPIO_Init+0x304>)
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	089b      	lsrs	r3, r3, #2
 80023f6:	3302      	adds	r3, #2
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023fe:	4b3a      	ldr	r3, [pc, #232]	; (80024e8 <HAL_GPIO_Init+0x324>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002422:	4a31      	ldr	r2, [pc, #196]	; (80024e8 <HAL_GPIO_Init+0x324>)
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002428:	4b2f      	ldr	r3, [pc, #188]	; (80024e8 <HAL_GPIO_Init+0x324>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800244c:	4a26      	ldr	r2, [pc, #152]	; (80024e8 <HAL_GPIO_Init+0x324>)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002452:	4b25      	ldr	r3, [pc, #148]	; (80024e8 <HAL_GPIO_Init+0x324>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002476:	4a1c      	ldr	r2, [pc, #112]	; (80024e8 <HAL_GPIO_Init+0x324>)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800247c:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <HAL_GPIO_Init+0x324>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024a0:	4a11      	ldr	r2, [pc, #68]	; (80024e8 <HAL_GPIO_Init+0x324>)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3301      	adds	r3, #1
 80024aa:	61fb      	str	r3, [r7, #28]
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	2b0f      	cmp	r3, #15
 80024b0:	f67f ae96 	bls.w	80021e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024b4:	bf00      	nop
 80024b6:	bf00      	nop
 80024b8:	3724      	adds	r7, #36	; 0x24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40013800 	.word	0x40013800
 80024cc:	40020000 	.word	0x40020000
 80024d0:	40020400 	.word	0x40020400
 80024d4:	40020800 	.word	0x40020800
 80024d8:	40020c00 	.word	0x40020c00
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40021400 	.word	0x40021400
 80024e4:	40021800 	.word	0x40021800
 80024e8:	40013c00 	.word	0x40013c00

080024ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	807b      	strh	r3, [r7, #2]
 80024f8:	4613      	mov	r3, r2
 80024fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024fc:	787b      	ldrb	r3, [r7, #1]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002502:	887a      	ldrh	r2, [r7, #2]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002508:	e003      	b.n	8002512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800250a:	887b      	ldrh	r3, [r7, #2]
 800250c:	041a      	lsls	r2, r3, #16
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	619a      	str	r2, [r3, #24]
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e12b      	b.n	800278a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d106      	bne.n	800254c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff fab2 	bl	8001ab0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2224      	movs	r2, #36	; 0x24
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0201 	bic.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002572:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002582:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002584:	f000 fe38 	bl	80031f8 <HAL_RCC_GetPCLK1Freq>
 8002588:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	4a81      	ldr	r2, [pc, #516]	; (8002794 <HAL_I2C_Init+0x274>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d807      	bhi.n	80025a4 <HAL_I2C_Init+0x84>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4a80      	ldr	r2, [pc, #512]	; (8002798 <HAL_I2C_Init+0x278>)
 8002598:	4293      	cmp	r3, r2
 800259a:	bf94      	ite	ls
 800259c:	2301      	movls	r3, #1
 800259e:	2300      	movhi	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	e006      	b.n	80025b2 <HAL_I2C_Init+0x92>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4a7d      	ldr	r2, [pc, #500]	; (800279c <HAL_I2C_Init+0x27c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	bf94      	ite	ls
 80025ac:	2301      	movls	r3, #1
 80025ae:	2300      	movhi	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e0e7      	b.n	800278a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4a78      	ldr	r2, [pc, #480]	; (80027a0 <HAL_I2C_Init+0x280>)
 80025be:	fba2 2303 	umull	r2, r3, r2, r3
 80025c2:	0c9b      	lsrs	r3, r3, #18
 80025c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	4a6a      	ldr	r2, [pc, #424]	; (8002794 <HAL_I2C_Init+0x274>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d802      	bhi.n	80025f4 <HAL_I2C_Init+0xd4>
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	3301      	adds	r3, #1
 80025f2:	e009      	b.n	8002608 <HAL_I2C_Init+0xe8>
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025fa:	fb02 f303 	mul.w	r3, r2, r3
 80025fe:	4a69      	ldr	r2, [pc, #420]	; (80027a4 <HAL_I2C_Init+0x284>)
 8002600:	fba2 2303 	umull	r2, r3, r2, r3
 8002604:	099b      	lsrs	r3, r3, #6
 8002606:	3301      	adds	r3, #1
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	430b      	orrs	r3, r1
 800260e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800261a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	495c      	ldr	r1, [pc, #368]	; (8002794 <HAL_I2C_Init+0x274>)
 8002624:	428b      	cmp	r3, r1
 8002626:	d819      	bhi.n	800265c <HAL_I2C_Init+0x13c>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	1e59      	subs	r1, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	fbb1 f3f3 	udiv	r3, r1, r3
 8002636:	1c59      	adds	r1, r3, #1
 8002638:	f640 73fc 	movw	r3, #4092	; 0xffc
 800263c:	400b      	ands	r3, r1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <HAL_I2C_Init+0x138>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1e59      	subs	r1, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002650:	3301      	adds	r3, #1
 8002652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002656:	e051      	b.n	80026fc <HAL_I2C_Init+0x1dc>
 8002658:	2304      	movs	r3, #4
 800265a:	e04f      	b.n	80026fc <HAL_I2C_Init+0x1dc>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d111      	bne.n	8002688 <HAL_I2C_Init+0x168>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	1e58      	subs	r0, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6859      	ldr	r1, [r3, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	440b      	add	r3, r1
 8002672:	fbb0 f3f3 	udiv	r3, r0, r3
 8002676:	3301      	adds	r3, #1
 8002678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800267c:	2b00      	cmp	r3, #0
 800267e:	bf0c      	ite	eq
 8002680:	2301      	moveq	r3, #1
 8002682:	2300      	movne	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	e012      	b.n	80026ae <HAL_I2C_Init+0x18e>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1e58      	subs	r0, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6859      	ldr	r1, [r3, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	0099      	lsls	r1, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	fbb0 f3f3 	udiv	r3, r0, r3
 800269e:	3301      	adds	r3, #1
 80026a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	bf0c      	ite	eq
 80026a8:	2301      	moveq	r3, #1
 80026aa:	2300      	movne	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_I2C_Init+0x196>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e022      	b.n	80026fc <HAL_I2C_Init+0x1dc>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10e      	bne.n	80026dc <HAL_I2C_Init+0x1bc>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	1e58      	subs	r0, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6859      	ldr	r1, [r3, #4]
 80026c6:	460b      	mov	r3, r1
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	440b      	add	r3, r1
 80026cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80026d0:	3301      	adds	r3, #1
 80026d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026da:	e00f      	b.n	80026fc <HAL_I2C_Init+0x1dc>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1e58      	subs	r0, r3, #1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6859      	ldr	r1, [r3, #4]
 80026e4:	460b      	mov	r3, r1
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	0099      	lsls	r1, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80026f2:	3301      	adds	r3, #1
 80026f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	6809      	ldr	r1, [r1, #0]
 8002700:	4313      	orrs	r3, r2
 8002702:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69da      	ldr	r2, [r3, #28]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800272a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6911      	ldr	r1, [r2, #16]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	68d2      	ldr	r2, [r2, #12]
 8002736:	4311      	orrs	r1, r2
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	430b      	orrs	r3, r1
 800273e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695a      	ldr	r2, [r3, #20]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0201 	orr.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2220      	movs	r2, #32
 8002776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	000186a0 	.word	0x000186a0
 8002798:	001e847f 	.word	0x001e847f
 800279c:	003d08ff 	.word	0x003d08ff
 80027a0:	431bde83 	.word	0x431bde83
 80027a4:	10624dd3 	.word	0x10624dd3

080027a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af02      	add	r7, sp, #8
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	607a      	str	r2, [r7, #4]
 80027b2:	461a      	mov	r2, r3
 80027b4:	460b      	mov	r3, r1
 80027b6:	817b      	strh	r3, [r7, #10]
 80027b8:	4613      	mov	r3, r2
 80027ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027bc:	f7ff fbc0 	bl	8001f40 <HAL_GetTick>
 80027c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b20      	cmp	r3, #32
 80027cc:	f040 80e0 	bne.w	8002990 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	2319      	movs	r3, #25
 80027d6:	2201      	movs	r2, #1
 80027d8:	4970      	ldr	r1, [pc, #448]	; (800299c <HAL_I2C_Master_Transmit+0x1f4>)
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 fa92 	bl	8002d04 <I2C_WaitOnFlagUntilTimeout>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027e6:	2302      	movs	r3, #2
 80027e8:	e0d3      	b.n	8002992 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_I2C_Master_Transmit+0x50>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e0cc      	b.n	8002992 <HAL_I2C_Master_Transmit+0x1ea>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b01      	cmp	r3, #1
 800280c:	d007      	beq.n	800281e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f042 0201 	orr.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800282c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2221      	movs	r2, #33	; 0x21
 8002832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2210      	movs	r2, #16
 800283a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	893a      	ldrh	r2, [r7, #8]
 800284e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4a50      	ldr	r2, [pc, #320]	; (80029a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800285e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002860:	8979      	ldrh	r1, [r7, #10]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	6a3a      	ldr	r2, [r7, #32]
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 f9ca 	bl	8002c00 <I2C_MasterRequestWrite>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e08d      	b.n	8002992 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800288c:	e066      	b.n	800295c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	6a39      	ldr	r1, [r7, #32]
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 fb0c 	bl	8002eb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00d      	beq.n	80028ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d107      	bne.n	80028b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e06b      	b.n	8002992 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	781a      	ldrb	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d11b      	bne.n	8002930 <HAL_I2C_Master_Transmit+0x188>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d017      	beq.n	8002930 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	781a      	ldrb	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	1c5a      	adds	r2, r3, #1
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291a:	b29b      	uxth	r3, r3
 800291c:	3b01      	subs	r3, #1
 800291e:	b29a      	uxth	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002928:	3b01      	subs	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	6a39      	ldr	r1, [r7, #32]
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 fafc 	bl	8002f32 <I2C_WaitOnBTFFlagUntilTimeout>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00d      	beq.n	800295c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	2b04      	cmp	r3, #4
 8002946:	d107      	bne.n	8002958 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002956:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e01a      	b.n	8002992 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002960:	2b00      	cmp	r3, #0
 8002962:	d194      	bne.n	800288e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002972:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	e000      	b.n	8002992 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002990:	2302      	movs	r3, #2
  }
}
 8002992:	4618      	mov	r0, r3
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	00100002 	.word	0x00100002
 80029a0:	ffff0000 	.word	0xffff0000

080029a4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08a      	sub	sp, #40	; 0x28
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	460b      	mov	r3, r1
 80029b2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80029b4:	f7ff fac4 	bl	8001f40 <HAL_GetTick>
 80029b8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b20      	cmp	r3, #32
 80029c8:	f040 8111 	bne.w	8002bee <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	2319      	movs	r3, #25
 80029d2:	2201      	movs	r2, #1
 80029d4:	4988      	ldr	r1, [pc, #544]	; (8002bf8 <HAL_I2C_IsDeviceReady+0x254>)
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 f994 	bl	8002d04 <I2C_WaitOnFlagUntilTimeout>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80029e2:	2302      	movs	r3, #2
 80029e4:	e104      	b.n	8002bf0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_I2C_IsDeviceReady+0x50>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e0fd      	b.n	8002bf0 <HAL_I2C_IsDeviceReady+0x24c>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d007      	beq.n	8002a1a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f042 0201 	orr.w	r2, r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2224      	movs	r2, #36	; 0x24
 8002a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4a70      	ldr	r2, [pc, #448]	; (8002bfc <HAL_I2C_IsDeviceReady+0x258>)
 8002a3c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a4c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 f952 	bl	8002d04 <I2C_WaitOnFlagUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00d      	beq.n	8002a82 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a74:	d103      	bne.n	8002a7e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a7c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e0b6      	b.n	8002bf0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a82:	897b      	ldrh	r3, [r7, #10]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	461a      	mov	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a90:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002a92:	f7ff fa55 	bl	8001f40 <HAL_GetTick>
 8002a96:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	bf0c      	ite	eq
 8002aa6:	2301      	moveq	r3, #1
 8002aa8:	2300      	movne	r3, #0
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002abc:	bf0c      	ite	eq
 8002abe:	2301      	moveq	r3, #1
 8002ac0:	2300      	movne	r3, #0
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ac6:	e025      	b.n	8002b14 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ac8:	f7ff fa3a 	bl	8001f40 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d302      	bcc.n	8002ade <HAL_I2C_IsDeviceReady+0x13a>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d103      	bne.n	8002ae6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	22a0      	movs	r2, #160	; 0xa0
 8002ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	bf0c      	ite	eq
 8002af4:	2301      	moveq	r3, #1
 8002af6:	2300      	movne	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b0a:	bf0c      	ite	eq
 8002b0c:	2301      	moveq	r3, #1
 8002b0e:	2300      	movne	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2ba0      	cmp	r3, #160	; 0xa0
 8002b1e:	d005      	beq.n	8002b2c <HAL_I2C_IsDeviceReady+0x188>
 8002b20:	7dfb      	ldrb	r3, [r7, #23]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d102      	bne.n	8002b2c <HAL_I2C_IsDeviceReady+0x188>
 8002b26:	7dbb      	ldrb	r3, [r7, #22]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0cd      	beq.n	8002ac8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d129      	bne.n	8002b96 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b50:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b52:	2300      	movs	r3, #0
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	2319      	movs	r3, #25
 8002b6e:	2201      	movs	r2, #1
 8002b70:	4921      	ldr	r1, [pc, #132]	; (8002bf8 <HAL_I2C_IsDeviceReady+0x254>)
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 f8c6 	bl	8002d04 <I2C_WaitOnFlagUntilTimeout>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e036      	b.n	8002bf0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2220      	movs	r2, #32
 8002b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	e02c      	b.n	8002bf0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bae:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	2319      	movs	r3, #25
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	490f      	ldr	r1, [pc, #60]	; (8002bf8 <HAL_I2C_IsDeviceReady+0x254>)
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 f8a2 	bl	8002d04 <I2C_WaitOnFlagUntilTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e012      	b.n	8002bf0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	f4ff af32 	bcc.w	8002a3e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002bee:	2302      	movs	r3, #2
  }
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3720      	adds	r7, #32
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	00100002 	.word	0x00100002
 8002bfc:	ffff0000 	.word	0xffff0000

08002c00 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	607a      	str	r2, [r7, #4]
 8002c0a:	603b      	str	r3, [r7, #0]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d006      	beq.n	8002c2a <I2C_MasterRequestWrite+0x2a>
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d003      	beq.n	8002c2a <I2C_MasterRequestWrite+0x2a>
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c28:	d108      	bne.n	8002c3c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	e00b      	b.n	8002c54 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	2b12      	cmp	r3, #18
 8002c42:	d107      	bne.n	8002c54 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 f84f 	bl	8002d04 <I2C_WaitOnFlagUntilTimeout>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00d      	beq.n	8002c88 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c7a:	d103      	bne.n	8002c84 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e035      	b.n	8002cf4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c90:	d108      	bne.n	8002ca4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c92:	897b      	ldrh	r3, [r7, #10]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ca0:	611a      	str	r2, [r3, #16]
 8002ca2:	e01b      	b.n	8002cdc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ca4:	897b      	ldrh	r3, [r7, #10]
 8002ca6:	11db      	asrs	r3, r3, #7
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	f003 0306 	and.w	r3, r3, #6
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	f063 030f 	orn	r3, r3, #15
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	490e      	ldr	r1, [pc, #56]	; (8002cfc <I2C_MasterRequestWrite+0xfc>)
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 f875 	bl	8002db2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e010      	b.n	8002cf4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002cd2:	897b      	ldrh	r3, [r7, #10]
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	4907      	ldr	r1, [pc, #28]	; (8002d00 <I2C_MasterRequestWrite+0x100>)
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f865 	bl	8002db2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	00010008 	.word	0x00010008
 8002d00:	00010002 	.word	0x00010002

08002d04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	603b      	str	r3, [r7, #0]
 8002d10:	4613      	mov	r3, r2
 8002d12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d14:	e025      	b.n	8002d62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1c:	d021      	beq.n	8002d62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d1e:	f7ff f90f 	bl	8001f40 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d302      	bcc.n	8002d34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d116      	bne.n	8002d62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	f043 0220 	orr.w	r2, r3, #32
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e023      	b.n	8002daa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	0c1b      	lsrs	r3, r3, #16
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d10d      	bne.n	8002d88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	43da      	mvns	r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	4013      	ands	r3, r2
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	bf0c      	ite	eq
 8002d7e:	2301      	moveq	r3, #1
 8002d80:	2300      	movne	r3, #0
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	e00c      	b.n	8002da2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	43da      	mvns	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4013      	ands	r3, r2
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	bf0c      	ite	eq
 8002d9a:	2301      	moveq	r3, #1
 8002d9c:	2300      	movne	r3, #0
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	461a      	mov	r2, r3
 8002da2:	79fb      	ldrb	r3, [r7, #7]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d0b6      	beq.n	8002d16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dc0:	e051      	b.n	8002e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dd0:	d123      	bne.n	8002e1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2220      	movs	r2, #32
 8002df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	f043 0204 	orr.w	r2, r3, #4
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e046      	b.n	8002ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e20:	d021      	beq.n	8002e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e22:	f7ff f88d 	bl	8001f40 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d302      	bcc.n	8002e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d116      	bne.n	8002e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f043 0220 	orr.w	r2, r3, #32
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e020      	b.n	8002ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	0c1b      	lsrs	r3, r3, #16
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d10c      	bne.n	8002e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	43da      	mvns	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	bf14      	ite	ne
 8002e82:	2301      	movne	r3, #1
 8002e84:	2300      	moveq	r3, #0
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	e00b      	b.n	8002ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	43da      	mvns	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	4013      	ands	r3, r2
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	bf14      	ite	ne
 8002e9c:	2301      	movne	r3, #1
 8002e9e:	2300      	moveq	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d18d      	bne.n	8002dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ebc:	e02d      	b.n	8002f1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 f878 	bl	8002fb4 <I2C_IsAcknowledgeFailed>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e02d      	b.n	8002f2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed4:	d021      	beq.n	8002f1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed6:	f7ff f833 	bl	8001f40 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d302      	bcc.n	8002eec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d116      	bne.n	8002f1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f043 0220 	orr.w	r2, r3, #32
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e007      	b.n	8002f2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f24:	2b80      	cmp	r3, #128	; 0x80
 8002f26:	d1ca      	bne.n	8002ebe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b084      	sub	sp, #16
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f3e:	e02d      	b.n	8002f9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 f837 	bl	8002fb4 <I2C_IsAcknowledgeFailed>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e02d      	b.n	8002fac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f56:	d021      	beq.n	8002f9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f58:	f7fe fff2 	bl	8001f40 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d302      	bcc.n	8002f6e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d116      	bne.n	8002f9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	f043 0220 	orr.w	r2, r3, #32
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e007      	b.n	8002fac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d1ca      	bne.n	8002f40 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fca:	d11b      	bne.n	8003004 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fd4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	f043 0204 	orr.w	r2, r3, #4
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e000      	b.n	8003006 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
	...

08003014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e0cc      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003028:	4b68      	ldr	r3, [pc, #416]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d90c      	bls.n	8003050 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003036:	4b65      	ldr	r3, [pc, #404]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800303e:	4b63      	ldr	r3, [pc, #396]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d001      	beq.n	8003050 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0b8      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d020      	beq.n	800309e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003068:	4b59      	ldr	r3, [pc, #356]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	4a58      	ldr	r2, [pc, #352]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003072:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003080:	4b53      	ldr	r3, [pc, #332]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	4a52      	ldr	r2, [pc, #328]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800308a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800308c:	4b50      	ldr	r3, [pc, #320]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	494d      	ldr	r1, [pc, #308]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	4313      	orrs	r3, r2
 800309c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d044      	beq.n	8003134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d107      	bne.n	80030c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b2:	4b47      	ldr	r3, [pc, #284]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d119      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e07f      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d003      	beq.n	80030d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d107      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d2:	4b3f      	ldr	r3, [pc, #252]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d109      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e06f      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e2:	4b3b      	ldr	r3, [pc, #236]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e067      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030f2:	4b37      	ldr	r3, [pc, #220]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f023 0203 	bic.w	r2, r3, #3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4934      	ldr	r1, [pc, #208]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003100:	4313      	orrs	r3, r2
 8003102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003104:	f7fe ff1c 	bl	8001f40 <HAL_GetTick>
 8003108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310a:	e00a      	b.n	8003122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800310c:	f7fe ff18 	bl	8001f40 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	f241 3288 	movw	r2, #5000	; 0x1388
 800311a:	4293      	cmp	r3, r2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e04f      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003122:	4b2b      	ldr	r3, [pc, #172]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 020c 	and.w	r2, r3, #12
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	429a      	cmp	r2, r3
 8003132:	d1eb      	bne.n	800310c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003134:	4b25      	ldr	r3, [pc, #148]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 030f 	and.w	r3, r3, #15
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d20c      	bcs.n	800315c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003142:	4b22      	ldr	r3, [pc, #136]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800314a:	4b20      	ldr	r3, [pc, #128]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d001      	beq.n	800315c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e032      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d008      	beq.n	800317a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003168:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	4916      	ldr	r1, [pc, #88]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	4313      	orrs	r3, r2
 8003178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d009      	beq.n	800319a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003186:	4b12      	ldr	r3, [pc, #72]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	490e      	ldr	r1, [pc, #56]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	4313      	orrs	r3, r2
 8003198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800319a:	f000 f855 	bl	8003248 <HAL_RCC_GetSysClockFreq>
 800319e:	4602      	mov	r2, r0
 80031a0:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	091b      	lsrs	r3, r3, #4
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	490a      	ldr	r1, [pc, #40]	; (80031d4 <HAL_RCC_ClockConfig+0x1c0>)
 80031ac:	5ccb      	ldrb	r3, [r1, r3]
 80031ae:	fa22 f303 	lsr.w	r3, r2, r3
 80031b2:	4a09      	ldr	r2, [pc, #36]	; (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031b6:	4b09      	ldr	r3, [pc, #36]	; (80031dc <HAL_RCC_ClockConfig+0x1c8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fe fe7c 	bl	8001eb8 <HAL_InitTick>

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40023c00 	.word	0x40023c00
 80031d0:	40023800 	.word	0x40023800
 80031d4:	08006b5c 	.word	0x08006b5c
 80031d8:	20000008 	.word	0x20000008
 80031dc:	2000000c 	.word	0x2000000c

080031e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e4:	4b03      	ldr	r3, [pc, #12]	; (80031f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031e6:	681b      	ldr	r3, [r3, #0]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	20000008 	.word	0x20000008

080031f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031fc:	f7ff fff0 	bl	80031e0 <HAL_RCC_GetHCLKFreq>
 8003200:	4602      	mov	r2, r0
 8003202:	4b05      	ldr	r3, [pc, #20]	; (8003218 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	0a9b      	lsrs	r3, r3, #10
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	4903      	ldr	r1, [pc, #12]	; (800321c <HAL_RCC_GetPCLK1Freq+0x24>)
 800320e:	5ccb      	ldrb	r3, [r1, r3]
 8003210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003214:	4618      	mov	r0, r3
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40023800 	.word	0x40023800
 800321c:	08006b6c 	.word	0x08006b6c

08003220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003224:	f7ff ffdc 	bl	80031e0 <HAL_RCC_GetHCLKFreq>
 8003228:	4602      	mov	r2, r0
 800322a:	4b05      	ldr	r3, [pc, #20]	; (8003240 <HAL_RCC_GetPCLK2Freq+0x20>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	0b5b      	lsrs	r3, r3, #13
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	4903      	ldr	r1, [pc, #12]	; (8003244 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003236:	5ccb      	ldrb	r3, [r1, r3]
 8003238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800323c:	4618      	mov	r0, r3
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40023800 	.word	0x40023800
 8003244:	08006b6c 	.word	0x08006b6c

08003248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800324c:	b0ae      	sub	sp, #184	; 0xb8
 800324e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800326e:	4bcb      	ldr	r3, [pc, #812]	; (800359c <HAL_RCC_GetSysClockFreq+0x354>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 030c 	and.w	r3, r3, #12
 8003276:	2b0c      	cmp	r3, #12
 8003278:	f200 8206 	bhi.w	8003688 <HAL_RCC_GetSysClockFreq+0x440>
 800327c:	a201      	add	r2, pc, #4	; (adr r2, 8003284 <HAL_RCC_GetSysClockFreq+0x3c>)
 800327e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003282:	bf00      	nop
 8003284:	080032b9 	.word	0x080032b9
 8003288:	08003689 	.word	0x08003689
 800328c:	08003689 	.word	0x08003689
 8003290:	08003689 	.word	0x08003689
 8003294:	080032c1 	.word	0x080032c1
 8003298:	08003689 	.word	0x08003689
 800329c:	08003689 	.word	0x08003689
 80032a0:	08003689 	.word	0x08003689
 80032a4:	080032c9 	.word	0x080032c9
 80032a8:	08003689 	.word	0x08003689
 80032ac:	08003689 	.word	0x08003689
 80032b0:	08003689 	.word	0x08003689
 80032b4:	080034b9 	.word	0x080034b9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032b8:	4bb9      	ldr	r3, [pc, #740]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80032ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80032be:	e1e7      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032c0:	4bb8      	ldr	r3, [pc, #736]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80032c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80032c6:	e1e3      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032c8:	4bb4      	ldr	r3, [pc, #720]	; (800359c <HAL_RCC_GetSysClockFreq+0x354>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032d4:	4bb1      	ldr	r3, [pc, #708]	; (800359c <HAL_RCC_GetSysClockFreq+0x354>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d071      	beq.n	80033c4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032e0:	4bae      	ldr	r3, [pc, #696]	; (800359c <HAL_RCC_GetSysClockFreq+0x354>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	099b      	lsrs	r3, r3, #6
 80032e6:	2200      	movs	r2, #0
 80032e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80032ec:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80032f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032fc:	2300      	movs	r3, #0
 80032fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003302:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003306:	4622      	mov	r2, r4
 8003308:	462b      	mov	r3, r5
 800330a:	f04f 0000 	mov.w	r0, #0
 800330e:	f04f 0100 	mov.w	r1, #0
 8003312:	0159      	lsls	r1, r3, #5
 8003314:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003318:	0150      	lsls	r0, r2, #5
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	4621      	mov	r1, r4
 8003320:	1a51      	subs	r1, r2, r1
 8003322:	6439      	str	r1, [r7, #64]	; 0x40
 8003324:	4629      	mov	r1, r5
 8003326:	eb63 0301 	sbc.w	r3, r3, r1
 800332a:	647b      	str	r3, [r7, #68]	; 0x44
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003338:	4649      	mov	r1, r9
 800333a:	018b      	lsls	r3, r1, #6
 800333c:	4641      	mov	r1, r8
 800333e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003342:	4641      	mov	r1, r8
 8003344:	018a      	lsls	r2, r1, #6
 8003346:	4641      	mov	r1, r8
 8003348:	1a51      	subs	r1, r2, r1
 800334a:	63b9      	str	r1, [r7, #56]	; 0x38
 800334c:	4649      	mov	r1, r9
 800334e:	eb63 0301 	sbc.w	r3, r3, r1
 8003352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003360:	4649      	mov	r1, r9
 8003362:	00cb      	lsls	r3, r1, #3
 8003364:	4641      	mov	r1, r8
 8003366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800336a:	4641      	mov	r1, r8
 800336c:	00ca      	lsls	r2, r1, #3
 800336e:	4610      	mov	r0, r2
 8003370:	4619      	mov	r1, r3
 8003372:	4603      	mov	r3, r0
 8003374:	4622      	mov	r2, r4
 8003376:	189b      	adds	r3, r3, r2
 8003378:	633b      	str	r3, [r7, #48]	; 0x30
 800337a:	462b      	mov	r3, r5
 800337c:	460a      	mov	r2, r1
 800337e:	eb42 0303 	adc.w	r3, r2, r3
 8003382:	637b      	str	r3, [r7, #52]	; 0x34
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003390:	4629      	mov	r1, r5
 8003392:	024b      	lsls	r3, r1, #9
 8003394:	4621      	mov	r1, r4
 8003396:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800339a:	4621      	mov	r1, r4
 800339c:	024a      	lsls	r2, r1, #9
 800339e:	4610      	mov	r0, r2
 80033a0:	4619      	mov	r1, r3
 80033a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033a6:	2200      	movs	r2, #0
 80033a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80033ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80033b0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80033b4:	f7fd fb6a 	bl	8000a8c <__aeabi_uldivmod>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4613      	mov	r3, r2
 80033be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033c2:	e067      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033c4:	4b75      	ldr	r3, [pc, #468]	; (800359c <HAL_RCC_GetSysClockFreq+0x354>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	099b      	lsrs	r3, r3, #6
 80033ca:	2200      	movs	r2, #0
 80033cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033d0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80033d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80033de:	2300      	movs	r3, #0
 80033e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80033e2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80033e6:	4622      	mov	r2, r4
 80033e8:	462b      	mov	r3, r5
 80033ea:	f04f 0000 	mov.w	r0, #0
 80033ee:	f04f 0100 	mov.w	r1, #0
 80033f2:	0159      	lsls	r1, r3, #5
 80033f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033f8:	0150      	lsls	r0, r2, #5
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	4621      	mov	r1, r4
 8003400:	1a51      	subs	r1, r2, r1
 8003402:	62b9      	str	r1, [r7, #40]	; 0x28
 8003404:	4629      	mov	r1, r5
 8003406:	eb63 0301 	sbc.w	r3, r3, r1
 800340a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003418:	4649      	mov	r1, r9
 800341a:	018b      	lsls	r3, r1, #6
 800341c:	4641      	mov	r1, r8
 800341e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003422:	4641      	mov	r1, r8
 8003424:	018a      	lsls	r2, r1, #6
 8003426:	4641      	mov	r1, r8
 8003428:	ebb2 0a01 	subs.w	sl, r2, r1
 800342c:	4649      	mov	r1, r9
 800342e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003432:	f04f 0200 	mov.w	r2, #0
 8003436:	f04f 0300 	mov.w	r3, #0
 800343a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800343e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003442:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003446:	4692      	mov	sl, r2
 8003448:	469b      	mov	fp, r3
 800344a:	4623      	mov	r3, r4
 800344c:	eb1a 0303 	adds.w	r3, sl, r3
 8003450:	623b      	str	r3, [r7, #32]
 8003452:	462b      	mov	r3, r5
 8003454:	eb4b 0303 	adc.w	r3, fp, r3
 8003458:	627b      	str	r3, [r7, #36]	; 0x24
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	f04f 0300 	mov.w	r3, #0
 8003462:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003466:	4629      	mov	r1, r5
 8003468:	028b      	lsls	r3, r1, #10
 800346a:	4621      	mov	r1, r4
 800346c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003470:	4621      	mov	r1, r4
 8003472:	028a      	lsls	r2, r1, #10
 8003474:	4610      	mov	r0, r2
 8003476:	4619      	mov	r1, r3
 8003478:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800347c:	2200      	movs	r2, #0
 800347e:	673b      	str	r3, [r7, #112]	; 0x70
 8003480:	677a      	str	r2, [r7, #116]	; 0x74
 8003482:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003486:	f7fd fb01 	bl	8000a8c <__aeabi_uldivmod>
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	4613      	mov	r3, r2
 8003490:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003494:	4b41      	ldr	r3, [pc, #260]	; (800359c <HAL_RCC_GetSysClockFreq+0x354>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	0c1b      	lsrs	r3, r3, #16
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	3301      	adds	r3, #1
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80034a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80034b6:	e0eb      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034b8:	4b38      	ldr	r3, [pc, #224]	; (800359c <HAL_RCC_GetSysClockFreq+0x354>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034c4:	4b35      	ldr	r3, [pc, #212]	; (800359c <HAL_RCC_GetSysClockFreq+0x354>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d06b      	beq.n	80035a8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d0:	4b32      	ldr	r3, [pc, #200]	; (800359c <HAL_RCC_GetSysClockFreq+0x354>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	099b      	lsrs	r3, r3, #6
 80034d6:	2200      	movs	r2, #0
 80034d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80034da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e2:	663b      	str	r3, [r7, #96]	; 0x60
 80034e4:	2300      	movs	r3, #0
 80034e6:	667b      	str	r3, [r7, #100]	; 0x64
 80034e8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80034ec:	4622      	mov	r2, r4
 80034ee:	462b      	mov	r3, r5
 80034f0:	f04f 0000 	mov.w	r0, #0
 80034f4:	f04f 0100 	mov.w	r1, #0
 80034f8:	0159      	lsls	r1, r3, #5
 80034fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034fe:	0150      	lsls	r0, r2, #5
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4621      	mov	r1, r4
 8003506:	1a51      	subs	r1, r2, r1
 8003508:	61b9      	str	r1, [r7, #24]
 800350a:	4629      	mov	r1, r5
 800350c:	eb63 0301 	sbc.w	r3, r3, r1
 8003510:	61fb      	str	r3, [r7, #28]
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800351e:	4659      	mov	r1, fp
 8003520:	018b      	lsls	r3, r1, #6
 8003522:	4651      	mov	r1, sl
 8003524:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003528:	4651      	mov	r1, sl
 800352a:	018a      	lsls	r2, r1, #6
 800352c:	4651      	mov	r1, sl
 800352e:	ebb2 0801 	subs.w	r8, r2, r1
 8003532:	4659      	mov	r1, fp
 8003534:	eb63 0901 	sbc.w	r9, r3, r1
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003544:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003548:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800354c:	4690      	mov	r8, r2
 800354e:	4699      	mov	r9, r3
 8003550:	4623      	mov	r3, r4
 8003552:	eb18 0303 	adds.w	r3, r8, r3
 8003556:	613b      	str	r3, [r7, #16]
 8003558:	462b      	mov	r3, r5
 800355a:	eb49 0303 	adc.w	r3, r9, r3
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	f04f 0300 	mov.w	r3, #0
 8003568:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800356c:	4629      	mov	r1, r5
 800356e:	024b      	lsls	r3, r1, #9
 8003570:	4621      	mov	r1, r4
 8003572:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003576:	4621      	mov	r1, r4
 8003578:	024a      	lsls	r2, r1, #9
 800357a:	4610      	mov	r0, r2
 800357c:	4619      	mov	r1, r3
 800357e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003582:	2200      	movs	r2, #0
 8003584:	65bb      	str	r3, [r7, #88]	; 0x58
 8003586:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003588:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800358c:	f7fd fa7e 	bl	8000a8c <__aeabi_uldivmod>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	4613      	mov	r3, r2
 8003596:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800359a:	e065      	b.n	8003668 <HAL_RCC_GetSysClockFreq+0x420>
 800359c:	40023800 	.word	0x40023800
 80035a0:	00f42400 	.word	0x00f42400
 80035a4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035a8:	4b3d      	ldr	r3, [pc, #244]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x458>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	099b      	lsrs	r3, r3, #6
 80035ae:	2200      	movs	r2, #0
 80035b0:	4618      	mov	r0, r3
 80035b2:	4611      	mov	r1, r2
 80035b4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035b8:	653b      	str	r3, [r7, #80]	; 0x50
 80035ba:	2300      	movs	r3, #0
 80035bc:	657b      	str	r3, [r7, #84]	; 0x54
 80035be:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80035c2:	4642      	mov	r2, r8
 80035c4:	464b      	mov	r3, r9
 80035c6:	f04f 0000 	mov.w	r0, #0
 80035ca:	f04f 0100 	mov.w	r1, #0
 80035ce:	0159      	lsls	r1, r3, #5
 80035d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035d4:	0150      	lsls	r0, r2, #5
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	4641      	mov	r1, r8
 80035dc:	1a51      	subs	r1, r2, r1
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	4649      	mov	r1, r9
 80035e2:	eb63 0301 	sbc.w	r3, r3, r1
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80035f4:	4659      	mov	r1, fp
 80035f6:	018b      	lsls	r3, r1, #6
 80035f8:	4651      	mov	r1, sl
 80035fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035fe:	4651      	mov	r1, sl
 8003600:	018a      	lsls	r2, r1, #6
 8003602:	4651      	mov	r1, sl
 8003604:	1a54      	subs	r4, r2, r1
 8003606:	4659      	mov	r1, fp
 8003608:	eb63 0501 	sbc.w	r5, r3, r1
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	00eb      	lsls	r3, r5, #3
 8003616:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800361a:	00e2      	lsls	r2, r4, #3
 800361c:	4614      	mov	r4, r2
 800361e:	461d      	mov	r5, r3
 8003620:	4643      	mov	r3, r8
 8003622:	18e3      	adds	r3, r4, r3
 8003624:	603b      	str	r3, [r7, #0]
 8003626:	464b      	mov	r3, r9
 8003628:	eb45 0303 	adc.w	r3, r5, r3
 800362c:	607b      	str	r3, [r7, #4]
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	e9d7 4500 	ldrd	r4, r5, [r7]
 800363a:	4629      	mov	r1, r5
 800363c:	028b      	lsls	r3, r1, #10
 800363e:	4621      	mov	r1, r4
 8003640:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003644:	4621      	mov	r1, r4
 8003646:	028a      	lsls	r2, r1, #10
 8003648:	4610      	mov	r0, r2
 800364a:	4619      	mov	r1, r3
 800364c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003650:	2200      	movs	r2, #0
 8003652:	64bb      	str	r3, [r7, #72]	; 0x48
 8003654:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003656:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800365a:	f7fd fa17 	bl	8000a8c <__aeabi_uldivmod>
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	4613      	mov	r3, r2
 8003664:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003668:	4b0d      	ldr	r3, [pc, #52]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x458>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	0f1b      	lsrs	r3, r3, #28
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003676:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800367a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800367e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003682:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003686:	e003      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003688:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800368a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800368e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003690:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003694:	4618      	mov	r0, r3
 8003696:	37b8      	adds	r7, #184	; 0xb8
 8003698:	46bd      	mov	sp, r7
 800369a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800369e:	bf00      	nop
 80036a0:	40023800 	.word	0x40023800
 80036a4:	00f42400 	.word	0x00f42400

080036a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e28d      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 8083 	beq.w	80037ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036c8:	4b94      	ldr	r3, [pc, #592]	; (800391c <HAL_RCC_OscConfig+0x274>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 030c 	and.w	r3, r3, #12
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d019      	beq.n	8003708 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036d4:	4b91      	ldr	r3, [pc, #580]	; (800391c <HAL_RCC_OscConfig+0x274>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d106      	bne.n	80036ee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036e0:	4b8e      	ldr	r3, [pc, #568]	; (800391c <HAL_RCC_OscConfig+0x274>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ec:	d00c      	beq.n	8003708 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ee:	4b8b      	ldr	r3, [pc, #556]	; (800391c <HAL_RCC_OscConfig+0x274>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036f6:	2b0c      	cmp	r3, #12
 80036f8:	d112      	bne.n	8003720 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036fa:	4b88      	ldr	r3, [pc, #544]	; (800391c <HAL_RCC_OscConfig+0x274>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003706:	d10b      	bne.n	8003720 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003708:	4b84      	ldr	r3, [pc, #528]	; (800391c <HAL_RCC_OscConfig+0x274>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d05b      	beq.n	80037cc <HAL_RCC_OscConfig+0x124>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d157      	bne.n	80037cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e25a      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003728:	d106      	bne.n	8003738 <HAL_RCC_OscConfig+0x90>
 800372a:	4b7c      	ldr	r3, [pc, #496]	; (800391c <HAL_RCC_OscConfig+0x274>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a7b      	ldr	r2, [pc, #492]	; (800391c <HAL_RCC_OscConfig+0x274>)
 8003730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	e01d      	b.n	8003774 <HAL_RCC_OscConfig+0xcc>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003740:	d10c      	bne.n	800375c <HAL_RCC_OscConfig+0xb4>
 8003742:	4b76      	ldr	r3, [pc, #472]	; (800391c <HAL_RCC_OscConfig+0x274>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a75      	ldr	r2, [pc, #468]	; (800391c <HAL_RCC_OscConfig+0x274>)
 8003748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	4b73      	ldr	r3, [pc, #460]	; (800391c <HAL_RCC_OscConfig+0x274>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a72      	ldr	r2, [pc, #456]	; (800391c <HAL_RCC_OscConfig+0x274>)
 8003754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	e00b      	b.n	8003774 <HAL_RCC_OscConfig+0xcc>
 800375c:	4b6f      	ldr	r3, [pc, #444]	; (800391c <HAL_RCC_OscConfig+0x274>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a6e      	ldr	r2, [pc, #440]	; (800391c <HAL_RCC_OscConfig+0x274>)
 8003762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003766:	6013      	str	r3, [r2, #0]
 8003768:	4b6c      	ldr	r3, [pc, #432]	; (800391c <HAL_RCC_OscConfig+0x274>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a6b      	ldr	r2, [pc, #428]	; (800391c <HAL_RCC_OscConfig+0x274>)
 800376e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d013      	beq.n	80037a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377c:	f7fe fbe0 	bl	8001f40 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003784:	f7fe fbdc 	bl	8001f40 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b64      	cmp	r3, #100	; 0x64
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e21f      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003796:	4b61      	ldr	r3, [pc, #388]	; (800391c <HAL_RCC_OscConfig+0x274>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0xdc>
 80037a2:	e014      	b.n	80037ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a4:	f7fe fbcc 	bl	8001f40 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ac:	f7fe fbc8 	bl	8001f40 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b64      	cmp	r3, #100	; 0x64
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e20b      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037be:	4b57      	ldr	r3, [pc, #348]	; (800391c <HAL_RCC_OscConfig+0x274>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f0      	bne.n	80037ac <HAL_RCC_OscConfig+0x104>
 80037ca:	e000      	b.n	80037ce <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d06f      	beq.n	80038ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037da:	4b50      	ldr	r3, [pc, #320]	; (800391c <HAL_RCC_OscConfig+0x274>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 030c 	and.w	r3, r3, #12
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d017      	beq.n	8003816 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037e6:	4b4d      	ldr	r3, [pc, #308]	; (800391c <HAL_RCC_OscConfig+0x274>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d105      	bne.n	80037fe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037f2:	4b4a      	ldr	r3, [pc, #296]	; (800391c <HAL_RCC_OscConfig+0x274>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00b      	beq.n	8003816 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037fe:	4b47      	ldr	r3, [pc, #284]	; (800391c <HAL_RCC_OscConfig+0x274>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003806:	2b0c      	cmp	r3, #12
 8003808:	d11c      	bne.n	8003844 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800380a:	4b44      	ldr	r3, [pc, #272]	; (800391c <HAL_RCC_OscConfig+0x274>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d116      	bne.n	8003844 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003816:	4b41      	ldr	r3, [pc, #260]	; (800391c <HAL_RCC_OscConfig+0x274>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d005      	beq.n	800382e <HAL_RCC_OscConfig+0x186>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d001      	beq.n	800382e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e1d3      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800382e:	4b3b      	ldr	r3, [pc, #236]	; (800391c <HAL_RCC_OscConfig+0x274>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4937      	ldr	r1, [pc, #220]	; (800391c <HAL_RCC_OscConfig+0x274>)
 800383e:	4313      	orrs	r3, r2
 8003840:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003842:	e03a      	b.n	80038ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d020      	beq.n	800388e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800384c:	4b34      	ldr	r3, [pc, #208]	; (8003920 <HAL_RCC_OscConfig+0x278>)
 800384e:	2201      	movs	r2, #1
 8003850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003852:	f7fe fb75 	bl	8001f40 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800385a:	f7fe fb71 	bl	8001f40 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e1b4      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386c:	4b2b      	ldr	r3, [pc, #172]	; (800391c <HAL_RCC_OscConfig+0x274>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0f0      	beq.n	800385a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003878:	4b28      	ldr	r3, [pc, #160]	; (800391c <HAL_RCC_OscConfig+0x274>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	4925      	ldr	r1, [pc, #148]	; (800391c <HAL_RCC_OscConfig+0x274>)
 8003888:	4313      	orrs	r3, r2
 800388a:	600b      	str	r3, [r1, #0]
 800388c:	e015      	b.n	80038ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800388e:	4b24      	ldr	r3, [pc, #144]	; (8003920 <HAL_RCC_OscConfig+0x278>)
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003894:	f7fe fb54 	bl	8001f40 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800389c:	f7fe fb50 	bl	8001f40 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e193      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ae:	4b1b      	ldr	r3, [pc, #108]	; (800391c <HAL_RCC_OscConfig+0x274>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f0      	bne.n	800389c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d036      	beq.n	8003934 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d016      	beq.n	80038fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ce:	4b15      	ldr	r3, [pc, #84]	; (8003924 <HAL_RCC_OscConfig+0x27c>)
 80038d0:	2201      	movs	r2, #1
 80038d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d4:	f7fe fb34 	bl	8001f40 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038dc:	f7fe fb30 	bl	8001f40 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e173      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ee:	4b0b      	ldr	r3, [pc, #44]	; (800391c <HAL_RCC_OscConfig+0x274>)
 80038f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0f0      	beq.n	80038dc <HAL_RCC_OscConfig+0x234>
 80038fa:	e01b      	b.n	8003934 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038fc:	4b09      	ldr	r3, [pc, #36]	; (8003924 <HAL_RCC_OscConfig+0x27c>)
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003902:	f7fe fb1d 	bl	8001f40 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003908:	e00e      	b.n	8003928 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800390a:	f7fe fb19 	bl	8001f40 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d907      	bls.n	8003928 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e15c      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
 800391c:	40023800 	.word	0x40023800
 8003920:	42470000 	.word	0x42470000
 8003924:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003928:	4b8a      	ldr	r3, [pc, #552]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 800392a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1ea      	bne.n	800390a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 8097 	beq.w	8003a70 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003942:	2300      	movs	r3, #0
 8003944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003946:	4b83      	ldr	r3, [pc, #524]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10f      	bne.n	8003972 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	4b7f      	ldr	r3, [pc, #508]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	4a7e      	ldr	r2, [pc, #504]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 800395c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003960:	6413      	str	r3, [r2, #64]	; 0x40
 8003962:	4b7c      	ldr	r3, [pc, #496]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396a:	60bb      	str	r3, [r7, #8]
 800396c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800396e:	2301      	movs	r3, #1
 8003970:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003972:	4b79      	ldr	r3, [pc, #484]	; (8003b58 <HAL_RCC_OscConfig+0x4b0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397a:	2b00      	cmp	r3, #0
 800397c:	d118      	bne.n	80039b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800397e:	4b76      	ldr	r3, [pc, #472]	; (8003b58 <HAL_RCC_OscConfig+0x4b0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a75      	ldr	r2, [pc, #468]	; (8003b58 <HAL_RCC_OscConfig+0x4b0>)
 8003984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800398a:	f7fe fad9 	bl	8001f40 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003992:	f7fe fad5 	bl	8001f40 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e118      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a4:	4b6c      	ldr	r3, [pc, #432]	; (8003b58 <HAL_RCC_OscConfig+0x4b0>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d106      	bne.n	80039c6 <HAL_RCC_OscConfig+0x31e>
 80039b8:	4b66      	ldr	r3, [pc, #408]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 80039ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039bc:	4a65      	ldr	r2, [pc, #404]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	6713      	str	r3, [r2, #112]	; 0x70
 80039c4:	e01c      	b.n	8003a00 <HAL_RCC_OscConfig+0x358>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	2b05      	cmp	r3, #5
 80039cc:	d10c      	bne.n	80039e8 <HAL_RCC_OscConfig+0x340>
 80039ce:	4b61      	ldr	r3, [pc, #388]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 80039d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d2:	4a60      	ldr	r2, [pc, #384]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 80039d4:	f043 0304 	orr.w	r3, r3, #4
 80039d8:	6713      	str	r3, [r2, #112]	; 0x70
 80039da:	4b5e      	ldr	r3, [pc, #376]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 80039dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039de:	4a5d      	ldr	r2, [pc, #372]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 80039e0:	f043 0301 	orr.w	r3, r3, #1
 80039e4:	6713      	str	r3, [r2, #112]	; 0x70
 80039e6:	e00b      	b.n	8003a00 <HAL_RCC_OscConfig+0x358>
 80039e8:	4b5a      	ldr	r3, [pc, #360]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 80039ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ec:	4a59      	ldr	r2, [pc, #356]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 80039ee:	f023 0301 	bic.w	r3, r3, #1
 80039f2:	6713      	str	r3, [r2, #112]	; 0x70
 80039f4:	4b57      	ldr	r3, [pc, #348]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 80039f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f8:	4a56      	ldr	r2, [pc, #344]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 80039fa:	f023 0304 	bic.w	r3, r3, #4
 80039fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d015      	beq.n	8003a34 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a08:	f7fe fa9a 	bl	8001f40 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0e:	e00a      	b.n	8003a26 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a10:	f7fe fa96 	bl	8001f40 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e0d7      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a26:	4b4b      	ldr	r3, [pc, #300]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0ee      	beq.n	8003a10 <HAL_RCC_OscConfig+0x368>
 8003a32:	e014      	b.n	8003a5e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a34:	f7fe fa84 	bl	8001f40 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a3a:	e00a      	b.n	8003a52 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a3c:	f7fe fa80 	bl	8001f40 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e0c1      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a52:	4b40      	ldr	r3, [pc, #256]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1ee      	bne.n	8003a3c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a5e:	7dfb      	ldrb	r3, [r7, #23]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d105      	bne.n	8003a70 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a64:	4b3b      	ldr	r3, [pc, #236]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	4a3a      	ldr	r2, [pc, #232]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 80ad 	beq.w	8003bd4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a7a:	4b36      	ldr	r3, [pc, #216]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d060      	beq.n	8003b48 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d145      	bne.n	8003b1a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8e:	4b33      	ldr	r3, [pc, #204]	; (8003b5c <HAL_RCC_OscConfig+0x4b4>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a94:	f7fe fa54 	bl	8001f40 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a9c:	f7fe fa50 	bl	8001f40 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e093      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aae:	4b29      	ldr	r3, [pc, #164]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f0      	bne.n	8003a9c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69da      	ldr	r2, [r3, #28]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	019b      	lsls	r3, r3, #6
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad0:	085b      	lsrs	r3, r3, #1
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	041b      	lsls	r3, r3, #16
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	061b      	lsls	r3, r3, #24
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae4:	071b      	lsls	r3, r3, #28
 8003ae6:	491b      	ldr	r1, [pc, #108]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aec:	4b1b      	ldr	r3, [pc, #108]	; (8003b5c <HAL_RCC_OscConfig+0x4b4>)
 8003aee:	2201      	movs	r2, #1
 8003af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af2:	f7fe fa25 	bl	8001f40 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003afa:	f7fe fa21 	bl	8001f40 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e064      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b0c:	4b11      	ldr	r3, [pc, #68]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCC_OscConfig+0x452>
 8003b18:	e05c      	b.n	8003bd4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b1a:	4b10      	ldr	r3, [pc, #64]	; (8003b5c <HAL_RCC_OscConfig+0x4b4>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b20:	f7fe fa0e 	bl	8001f40 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b28:	f7fe fa0a 	bl	8001f40 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e04d      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3a:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0x480>
 8003b46:	e045      	b.n	8003bd4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d107      	bne.n	8003b60 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e040      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
 8003b54:	40023800 	.word	0x40023800
 8003b58:	40007000 	.word	0x40007000
 8003b5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b60:	4b1f      	ldr	r3, [pc, #124]	; (8003be0 <HAL_RCC_OscConfig+0x538>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d030      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d129      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d122      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b90:	4013      	ands	r3, r2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d119      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba6:	085b      	lsrs	r3, r3, #1
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d10f      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d107      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d001      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e000      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40023800 	.word	0x40023800

08003be4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e041      	b.n	8003c7a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d106      	bne.n	8003c10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7fd ffe8 	bl	8001be0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3304      	adds	r3, #4
 8003c20:	4619      	mov	r1, r3
 8003c22:	4610      	mov	r0, r2
 8003c24:	f000 fd40 	bl	80046a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d109      	bne.n	8003ca8 <HAL_TIM_PWM_Start+0x24>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	bf14      	ite	ne
 8003ca0:	2301      	movne	r3, #1
 8003ca2:	2300      	moveq	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	e022      	b.n	8003cee <HAL_TIM_PWM_Start+0x6a>
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d109      	bne.n	8003cc2 <HAL_TIM_PWM_Start+0x3e>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	bf14      	ite	ne
 8003cba:	2301      	movne	r3, #1
 8003cbc:	2300      	moveq	r3, #0
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	e015      	b.n	8003cee <HAL_TIM_PWM_Start+0x6a>
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d109      	bne.n	8003cdc <HAL_TIM_PWM_Start+0x58>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	bf14      	ite	ne
 8003cd4:	2301      	movne	r3, #1
 8003cd6:	2300      	moveq	r3, #0
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	e008      	b.n	8003cee <HAL_TIM_PWM_Start+0x6a>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	bf14      	ite	ne
 8003ce8:	2301      	movne	r3, #1
 8003cea:	2300      	moveq	r3, #0
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e07c      	b.n	8003df0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d104      	bne.n	8003d06 <HAL_TIM_PWM_Start+0x82>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d04:	e013      	b.n	8003d2e <HAL_TIM_PWM_Start+0xaa>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b04      	cmp	r3, #4
 8003d0a:	d104      	bne.n	8003d16 <HAL_TIM_PWM_Start+0x92>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d14:	e00b      	b.n	8003d2e <HAL_TIM_PWM_Start+0xaa>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d104      	bne.n	8003d26 <HAL_TIM_PWM_Start+0xa2>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d24:	e003      	b.n	8003d2e <HAL_TIM_PWM_Start+0xaa>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2202      	movs	r2, #2
 8003d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2201      	movs	r2, #1
 8003d34:	6839      	ldr	r1, [r7, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f001 f830 	bl	8004d9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a2d      	ldr	r2, [pc, #180]	; (8003df8 <HAL_TIM_PWM_Start+0x174>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d004      	beq.n	8003d50 <HAL_TIM_PWM_Start+0xcc>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a2c      	ldr	r2, [pc, #176]	; (8003dfc <HAL_TIM_PWM_Start+0x178>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d101      	bne.n	8003d54 <HAL_TIM_PWM_Start+0xd0>
 8003d50:	2301      	movs	r3, #1
 8003d52:	e000      	b.n	8003d56 <HAL_TIM_PWM_Start+0xd2>
 8003d54:	2300      	movs	r3, #0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d007      	beq.n	8003d6a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a22      	ldr	r2, [pc, #136]	; (8003df8 <HAL_TIM_PWM_Start+0x174>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d022      	beq.n	8003dba <HAL_TIM_PWM_Start+0x136>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d7c:	d01d      	beq.n	8003dba <HAL_TIM_PWM_Start+0x136>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a1f      	ldr	r2, [pc, #124]	; (8003e00 <HAL_TIM_PWM_Start+0x17c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d018      	beq.n	8003dba <HAL_TIM_PWM_Start+0x136>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a1d      	ldr	r2, [pc, #116]	; (8003e04 <HAL_TIM_PWM_Start+0x180>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d013      	beq.n	8003dba <HAL_TIM_PWM_Start+0x136>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a1c      	ldr	r2, [pc, #112]	; (8003e08 <HAL_TIM_PWM_Start+0x184>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d00e      	beq.n	8003dba <HAL_TIM_PWM_Start+0x136>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a16      	ldr	r2, [pc, #88]	; (8003dfc <HAL_TIM_PWM_Start+0x178>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d009      	beq.n	8003dba <HAL_TIM_PWM_Start+0x136>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a18      	ldr	r2, [pc, #96]	; (8003e0c <HAL_TIM_PWM_Start+0x188>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d004      	beq.n	8003dba <HAL_TIM_PWM_Start+0x136>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a16      	ldr	r2, [pc, #88]	; (8003e10 <HAL_TIM_PWM_Start+0x18c>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d111      	bne.n	8003dde <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2b06      	cmp	r3, #6
 8003dca:	d010      	beq.n	8003dee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ddc:	e007      	b.n	8003dee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f042 0201 	orr.w	r2, r2, #1
 8003dec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40010000 	.word	0x40010000
 8003dfc:	40010400 	.word	0x40010400
 8003e00:	40000400 	.word	0x40000400
 8003e04:	40000800 	.word	0x40000800
 8003e08:	40000c00 	.word	0x40000c00
 8003e0c:	40014000 	.word	0x40014000
 8003e10:	40001800 	.word	0x40001800

08003e14 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e041      	b.n	8003eaa <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d106      	bne.n	8003e40 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7fd fe80 	bl	8001b40 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3304      	adds	r3, #4
 8003e50:	4619      	mov	r1, r3
 8003e52:	4610      	mov	r0, r2
 8003e54:	f000 fc28 	bl	80046a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d104      	bne.n	8003ed2 <HAL_TIM_IC_Start_IT+0x1e>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	e013      	b.n	8003efa <HAL_TIM_IC_Start_IT+0x46>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b04      	cmp	r3, #4
 8003ed6:	d104      	bne.n	8003ee2 <HAL_TIM_IC_Start_IT+0x2e>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	e00b      	b.n	8003efa <HAL_TIM_IC_Start_IT+0x46>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d104      	bne.n	8003ef2 <HAL_TIM_IC_Start_IT+0x3e>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	e003      	b.n	8003efa <HAL_TIM_IC_Start_IT+0x46>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d104      	bne.n	8003f0c <HAL_TIM_IC_Start_IT+0x58>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	e013      	b.n	8003f34 <HAL_TIM_IC_Start_IT+0x80>
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d104      	bne.n	8003f1c <HAL_TIM_IC_Start_IT+0x68>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	e00b      	b.n	8003f34 <HAL_TIM_IC_Start_IT+0x80>
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d104      	bne.n	8003f2c <HAL_TIM_IC_Start_IT+0x78>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	e003      	b.n	8003f34 <HAL_TIM_IC_Start_IT+0x80>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f36:	7bbb      	ldrb	r3, [r7, #14]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d102      	bne.n	8003f42 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f3c:	7b7b      	ldrb	r3, [r7, #13]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d001      	beq.n	8003f46 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e0cc      	b.n	80040e0 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d104      	bne.n	8003f56 <HAL_TIM_IC_Start_IT+0xa2>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f54:	e013      	b.n	8003f7e <HAL_TIM_IC_Start_IT+0xca>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d104      	bne.n	8003f66 <HAL_TIM_IC_Start_IT+0xb2>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f64:	e00b      	b.n	8003f7e <HAL_TIM_IC_Start_IT+0xca>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d104      	bne.n	8003f76 <HAL_TIM_IC_Start_IT+0xc2>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f74:	e003      	b.n	8003f7e <HAL_TIM_IC_Start_IT+0xca>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2202      	movs	r2, #2
 8003f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d104      	bne.n	8003f8e <HAL_TIM_IC_Start_IT+0xda>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f8c:	e013      	b.n	8003fb6 <HAL_TIM_IC_Start_IT+0x102>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d104      	bne.n	8003f9e <HAL_TIM_IC_Start_IT+0xea>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2202      	movs	r2, #2
 8003f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f9c:	e00b      	b.n	8003fb6 <HAL_TIM_IC_Start_IT+0x102>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d104      	bne.n	8003fae <HAL_TIM_IC_Start_IT+0xfa>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fac:	e003      	b.n	8003fb6 <HAL_TIM_IC_Start_IT+0x102>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b0c      	cmp	r3, #12
 8003fba:	d841      	bhi.n	8004040 <HAL_TIM_IC_Start_IT+0x18c>
 8003fbc:	a201      	add	r2, pc, #4	; (adr r2, 8003fc4 <HAL_TIM_IC_Start_IT+0x110>)
 8003fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc2:	bf00      	nop
 8003fc4:	08003ff9 	.word	0x08003ff9
 8003fc8:	08004041 	.word	0x08004041
 8003fcc:	08004041 	.word	0x08004041
 8003fd0:	08004041 	.word	0x08004041
 8003fd4:	0800400b 	.word	0x0800400b
 8003fd8:	08004041 	.word	0x08004041
 8003fdc:	08004041 	.word	0x08004041
 8003fe0:	08004041 	.word	0x08004041
 8003fe4:	0800401d 	.word	0x0800401d
 8003fe8:	08004041 	.word	0x08004041
 8003fec:	08004041 	.word	0x08004041
 8003ff0:	08004041 	.word	0x08004041
 8003ff4:	0800402f 	.word	0x0800402f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0202 	orr.w	r2, r2, #2
 8004006:	60da      	str	r2, [r3, #12]
      break;
 8004008:	e01d      	b.n	8004046 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68da      	ldr	r2, [r3, #12]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f042 0204 	orr.w	r2, r2, #4
 8004018:	60da      	str	r2, [r3, #12]
      break;
 800401a:	e014      	b.n	8004046 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0208 	orr.w	r2, r2, #8
 800402a:	60da      	str	r2, [r3, #12]
      break;
 800402c:	e00b      	b.n	8004046 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0210 	orr.w	r2, r2, #16
 800403c:	60da      	str	r2, [r3, #12]
      break;
 800403e:	e002      	b.n	8004046 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	73fb      	strb	r3, [r7, #15]
      break;
 8004044:	bf00      	nop
  }

  if (status == HAL_OK)
 8004046:	7bfb      	ldrb	r3, [r7, #15]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d148      	bne.n	80040de <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2201      	movs	r2, #1
 8004052:	6839      	ldr	r1, [r7, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f000 fea1 	bl	8004d9c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a22      	ldr	r2, [pc, #136]	; (80040e8 <HAL_TIM_IC_Start_IT+0x234>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d022      	beq.n	80040aa <HAL_TIM_IC_Start_IT+0x1f6>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800406c:	d01d      	beq.n	80040aa <HAL_TIM_IC_Start_IT+0x1f6>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a1e      	ldr	r2, [pc, #120]	; (80040ec <HAL_TIM_IC_Start_IT+0x238>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d018      	beq.n	80040aa <HAL_TIM_IC_Start_IT+0x1f6>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a1c      	ldr	r2, [pc, #112]	; (80040f0 <HAL_TIM_IC_Start_IT+0x23c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d013      	beq.n	80040aa <HAL_TIM_IC_Start_IT+0x1f6>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a1b      	ldr	r2, [pc, #108]	; (80040f4 <HAL_TIM_IC_Start_IT+0x240>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d00e      	beq.n	80040aa <HAL_TIM_IC_Start_IT+0x1f6>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a19      	ldr	r2, [pc, #100]	; (80040f8 <HAL_TIM_IC_Start_IT+0x244>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d009      	beq.n	80040aa <HAL_TIM_IC_Start_IT+0x1f6>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a18      	ldr	r2, [pc, #96]	; (80040fc <HAL_TIM_IC_Start_IT+0x248>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d004      	beq.n	80040aa <HAL_TIM_IC_Start_IT+0x1f6>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a16      	ldr	r2, [pc, #88]	; (8004100 <HAL_TIM_IC_Start_IT+0x24c>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d111      	bne.n	80040ce <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b06      	cmp	r3, #6
 80040ba:	d010      	beq.n	80040de <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0201 	orr.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040cc:	e007      	b.n	80040de <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f042 0201 	orr.w	r2, r2, #1
 80040dc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80040de:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40010000 	.word	0x40010000
 80040ec:	40000400 	.word	0x40000400
 80040f0:	40000800 	.word	0x40000800
 80040f4:	40000c00 	.word	0x40000c00
 80040f8:	40010400 	.word	0x40010400
 80040fc:	40014000 	.word	0x40014000
 8004100:	40001800 	.word	0x40001800

08004104 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b02      	cmp	r3, #2
 8004118:	d122      	bne.n	8004160 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b02      	cmp	r3, #2
 8004126:	d11b      	bne.n	8004160 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f06f 0202 	mvn.w	r2, #2
 8004130:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7fc fe22 	bl	8000d90 <HAL_TIM_IC_CaptureCallback>
 800414c:	e005      	b.n	800415a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 fa8c 	bl	800466c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 fa93 	bl	8004680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	f003 0304 	and.w	r3, r3, #4
 800416a:	2b04      	cmp	r3, #4
 800416c:	d122      	bne.n	80041b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b04      	cmp	r3, #4
 800417a:	d11b      	bne.n	80041b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f06f 0204 	mvn.w	r2, #4
 8004184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2202      	movs	r2, #2
 800418a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7fc fdf8 	bl	8000d90 <HAL_TIM_IC_CaptureCallback>
 80041a0:	e005      	b.n	80041ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 fa62 	bl	800466c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 fa69 	bl	8004680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b08      	cmp	r3, #8
 80041c0:	d122      	bne.n	8004208 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d11b      	bne.n	8004208 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f06f 0208 	mvn.w	r2, #8
 80041d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2204      	movs	r2, #4
 80041de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7fc fdce 	bl	8000d90 <HAL_TIM_IC_CaptureCallback>
 80041f4:	e005      	b.n	8004202 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 fa38 	bl	800466c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 fa3f 	bl	8004680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	f003 0310 	and.w	r3, r3, #16
 8004212:	2b10      	cmp	r3, #16
 8004214:	d122      	bne.n	800425c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	f003 0310 	and.w	r3, r3, #16
 8004220:	2b10      	cmp	r3, #16
 8004222:	d11b      	bne.n	800425c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f06f 0210 	mvn.w	r2, #16
 800422c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2208      	movs	r2, #8
 8004232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7fc fda4 	bl	8000d90 <HAL_TIM_IC_CaptureCallback>
 8004248:	e005      	b.n	8004256 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 fa0e 	bl	800466c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 fa15 	bl	8004680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b01      	cmp	r3, #1
 8004268:	d10e      	bne.n	8004288 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b01      	cmp	r3, #1
 8004276:	d107      	bne.n	8004288 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f06f 0201 	mvn.w	r2, #1
 8004280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f9e8 	bl	8004658 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004292:	2b80      	cmp	r3, #128	; 0x80
 8004294:	d10e      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a0:	2b80      	cmp	r3, #128	; 0x80
 80042a2:	d107      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fe20 	bl	8004ef4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042be:	2b40      	cmp	r3, #64	; 0x40
 80042c0:	d10e      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042cc:	2b40      	cmp	r3, #64	; 0x40
 80042ce:	d107      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f9da 	bl	8004694 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b20      	cmp	r3, #32
 80042ec:	d10e      	bne.n	800430c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f003 0320 	and.w	r3, r3, #32
 80042f8:	2b20      	cmp	r3, #32
 80042fa:	d107      	bne.n	800430c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f06f 0220 	mvn.w	r2, #32
 8004304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 fdea 	bl	8004ee0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800430c:	bf00      	nop
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004320:	2300      	movs	r3, #0
 8004322:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800432a:	2b01      	cmp	r3, #1
 800432c:	d101      	bne.n	8004332 <HAL_TIM_IC_ConfigChannel+0x1e>
 800432e:	2302      	movs	r3, #2
 8004330:	e088      	b.n	8004444 <HAL_TIM_IC_ConfigChannel+0x130>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d11b      	bne.n	8004378 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6818      	ldr	r0, [r3, #0]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	6819      	ldr	r1, [r3, #0]
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f000 fbfa 	bl	8004b48 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699a      	ldr	r2, [r3, #24]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 020c 	bic.w	r2, r2, #12
 8004362:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6999      	ldr	r1, [r3, #24]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	689a      	ldr	r2, [r3, #8]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	619a      	str	r2, [r3, #24]
 8004376:	e060      	b.n	800443a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b04      	cmp	r3, #4
 800437c:	d11c      	bne.n	80043b8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6818      	ldr	r0, [r3, #0]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	6819      	ldr	r1, [r3, #0]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f000 fc4f 	bl	8004c30 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	699a      	ldr	r2, [r3, #24]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80043a0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6999      	ldr	r1, [r3, #24]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	021a      	lsls	r2, r3, #8
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	619a      	str	r2, [r3, #24]
 80043b6:	e040      	b.n	800443a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b08      	cmp	r3, #8
 80043bc:	d11b      	bne.n	80043f6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	6819      	ldr	r1, [r3, #0]
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f000 fc6c 	bl	8004caa <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	69da      	ldr	r2, [r3, #28]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 020c 	bic.w	r2, r2, #12
 80043e0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	69d9      	ldr	r1, [r3, #28]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	61da      	str	r2, [r3, #28]
 80043f4:	e021      	b.n	800443a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b0c      	cmp	r3, #12
 80043fa:	d11c      	bne.n	8004436 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6818      	ldr	r0, [r3, #0]
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	6819      	ldr	r1, [r3, #0]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f000 fc89 	bl	8004d22 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	69da      	ldr	r2, [r3, #28]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800441e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	69d9      	ldr	r1, [r3, #28]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	021a      	lsls	r2, r3, #8
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	430a      	orrs	r2, r1
 8004432:	61da      	str	r2, [r3, #28]
 8004434:	e001      	b.n	800443a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004442:	7dfb      	ldrb	r3, [r7, #23]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004458:	2300      	movs	r3, #0
 800445a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004462:	2b01      	cmp	r3, #1
 8004464:	d101      	bne.n	800446a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004466:	2302      	movs	r3, #2
 8004468:	e0ae      	b.n	80045c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b0c      	cmp	r3, #12
 8004476:	f200 809f 	bhi.w	80045b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800447a:	a201      	add	r2, pc, #4	; (adr r2, 8004480 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800447c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004480:	080044b5 	.word	0x080044b5
 8004484:	080045b9 	.word	0x080045b9
 8004488:	080045b9 	.word	0x080045b9
 800448c:	080045b9 	.word	0x080045b9
 8004490:	080044f5 	.word	0x080044f5
 8004494:	080045b9 	.word	0x080045b9
 8004498:	080045b9 	.word	0x080045b9
 800449c:	080045b9 	.word	0x080045b9
 80044a0:	08004537 	.word	0x08004537
 80044a4:	080045b9 	.word	0x080045b9
 80044a8:	080045b9 	.word	0x080045b9
 80044ac:	080045b9 	.word	0x080045b9
 80044b0:	08004577 	.word	0x08004577
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68b9      	ldr	r1, [r7, #8]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 f994 	bl	80047e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699a      	ldr	r2, [r3, #24]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0208 	orr.w	r2, r2, #8
 80044ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699a      	ldr	r2, [r3, #24]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 0204 	bic.w	r2, r2, #4
 80044de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6999      	ldr	r1, [r3, #24]
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	691a      	ldr	r2, [r3, #16]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	619a      	str	r2, [r3, #24]
      break;
 80044f2:	e064      	b.n	80045be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68b9      	ldr	r1, [r7, #8]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 f9e4 	bl	80048c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699a      	ldr	r2, [r3, #24]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800450e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	699a      	ldr	r2, [r3, #24]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800451e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6999      	ldr	r1, [r3, #24]
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	021a      	lsls	r2, r3, #8
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	619a      	str	r2, [r3, #24]
      break;
 8004534:	e043      	b.n	80045be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68b9      	ldr	r1, [r7, #8]
 800453c:	4618      	mov	r0, r3
 800453e:	f000 fa39 	bl	80049b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	69da      	ldr	r2, [r3, #28]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f042 0208 	orr.w	r2, r2, #8
 8004550:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	69da      	ldr	r2, [r3, #28]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0204 	bic.w	r2, r2, #4
 8004560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	69d9      	ldr	r1, [r3, #28]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	691a      	ldr	r2, [r3, #16]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	61da      	str	r2, [r3, #28]
      break;
 8004574:	e023      	b.n	80045be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68b9      	ldr	r1, [r7, #8]
 800457c:	4618      	mov	r0, r3
 800457e:	f000 fa8d 	bl	8004a9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	69da      	ldr	r2, [r3, #28]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004590:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	69da      	ldr	r2, [r3, #28]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	69d9      	ldr	r1, [r3, #28]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	021a      	lsls	r2, r3, #8
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	61da      	str	r2, [r3, #28]
      break;
 80045b6:	e002      	b.n	80045be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	75fb      	strb	r3, [r7, #23]
      break;
 80045bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3718      	adds	r7, #24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b0c      	cmp	r3, #12
 80045e2:	d831      	bhi.n	8004648 <HAL_TIM_ReadCapturedValue+0x78>
 80045e4:	a201      	add	r2, pc, #4	; (adr r2, 80045ec <HAL_TIM_ReadCapturedValue+0x1c>)
 80045e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ea:	bf00      	nop
 80045ec:	08004621 	.word	0x08004621
 80045f0:	08004649 	.word	0x08004649
 80045f4:	08004649 	.word	0x08004649
 80045f8:	08004649 	.word	0x08004649
 80045fc:	0800462b 	.word	0x0800462b
 8004600:	08004649 	.word	0x08004649
 8004604:	08004649 	.word	0x08004649
 8004608:	08004649 	.word	0x08004649
 800460c:	08004635 	.word	0x08004635
 8004610:	08004649 	.word	0x08004649
 8004614:	08004649 	.word	0x08004649
 8004618:	08004649 	.word	0x08004649
 800461c:	0800463f 	.word	0x0800463f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004626:	60fb      	str	r3, [r7, #12]

      break;
 8004628:	e00f      	b.n	800464a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004630:	60fb      	str	r3, [r7, #12]

      break;
 8004632:	e00a      	b.n	800464a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463a:	60fb      	str	r3, [r7, #12]

      break;
 800463c:	e005      	b.n	800464a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004644:	60fb      	str	r3, [r7, #12]

      break;
 8004646:	e000      	b.n	800464a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004648:	bf00      	nop
  }

  return tmpreg;
 800464a:	68fb      	ldr	r3, [r7, #12]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a40      	ldr	r2, [pc, #256]	; (80047bc <TIM_Base_SetConfig+0x114>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d013      	beq.n	80046e8 <TIM_Base_SetConfig+0x40>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c6:	d00f      	beq.n	80046e8 <TIM_Base_SetConfig+0x40>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a3d      	ldr	r2, [pc, #244]	; (80047c0 <TIM_Base_SetConfig+0x118>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d00b      	beq.n	80046e8 <TIM_Base_SetConfig+0x40>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a3c      	ldr	r2, [pc, #240]	; (80047c4 <TIM_Base_SetConfig+0x11c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d007      	beq.n	80046e8 <TIM_Base_SetConfig+0x40>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a3b      	ldr	r2, [pc, #236]	; (80047c8 <TIM_Base_SetConfig+0x120>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d003      	beq.n	80046e8 <TIM_Base_SetConfig+0x40>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a3a      	ldr	r2, [pc, #232]	; (80047cc <TIM_Base_SetConfig+0x124>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d108      	bne.n	80046fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a2f      	ldr	r2, [pc, #188]	; (80047bc <TIM_Base_SetConfig+0x114>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d02b      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004708:	d027      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a2c      	ldr	r2, [pc, #176]	; (80047c0 <TIM_Base_SetConfig+0x118>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d023      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a2b      	ldr	r2, [pc, #172]	; (80047c4 <TIM_Base_SetConfig+0x11c>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d01f      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a2a      	ldr	r2, [pc, #168]	; (80047c8 <TIM_Base_SetConfig+0x120>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d01b      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a29      	ldr	r2, [pc, #164]	; (80047cc <TIM_Base_SetConfig+0x124>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d017      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a28      	ldr	r2, [pc, #160]	; (80047d0 <TIM_Base_SetConfig+0x128>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d013      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a27      	ldr	r2, [pc, #156]	; (80047d4 <TIM_Base_SetConfig+0x12c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d00f      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a26      	ldr	r2, [pc, #152]	; (80047d8 <TIM_Base_SetConfig+0x130>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d00b      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a25      	ldr	r2, [pc, #148]	; (80047dc <TIM_Base_SetConfig+0x134>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d007      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a24      	ldr	r2, [pc, #144]	; (80047e0 <TIM_Base_SetConfig+0x138>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d003      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a23      	ldr	r2, [pc, #140]	; (80047e4 <TIM_Base_SetConfig+0x13c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d108      	bne.n	800476c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	4313      	orrs	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a0a      	ldr	r2, [pc, #40]	; (80047bc <TIM_Base_SetConfig+0x114>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d003      	beq.n	80047a0 <TIM_Base_SetConfig+0xf8>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a0c      	ldr	r2, [pc, #48]	; (80047cc <TIM_Base_SetConfig+0x124>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d103      	bne.n	80047a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	691a      	ldr	r2, [r3, #16]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	615a      	str	r2, [r3, #20]
}
 80047ae:	bf00      	nop
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	40010000 	.word	0x40010000
 80047c0:	40000400 	.word	0x40000400
 80047c4:	40000800 	.word	0x40000800
 80047c8:	40000c00 	.word	0x40000c00
 80047cc:	40010400 	.word	0x40010400
 80047d0:	40014000 	.word	0x40014000
 80047d4:	40014400 	.word	0x40014400
 80047d8:	40014800 	.word	0x40014800
 80047dc:	40001800 	.word	0x40001800
 80047e0:	40001c00 	.word	0x40001c00
 80047e4:	40002000 	.word	0x40002000

080047e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	f023 0201 	bic.w	r2, r3, #1
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f023 0303 	bic.w	r3, r3, #3
 800481e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f023 0302 	bic.w	r3, r3, #2
 8004830:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	4313      	orrs	r3, r2
 800483a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a20      	ldr	r2, [pc, #128]	; (80048c0 <TIM_OC1_SetConfig+0xd8>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d003      	beq.n	800484c <TIM_OC1_SetConfig+0x64>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a1f      	ldr	r2, [pc, #124]	; (80048c4 <TIM_OC1_SetConfig+0xdc>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d10c      	bne.n	8004866 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f023 0308 	bic.w	r3, r3, #8
 8004852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	4313      	orrs	r3, r2
 800485c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f023 0304 	bic.w	r3, r3, #4
 8004864:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a15      	ldr	r2, [pc, #84]	; (80048c0 <TIM_OC1_SetConfig+0xd8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d003      	beq.n	8004876 <TIM_OC1_SetConfig+0x8e>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a14      	ldr	r2, [pc, #80]	; (80048c4 <TIM_OC1_SetConfig+0xdc>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d111      	bne.n	800489a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800487c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004884:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	4313      	orrs	r3, r2
 800488e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	4313      	orrs	r3, r2
 8004898:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	621a      	str	r2, [r3, #32]
}
 80048b4:	bf00      	nop
 80048b6:	371c      	adds	r7, #28
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	40010000 	.word	0x40010000
 80048c4:	40010400 	.word	0x40010400

080048c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	f023 0210 	bic.w	r2, r3, #16
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	021b      	lsls	r3, r3, #8
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	4313      	orrs	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f023 0320 	bic.w	r3, r3, #32
 8004912:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	4313      	orrs	r3, r2
 800491e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a22      	ldr	r2, [pc, #136]	; (80049ac <TIM_OC2_SetConfig+0xe4>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d003      	beq.n	8004930 <TIM_OC2_SetConfig+0x68>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a21      	ldr	r2, [pc, #132]	; (80049b0 <TIM_OC2_SetConfig+0xe8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d10d      	bne.n	800494c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004936:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	4313      	orrs	r3, r2
 8004942:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800494a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a17      	ldr	r2, [pc, #92]	; (80049ac <TIM_OC2_SetConfig+0xe4>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d003      	beq.n	800495c <TIM_OC2_SetConfig+0x94>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a16      	ldr	r2, [pc, #88]	; (80049b0 <TIM_OC2_SetConfig+0xe8>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d113      	bne.n	8004984 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004962:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800496a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	4313      	orrs	r3, r2
 8004976:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	4313      	orrs	r3, r2
 8004982:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	621a      	str	r2, [r3, #32]
}
 800499e:	bf00      	nop
 80049a0:	371c      	adds	r7, #28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40010000 	.word	0x40010000
 80049b0:	40010400 	.word	0x40010400

080049b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b087      	sub	sp, #28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f023 0303 	bic.w	r3, r3, #3
 80049ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	021b      	lsls	r3, r3, #8
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a21      	ldr	r2, [pc, #132]	; (8004a94 <TIM_OC3_SetConfig+0xe0>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d003      	beq.n	8004a1a <TIM_OC3_SetConfig+0x66>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a20      	ldr	r2, [pc, #128]	; (8004a98 <TIM_OC3_SetConfig+0xe4>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d10d      	bne.n	8004a36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	021b      	lsls	r3, r3, #8
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a16      	ldr	r2, [pc, #88]	; (8004a94 <TIM_OC3_SetConfig+0xe0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d003      	beq.n	8004a46 <TIM_OC3_SetConfig+0x92>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a15      	ldr	r2, [pc, #84]	; (8004a98 <TIM_OC3_SetConfig+0xe4>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d113      	bne.n	8004a6e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	011b      	lsls	r3, r3, #4
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	621a      	str	r2, [r3, #32]
}
 8004a88:	bf00      	nop
 8004a8a:	371c      	adds	r7, #28
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	40010000 	.word	0x40010000
 8004a98:	40010400 	.word	0x40010400

08004a9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	021b      	lsls	r3, r3, #8
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ae6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	031b      	lsls	r3, r3, #12
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a12      	ldr	r2, [pc, #72]	; (8004b40 <TIM_OC4_SetConfig+0xa4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d003      	beq.n	8004b04 <TIM_OC4_SetConfig+0x68>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a11      	ldr	r2, [pc, #68]	; (8004b44 <TIM_OC4_SetConfig+0xa8>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d109      	bne.n	8004b18 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	019b      	lsls	r3, r3, #6
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	621a      	str	r2, [r3, #32]
}
 8004b32:	bf00      	nop
 8004b34:	371c      	adds	r7, #28
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	40010000 	.word	0x40010000
 8004b44:	40010400 	.word	0x40010400

08004b48 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	f023 0201 	bic.w	r2, r3, #1
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4a28      	ldr	r2, [pc, #160]	; (8004c14 <TIM_TI1_SetConfig+0xcc>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d01b      	beq.n	8004bae <TIM_TI1_SetConfig+0x66>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b7c:	d017      	beq.n	8004bae <TIM_TI1_SetConfig+0x66>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	4a25      	ldr	r2, [pc, #148]	; (8004c18 <TIM_TI1_SetConfig+0xd0>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d013      	beq.n	8004bae <TIM_TI1_SetConfig+0x66>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4a24      	ldr	r2, [pc, #144]	; (8004c1c <TIM_TI1_SetConfig+0xd4>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d00f      	beq.n	8004bae <TIM_TI1_SetConfig+0x66>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4a23      	ldr	r2, [pc, #140]	; (8004c20 <TIM_TI1_SetConfig+0xd8>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d00b      	beq.n	8004bae <TIM_TI1_SetConfig+0x66>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	4a22      	ldr	r2, [pc, #136]	; (8004c24 <TIM_TI1_SetConfig+0xdc>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d007      	beq.n	8004bae <TIM_TI1_SetConfig+0x66>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4a21      	ldr	r2, [pc, #132]	; (8004c28 <TIM_TI1_SetConfig+0xe0>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d003      	beq.n	8004bae <TIM_TI1_SetConfig+0x66>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4a20      	ldr	r2, [pc, #128]	; (8004c2c <TIM_TI1_SetConfig+0xe4>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d101      	bne.n	8004bb2 <TIM_TI1_SetConfig+0x6a>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e000      	b.n	8004bb4 <TIM_TI1_SetConfig+0x6c>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d008      	beq.n	8004bca <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f023 0303 	bic.w	r3, r3, #3
 8004bbe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]
 8004bc8:	e003      	b.n	8004bd2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f043 0301 	orr.w	r3, r3, #1
 8004bd0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	011b      	lsls	r3, r3, #4
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f023 030a 	bic.w	r3, r3, #10
 8004bec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f003 030a 	and.w	r3, r3, #10
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	621a      	str	r2, [r3, #32]
}
 8004c06:	bf00      	nop
 8004c08:	371c      	adds	r7, #28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	40010000 	.word	0x40010000
 8004c18:	40000400 	.word	0x40000400
 8004c1c:	40000800 	.word	0x40000800
 8004c20:	40000c00 	.word	0x40000c00
 8004c24:	40010400 	.word	0x40010400
 8004c28:	40014000 	.word	0x40014000
 8004c2c:	40001800 	.word	0x40001800

08004c30 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
 8004c3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	f023 0210 	bic.w	r2, r3, #16
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	021b      	lsls	r3, r3, #8
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	031b      	lsls	r3, r3, #12
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c82:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	621a      	str	r2, [r3, #32]
}
 8004c9e:	bf00      	nop
 8004ca0:	371c      	adds	r7, #28
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b087      	sub	sp, #28
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	607a      	str	r2, [r7, #4]
 8004cb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f023 0303 	bic.w	r3, r3, #3
 8004cd6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ce6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	011b      	lsls	r3, r3, #4
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004cfa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	021b      	lsls	r3, r3, #8
 8004d00:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	621a      	str	r2, [r3, #32]
}
 8004d16:	bf00      	nop
 8004d18:	371c      	adds	r7, #28
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b087      	sub	sp, #28
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	60f8      	str	r0, [r7, #12]
 8004d2a:	60b9      	str	r1, [r7, #8]
 8004d2c:	607a      	str	r2, [r7, #4]
 8004d2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	69db      	ldr	r3, [r3, #28]
 8004d40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d4e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	031b      	lsls	r3, r3, #12
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004d74:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	031b      	lsls	r3, r3, #12
 8004d7a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	621a      	str	r2, [r3, #32]
}
 8004d90:	bf00      	nop
 8004d92:	371c      	adds	r7, #28
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	f003 031f 	and.w	r3, r3, #31
 8004dae:	2201      	movs	r2, #1
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6a1a      	ldr	r2, [r3, #32]
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	43db      	mvns	r3, r3
 8004dbe:	401a      	ands	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6a1a      	ldr	r2, [r3, #32]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f003 031f 	and.w	r3, r3, #31
 8004dce:	6879      	ldr	r1, [r7, #4]
 8004dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	621a      	str	r2, [r3, #32]
}
 8004dda:	bf00      	nop
 8004ddc:	371c      	adds	r7, #28
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
	...

08004de8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d101      	bne.n	8004e00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	e05a      	b.n	8004eb6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a21      	ldr	r2, [pc, #132]	; (8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d022      	beq.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e4c:	d01d      	beq.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a1d      	ldr	r2, [pc, #116]	; (8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d018      	beq.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a1b      	ldr	r2, [pc, #108]	; (8004ecc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d013      	beq.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a1a      	ldr	r2, [pc, #104]	; (8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d00e      	beq.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a18      	ldr	r2, [pc, #96]	; (8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d009      	beq.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a17      	ldr	r2, [pc, #92]	; (8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d004      	beq.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a15      	ldr	r2, [pc, #84]	; (8004edc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d10c      	bne.n	8004ea4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	68ba      	ldr	r2, [r7, #8]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	40010000 	.word	0x40010000
 8004ec8:	40000400 	.word	0x40000400
 8004ecc:	40000800 	.word	0x40000800
 8004ed0:	40000c00 	.word	0x40000c00
 8004ed4:	40010400 	.word	0x40010400
 8004ed8:	40014000 	.word	0x40014000
 8004edc:	40001800 	.word	0x40001800

08004ee0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e03f      	b.n	8004f9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d106      	bne.n	8004f34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7fc feb2 	bl	8001c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2224      	movs	r2, #36	; 0x24
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f829 	bl	8004fa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	695a      	ldr	r2, [r3, #20]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68da      	ldr	r2, [r3, #12]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
	...

08004fa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fa8:	b0c0      	sub	sp, #256	; 0x100
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc0:	68d9      	ldr	r1, [r3, #12]
 8004fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	ea40 0301 	orr.w	r3, r0, r1
 8004fcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ffc:	f021 010c 	bic.w	r1, r1, #12
 8005000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800500a:	430b      	orrs	r3, r1
 800500c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800500e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800501a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800501e:	6999      	ldr	r1, [r3, #24]
 8005020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	ea40 0301 	orr.w	r3, r0, r1
 800502a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800502c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	4b8f      	ldr	r3, [pc, #572]	; (8005270 <UART_SetConfig+0x2cc>)
 8005034:	429a      	cmp	r2, r3
 8005036:	d005      	beq.n	8005044 <UART_SetConfig+0xa0>
 8005038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	4b8d      	ldr	r3, [pc, #564]	; (8005274 <UART_SetConfig+0x2d0>)
 8005040:	429a      	cmp	r2, r3
 8005042:	d104      	bne.n	800504e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005044:	f7fe f8ec 	bl	8003220 <HAL_RCC_GetPCLK2Freq>
 8005048:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800504c:	e003      	b.n	8005056 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800504e:	f7fe f8d3 	bl	80031f8 <HAL_RCC_GetPCLK1Freq>
 8005052:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005060:	f040 810c 	bne.w	800527c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005068:	2200      	movs	r2, #0
 800506a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800506e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005072:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005076:	4622      	mov	r2, r4
 8005078:	462b      	mov	r3, r5
 800507a:	1891      	adds	r1, r2, r2
 800507c:	65b9      	str	r1, [r7, #88]	; 0x58
 800507e:	415b      	adcs	r3, r3
 8005080:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005082:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005086:	4621      	mov	r1, r4
 8005088:	eb12 0801 	adds.w	r8, r2, r1
 800508c:	4629      	mov	r1, r5
 800508e:	eb43 0901 	adc.w	r9, r3, r1
 8005092:	f04f 0200 	mov.w	r2, #0
 8005096:	f04f 0300 	mov.w	r3, #0
 800509a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800509e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050a6:	4690      	mov	r8, r2
 80050a8:	4699      	mov	r9, r3
 80050aa:	4623      	mov	r3, r4
 80050ac:	eb18 0303 	adds.w	r3, r8, r3
 80050b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80050b4:	462b      	mov	r3, r5
 80050b6:	eb49 0303 	adc.w	r3, r9, r3
 80050ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80050be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80050ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80050ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80050d2:	460b      	mov	r3, r1
 80050d4:	18db      	adds	r3, r3, r3
 80050d6:	653b      	str	r3, [r7, #80]	; 0x50
 80050d8:	4613      	mov	r3, r2
 80050da:	eb42 0303 	adc.w	r3, r2, r3
 80050de:	657b      	str	r3, [r7, #84]	; 0x54
 80050e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80050e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80050e8:	f7fb fcd0 	bl	8000a8c <__aeabi_uldivmod>
 80050ec:	4602      	mov	r2, r0
 80050ee:	460b      	mov	r3, r1
 80050f0:	4b61      	ldr	r3, [pc, #388]	; (8005278 <UART_SetConfig+0x2d4>)
 80050f2:	fba3 2302 	umull	r2, r3, r3, r2
 80050f6:	095b      	lsrs	r3, r3, #5
 80050f8:	011c      	lsls	r4, r3, #4
 80050fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050fe:	2200      	movs	r2, #0
 8005100:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005104:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005108:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800510c:	4642      	mov	r2, r8
 800510e:	464b      	mov	r3, r9
 8005110:	1891      	adds	r1, r2, r2
 8005112:	64b9      	str	r1, [r7, #72]	; 0x48
 8005114:	415b      	adcs	r3, r3
 8005116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005118:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800511c:	4641      	mov	r1, r8
 800511e:	eb12 0a01 	adds.w	sl, r2, r1
 8005122:	4649      	mov	r1, r9
 8005124:	eb43 0b01 	adc.w	fp, r3, r1
 8005128:	f04f 0200 	mov.w	r2, #0
 800512c:	f04f 0300 	mov.w	r3, #0
 8005130:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005134:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005138:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800513c:	4692      	mov	sl, r2
 800513e:	469b      	mov	fp, r3
 8005140:	4643      	mov	r3, r8
 8005142:	eb1a 0303 	adds.w	r3, sl, r3
 8005146:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800514a:	464b      	mov	r3, r9
 800514c:	eb4b 0303 	adc.w	r3, fp, r3
 8005150:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005160:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005164:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005168:	460b      	mov	r3, r1
 800516a:	18db      	adds	r3, r3, r3
 800516c:	643b      	str	r3, [r7, #64]	; 0x40
 800516e:	4613      	mov	r3, r2
 8005170:	eb42 0303 	adc.w	r3, r2, r3
 8005174:	647b      	str	r3, [r7, #68]	; 0x44
 8005176:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800517a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800517e:	f7fb fc85 	bl	8000a8c <__aeabi_uldivmod>
 8005182:	4602      	mov	r2, r0
 8005184:	460b      	mov	r3, r1
 8005186:	4611      	mov	r1, r2
 8005188:	4b3b      	ldr	r3, [pc, #236]	; (8005278 <UART_SetConfig+0x2d4>)
 800518a:	fba3 2301 	umull	r2, r3, r3, r1
 800518e:	095b      	lsrs	r3, r3, #5
 8005190:	2264      	movs	r2, #100	; 0x64
 8005192:	fb02 f303 	mul.w	r3, r2, r3
 8005196:	1acb      	subs	r3, r1, r3
 8005198:	00db      	lsls	r3, r3, #3
 800519a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800519e:	4b36      	ldr	r3, [pc, #216]	; (8005278 <UART_SetConfig+0x2d4>)
 80051a0:	fba3 2302 	umull	r2, r3, r3, r2
 80051a4:	095b      	lsrs	r3, r3, #5
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051ac:	441c      	add	r4, r3
 80051ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051b2:	2200      	movs	r2, #0
 80051b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80051bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80051c0:	4642      	mov	r2, r8
 80051c2:	464b      	mov	r3, r9
 80051c4:	1891      	adds	r1, r2, r2
 80051c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80051c8:	415b      	adcs	r3, r3
 80051ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80051d0:	4641      	mov	r1, r8
 80051d2:	1851      	adds	r1, r2, r1
 80051d4:	6339      	str	r1, [r7, #48]	; 0x30
 80051d6:	4649      	mov	r1, r9
 80051d8:	414b      	adcs	r3, r1
 80051da:	637b      	str	r3, [r7, #52]	; 0x34
 80051dc:	f04f 0200 	mov.w	r2, #0
 80051e0:	f04f 0300 	mov.w	r3, #0
 80051e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80051e8:	4659      	mov	r1, fp
 80051ea:	00cb      	lsls	r3, r1, #3
 80051ec:	4651      	mov	r1, sl
 80051ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051f2:	4651      	mov	r1, sl
 80051f4:	00ca      	lsls	r2, r1, #3
 80051f6:	4610      	mov	r0, r2
 80051f8:	4619      	mov	r1, r3
 80051fa:	4603      	mov	r3, r0
 80051fc:	4642      	mov	r2, r8
 80051fe:	189b      	adds	r3, r3, r2
 8005200:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005204:	464b      	mov	r3, r9
 8005206:	460a      	mov	r2, r1
 8005208:	eb42 0303 	adc.w	r3, r2, r3
 800520c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800521c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005220:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005224:	460b      	mov	r3, r1
 8005226:	18db      	adds	r3, r3, r3
 8005228:	62bb      	str	r3, [r7, #40]	; 0x28
 800522a:	4613      	mov	r3, r2
 800522c:	eb42 0303 	adc.w	r3, r2, r3
 8005230:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005232:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005236:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800523a:	f7fb fc27 	bl	8000a8c <__aeabi_uldivmod>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	4b0d      	ldr	r3, [pc, #52]	; (8005278 <UART_SetConfig+0x2d4>)
 8005244:	fba3 1302 	umull	r1, r3, r3, r2
 8005248:	095b      	lsrs	r3, r3, #5
 800524a:	2164      	movs	r1, #100	; 0x64
 800524c:	fb01 f303 	mul.w	r3, r1, r3
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	3332      	adds	r3, #50	; 0x32
 8005256:	4a08      	ldr	r2, [pc, #32]	; (8005278 <UART_SetConfig+0x2d4>)
 8005258:	fba2 2303 	umull	r2, r3, r2, r3
 800525c:	095b      	lsrs	r3, r3, #5
 800525e:	f003 0207 	and.w	r2, r3, #7
 8005262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4422      	add	r2, r4
 800526a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800526c:	e105      	b.n	800547a <UART_SetConfig+0x4d6>
 800526e:	bf00      	nop
 8005270:	40011000 	.word	0x40011000
 8005274:	40011400 	.word	0x40011400
 8005278:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800527c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005280:	2200      	movs	r2, #0
 8005282:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005286:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800528a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800528e:	4642      	mov	r2, r8
 8005290:	464b      	mov	r3, r9
 8005292:	1891      	adds	r1, r2, r2
 8005294:	6239      	str	r1, [r7, #32]
 8005296:	415b      	adcs	r3, r3
 8005298:	627b      	str	r3, [r7, #36]	; 0x24
 800529a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800529e:	4641      	mov	r1, r8
 80052a0:	1854      	adds	r4, r2, r1
 80052a2:	4649      	mov	r1, r9
 80052a4:	eb43 0501 	adc.w	r5, r3, r1
 80052a8:	f04f 0200 	mov.w	r2, #0
 80052ac:	f04f 0300 	mov.w	r3, #0
 80052b0:	00eb      	lsls	r3, r5, #3
 80052b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052b6:	00e2      	lsls	r2, r4, #3
 80052b8:	4614      	mov	r4, r2
 80052ba:	461d      	mov	r5, r3
 80052bc:	4643      	mov	r3, r8
 80052be:	18e3      	adds	r3, r4, r3
 80052c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80052c4:	464b      	mov	r3, r9
 80052c6:	eb45 0303 	adc.w	r3, r5, r3
 80052ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80052ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80052da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80052de:	f04f 0200 	mov.w	r2, #0
 80052e2:	f04f 0300 	mov.w	r3, #0
 80052e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80052ea:	4629      	mov	r1, r5
 80052ec:	008b      	lsls	r3, r1, #2
 80052ee:	4621      	mov	r1, r4
 80052f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052f4:	4621      	mov	r1, r4
 80052f6:	008a      	lsls	r2, r1, #2
 80052f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80052fc:	f7fb fbc6 	bl	8000a8c <__aeabi_uldivmod>
 8005300:	4602      	mov	r2, r0
 8005302:	460b      	mov	r3, r1
 8005304:	4b60      	ldr	r3, [pc, #384]	; (8005488 <UART_SetConfig+0x4e4>)
 8005306:	fba3 2302 	umull	r2, r3, r3, r2
 800530a:	095b      	lsrs	r3, r3, #5
 800530c:	011c      	lsls	r4, r3, #4
 800530e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005312:	2200      	movs	r2, #0
 8005314:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005318:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800531c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005320:	4642      	mov	r2, r8
 8005322:	464b      	mov	r3, r9
 8005324:	1891      	adds	r1, r2, r2
 8005326:	61b9      	str	r1, [r7, #24]
 8005328:	415b      	adcs	r3, r3
 800532a:	61fb      	str	r3, [r7, #28]
 800532c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005330:	4641      	mov	r1, r8
 8005332:	1851      	adds	r1, r2, r1
 8005334:	6139      	str	r1, [r7, #16]
 8005336:	4649      	mov	r1, r9
 8005338:	414b      	adcs	r3, r1
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	f04f 0200 	mov.w	r2, #0
 8005340:	f04f 0300 	mov.w	r3, #0
 8005344:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005348:	4659      	mov	r1, fp
 800534a:	00cb      	lsls	r3, r1, #3
 800534c:	4651      	mov	r1, sl
 800534e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005352:	4651      	mov	r1, sl
 8005354:	00ca      	lsls	r2, r1, #3
 8005356:	4610      	mov	r0, r2
 8005358:	4619      	mov	r1, r3
 800535a:	4603      	mov	r3, r0
 800535c:	4642      	mov	r2, r8
 800535e:	189b      	adds	r3, r3, r2
 8005360:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005364:	464b      	mov	r3, r9
 8005366:	460a      	mov	r2, r1
 8005368:	eb42 0303 	adc.w	r3, r2, r3
 800536c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	67bb      	str	r3, [r7, #120]	; 0x78
 800537a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800537c:	f04f 0200 	mov.w	r2, #0
 8005380:	f04f 0300 	mov.w	r3, #0
 8005384:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005388:	4649      	mov	r1, r9
 800538a:	008b      	lsls	r3, r1, #2
 800538c:	4641      	mov	r1, r8
 800538e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005392:	4641      	mov	r1, r8
 8005394:	008a      	lsls	r2, r1, #2
 8005396:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800539a:	f7fb fb77 	bl	8000a8c <__aeabi_uldivmod>
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	4b39      	ldr	r3, [pc, #228]	; (8005488 <UART_SetConfig+0x4e4>)
 80053a4:	fba3 1302 	umull	r1, r3, r3, r2
 80053a8:	095b      	lsrs	r3, r3, #5
 80053aa:	2164      	movs	r1, #100	; 0x64
 80053ac:	fb01 f303 	mul.w	r3, r1, r3
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	011b      	lsls	r3, r3, #4
 80053b4:	3332      	adds	r3, #50	; 0x32
 80053b6:	4a34      	ldr	r2, [pc, #208]	; (8005488 <UART_SetConfig+0x4e4>)
 80053b8:	fba2 2303 	umull	r2, r3, r2, r3
 80053bc:	095b      	lsrs	r3, r3, #5
 80053be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053c2:	441c      	add	r4, r3
 80053c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053c8:	2200      	movs	r2, #0
 80053ca:	673b      	str	r3, [r7, #112]	; 0x70
 80053cc:	677a      	str	r2, [r7, #116]	; 0x74
 80053ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80053d2:	4642      	mov	r2, r8
 80053d4:	464b      	mov	r3, r9
 80053d6:	1891      	adds	r1, r2, r2
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	415b      	adcs	r3, r3
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053e2:	4641      	mov	r1, r8
 80053e4:	1851      	adds	r1, r2, r1
 80053e6:	6039      	str	r1, [r7, #0]
 80053e8:	4649      	mov	r1, r9
 80053ea:	414b      	adcs	r3, r1
 80053ec:	607b      	str	r3, [r7, #4]
 80053ee:	f04f 0200 	mov.w	r2, #0
 80053f2:	f04f 0300 	mov.w	r3, #0
 80053f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053fa:	4659      	mov	r1, fp
 80053fc:	00cb      	lsls	r3, r1, #3
 80053fe:	4651      	mov	r1, sl
 8005400:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005404:	4651      	mov	r1, sl
 8005406:	00ca      	lsls	r2, r1, #3
 8005408:	4610      	mov	r0, r2
 800540a:	4619      	mov	r1, r3
 800540c:	4603      	mov	r3, r0
 800540e:	4642      	mov	r2, r8
 8005410:	189b      	adds	r3, r3, r2
 8005412:	66bb      	str	r3, [r7, #104]	; 0x68
 8005414:	464b      	mov	r3, r9
 8005416:	460a      	mov	r2, r1
 8005418:	eb42 0303 	adc.w	r3, r2, r3
 800541c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800541e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	663b      	str	r3, [r7, #96]	; 0x60
 8005428:	667a      	str	r2, [r7, #100]	; 0x64
 800542a:	f04f 0200 	mov.w	r2, #0
 800542e:	f04f 0300 	mov.w	r3, #0
 8005432:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005436:	4649      	mov	r1, r9
 8005438:	008b      	lsls	r3, r1, #2
 800543a:	4641      	mov	r1, r8
 800543c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005440:	4641      	mov	r1, r8
 8005442:	008a      	lsls	r2, r1, #2
 8005444:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005448:	f7fb fb20 	bl	8000a8c <__aeabi_uldivmod>
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	4b0d      	ldr	r3, [pc, #52]	; (8005488 <UART_SetConfig+0x4e4>)
 8005452:	fba3 1302 	umull	r1, r3, r3, r2
 8005456:	095b      	lsrs	r3, r3, #5
 8005458:	2164      	movs	r1, #100	; 0x64
 800545a:	fb01 f303 	mul.w	r3, r1, r3
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	011b      	lsls	r3, r3, #4
 8005462:	3332      	adds	r3, #50	; 0x32
 8005464:	4a08      	ldr	r2, [pc, #32]	; (8005488 <UART_SetConfig+0x4e4>)
 8005466:	fba2 2303 	umull	r2, r3, r2, r3
 800546a:	095b      	lsrs	r3, r3, #5
 800546c:	f003 020f 	and.w	r2, r3, #15
 8005470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4422      	add	r2, r4
 8005478:	609a      	str	r2, [r3, #8]
}
 800547a:	bf00      	nop
 800547c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005480:	46bd      	mov	sp, r7
 8005482:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005486:	bf00      	nop
 8005488:	51eb851f 	.word	0x51eb851f

0800548c <__errno>:
 800548c:	4b01      	ldr	r3, [pc, #4]	; (8005494 <__errno+0x8>)
 800548e:	6818      	ldr	r0, [r3, #0]
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	20000014 	.word	0x20000014

08005498 <__libc_init_array>:
 8005498:	b570      	push	{r4, r5, r6, lr}
 800549a:	4d0d      	ldr	r5, [pc, #52]	; (80054d0 <__libc_init_array+0x38>)
 800549c:	4c0d      	ldr	r4, [pc, #52]	; (80054d4 <__libc_init_array+0x3c>)
 800549e:	1b64      	subs	r4, r4, r5
 80054a0:	10a4      	asrs	r4, r4, #2
 80054a2:	2600      	movs	r6, #0
 80054a4:	42a6      	cmp	r6, r4
 80054a6:	d109      	bne.n	80054bc <__libc_init_array+0x24>
 80054a8:	4d0b      	ldr	r5, [pc, #44]	; (80054d8 <__libc_init_array+0x40>)
 80054aa:	4c0c      	ldr	r4, [pc, #48]	; (80054dc <__libc_init_array+0x44>)
 80054ac:	f000 fc8e 	bl	8005dcc <_init>
 80054b0:	1b64      	subs	r4, r4, r5
 80054b2:	10a4      	asrs	r4, r4, #2
 80054b4:	2600      	movs	r6, #0
 80054b6:	42a6      	cmp	r6, r4
 80054b8:	d105      	bne.n	80054c6 <__libc_init_array+0x2e>
 80054ba:	bd70      	pop	{r4, r5, r6, pc}
 80054bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80054c0:	4798      	blx	r3
 80054c2:	3601      	adds	r6, #1
 80054c4:	e7ee      	b.n	80054a4 <__libc_init_array+0xc>
 80054c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ca:	4798      	blx	r3
 80054cc:	3601      	adds	r6, #1
 80054ce:	e7f2      	b.n	80054b6 <__libc_init_array+0x1e>
 80054d0:	08006bb0 	.word	0x08006bb0
 80054d4:	08006bb0 	.word	0x08006bb0
 80054d8:	08006bb0 	.word	0x08006bb0
 80054dc:	08006bb4 	.word	0x08006bb4

080054e0 <memset>:
 80054e0:	4402      	add	r2, r0
 80054e2:	4603      	mov	r3, r0
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d100      	bne.n	80054ea <memset+0xa>
 80054e8:	4770      	bx	lr
 80054ea:	f803 1b01 	strb.w	r1, [r3], #1
 80054ee:	e7f9      	b.n	80054e4 <memset+0x4>

080054f0 <siprintf>:
 80054f0:	b40e      	push	{r1, r2, r3}
 80054f2:	b500      	push	{lr}
 80054f4:	b09c      	sub	sp, #112	; 0x70
 80054f6:	ab1d      	add	r3, sp, #116	; 0x74
 80054f8:	9002      	str	r0, [sp, #8]
 80054fa:	9006      	str	r0, [sp, #24]
 80054fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005500:	4809      	ldr	r0, [pc, #36]	; (8005528 <siprintf+0x38>)
 8005502:	9107      	str	r1, [sp, #28]
 8005504:	9104      	str	r1, [sp, #16]
 8005506:	4909      	ldr	r1, [pc, #36]	; (800552c <siprintf+0x3c>)
 8005508:	f853 2b04 	ldr.w	r2, [r3], #4
 800550c:	9105      	str	r1, [sp, #20]
 800550e:	6800      	ldr	r0, [r0, #0]
 8005510:	9301      	str	r3, [sp, #4]
 8005512:	a902      	add	r1, sp, #8
 8005514:	f000 f868 	bl	80055e8 <_svfiprintf_r>
 8005518:	9b02      	ldr	r3, [sp, #8]
 800551a:	2200      	movs	r2, #0
 800551c:	701a      	strb	r2, [r3, #0]
 800551e:	b01c      	add	sp, #112	; 0x70
 8005520:	f85d eb04 	ldr.w	lr, [sp], #4
 8005524:	b003      	add	sp, #12
 8005526:	4770      	bx	lr
 8005528:	20000014 	.word	0x20000014
 800552c:	ffff0208 	.word	0xffff0208

08005530 <__ssputs_r>:
 8005530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005534:	688e      	ldr	r6, [r1, #8]
 8005536:	429e      	cmp	r6, r3
 8005538:	4682      	mov	sl, r0
 800553a:	460c      	mov	r4, r1
 800553c:	4690      	mov	r8, r2
 800553e:	461f      	mov	r7, r3
 8005540:	d838      	bhi.n	80055b4 <__ssputs_r+0x84>
 8005542:	898a      	ldrh	r2, [r1, #12]
 8005544:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005548:	d032      	beq.n	80055b0 <__ssputs_r+0x80>
 800554a:	6825      	ldr	r5, [r4, #0]
 800554c:	6909      	ldr	r1, [r1, #16]
 800554e:	eba5 0901 	sub.w	r9, r5, r1
 8005552:	6965      	ldr	r5, [r4, #20]
 8005554:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005558:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800555c:	3301      	adds	r3, #1
 800555e:	444b      	add	r3, r9
 8005560:	106d      	asrs	r5, r5, #1
 8005562:	429d      	cmp	r5, r3
 8005564:	bf38      	it	cc
 8005566:	461d      	movcc	r5, r3
 8005568:	0553      	lsls	r3, r2, #21
 800556a:	d531      	bpl.n	80055d0 <__ssputs_r+0xa0>
 800556c:	4629      	mov	r1, r5
 800556e:	f000 fb63 	bl	8005c38 <_malloc_r>
 8005572:	4606      	mov	r6, r0
 8005574:	b950      	cbnz	r0, 800558c <__ssputs_r+0x5c>
 8005576:	230c      	movs	r3, #12
 8005578:	f8ca 3000 	str.w	r3, [sl]
 800557c:	89a3      	ldrh	r3, [r4, #12]
 800557e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005582:	81a3      	strh	r3, [r4, #12]
 8005584:	f04f 30ff 	mov.w	r0, #4294967295
 8005588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800558c:	6921      	ldr	r1, [r4, #16]
 800558e:	464a      	mov	r2, r9
 8005590:	f000 fabe 	bl	8005b10 <memcpy>
 8005594:	89a3      	ldrh	r3, [r4, #12]
 8005596:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800559a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800559e:	81a3      	strh	r3, [r4, #12]
 80055a0:	6126      	str	r6, [r4, #16]
 80055a2:	6165      	str	r5, [r4, #20]
 80055a4:	444e      	add	r6, r9
 80055a6:	eba5 0509 	sub.w	r5, r5, r9
 80055aa:	6026      	str	r6, [r4, #0]
 80055ac:	60a5      	str	r5, [r4, #8]
 80055ae:	463e      	mov	r6, r7
 80055b0:	42be      	cmp	r6, r7
 80055b2:	d900      	bls.n	80055b6 <__ssputs_r+0x86>
 80055b4:	463e      	mov	r6, r7
 80055b6:	6820      	ldr	r0, [r4, #0]
 80055b8:	4632      	mov	r2, r6
 80055ba:	4641      	mov	r1, r8
 80055bc:	f000 fab6 	bl	8005b2c <memmove>
 80055c0:	68a3      	ldr	r3, [r4, #8]
 80055c2:	1b9b      	subs	r3, r3, r6
 80055c4:	60a3      	str	r3, [r4, #8]
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	4433      	add	r3, r6
 80055ca:	6023      	str	r3, [r4, #0]
 80055cc:	2000      	movs	r0, #0
 80055ce:	e7db      	b.n	8005588 <__ssputs_r+0x58>
 80055d0:	462a      	mov	r2, r5
 80055d2:	f000 fba5 	bl	8005d20 <_realloc_r>
 80055d6:	4606      	mov	r6, r0
 80055d8:	2800      	cmp	r0, #0
 80055da:	d1e1      	bne.n	80055a0 <__ssputs_r+0x70>
 80055dc:	6921      	ldr	r1, [r4, #16]
 80055de:	4650      	mov	r0, sl
 80055e0:	f000 fabe 	bl	8005b60 <_free_r>
 80055e4:	e7c7      	b.n	8005576 <__ssputs_r+0x46>
	...

080055e8 <_svfiprintf_r>:
 80055e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ec:	4698      	mov	r8, r3
 80055ee:	898b      	ldrh	r3, [r1, #12]
 80055f0:	061b      	lsls	r3, r3, #24
 80055f2:	b09d      	sub	sp, #116	; 0x74
 80055f4:	4607      	mov	r7, r0
 80055f6:	460d      	mov	r5, r1
 80055f8:	4614      	mov	r4, r2
 80055fa:	d50e      	bpl.n	800561a <_svfiprintf_r+0x32>
 80055fc:	690b      	ldr	r3, [r1, #16]
 80055fe:	b963      	cbnz	r3, 800561a <_svfiprintf_r+0x32>
 8005600:	2140      	movs	r1, #64	; 0x40
 8005602:	f000 fb19 	bl	8005c38 <_malloc_r>
 8005606:	6028      	str	r0, [r5, #0]
 8005608:	6128      	str	r0, [r5, #16]
 800560a:	b920      	cbnz	r0, 8005616 <_svfiprintf_r+0x2e>
 800560c:	230c      	movs	r3, #12
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	f04f 30ff 	mov.w	r0, #4294967295
 8005614:	e0d1      	b.n	80057ba <_svfiprintf_r+0x1d2>
 8005616:	2340      	movs	r3, #64	; 0x40
 8005618:	616b      	str	r3, [r5, #20]
 800561a:	2300      	movs	r3, #0
 800561c:	9309      	str	r3, [sp, #36]	; 0x24
 800561e:	2320      	movs	r3, #32
 8005620:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005624:	f8cd 800c 	str.w	r8, [sp, #12]
 8005628:	2330      	movs	r3, #48	; 0x30
 800562a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80057d4 <_svfiprintf_r+0x1ec>
 800562e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005632:	f04f 0901 	mov.w	r9, #1
 8005636:	4623      	mov	r3, r4
 8005638:	469a      	mov	sl, r3
 800563a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800563e:	b10a      	cbz	r2, 8005644 <_svfiprintf_r+0x5c>
 8005640:	2a25      	cmp	r2, #37	; 0x25
 8005642:	d1f9      	bne.n	8005638 <_svfiprintf_r+0x50>
 8005644:	ebba 0b04 	subs.w	fp, sl, r4
 8005648:	d00b      	beq.n	8005662 <_svfiprintf_r+0x7a>
 800564a:	465b      	mov	r3, fp
 800564c:	4622      	mov	r2, r4
 800564e:	4629      	mov	r1, r5
 8005650:	4638      	mov	r0, r7
 8005652:	f7ff ff6d 	bl	8005530 <__ssputs_r>
 8005656:	3001      	adds	r0, #1
 8005658:	f000 80aa 	beq.w	80057b0 <_svfiprintf_r+0x1c8>
 800565c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800565e:	445a      	add	r2, fp
 8005660:	9209      	str	r2, [sp, #36]	; 0x24
 8005662:	f89a 3000 	ldrb.w	r3, [sl]
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 80a2 	beq.w	80057b0 <_svfiprintf_r+0x1c8>
 800566c:	2300      	movs	r3, #0
 800566e:	f04f 32ff 	mov.w	r2, #4294967295
 8005672:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005676:	f10a 0a01 	add.w	sl, sl, #1
 800567a:	9304      	str	r3, [sp, #16]
 800567c:	9307      	str	r3, [sp, #28]
 800567e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005682:	931a      	str	r3, [sp, #104]	; 0x68
 8005684:	4654      	mov	r4, sl
 8005686:	2205      	movs	r2, #5
 8005688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800568c:	4851      	ldr	r0, [pc, #324]	; (80057d4 <_svfiprintf_r+0x1ec>)
 800568e:	f7fa fdbf 	bl	8000210 <memchr>
 8005692:	9a04      	ldr	r2, [sp, #16]
 8005694:	b9d8      	cbnz	r0, 80056ce <_svfiprintf_r+0xe6>
 8005696:	06d0      	lsls	r0, r2, #27
 8005698:	bf44      	itt	mi
 800569a:	2320      	movmi	r3, #32
 800569c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056a0:	0711      	lsls	r1, r2, #28
 80056a2:	bf44      	itt	mi
 80056a4:	232b      	movmi	r3, #43	; 0x2b
 80056a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056aa:	f89a 3000 	ldrb.w	r3, [sl]
 80056ae:	2b2a      	cmp	r3, #42	; 0x2a
 80056b0:	d015      	beq.n	80056de <_svfiprintf_r+0xf6>
 80056b2:	9a07      	ldr	r2, [sp, #28]
 80056b4:	4654      	mov	r4, sl
 80056b6:	2000      	movs	r0, #0
 80056b8:	f04f 0c0a 	mov.w	ip, #10
 80056bc:	4621      	mov	r1, r4
 80056be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056c2:	3b30      	subs	r3, #48	; 0x30
 80056c4:	2b09      	cmp	r3, #9
 80056c6:	d94e      	bls.n	8005766 <_svfiprintf_r+0x17e>
 80056c8:	b1b0      	cbz	r0, 80056f8 <_svfiprintf_r+0x110>
 80056ca:	9207      	str	r2, [sp, #28]
 80056cc:	e014      	b.n	80056f8 <_svfiprintf_r+0x110>
 80056ce:	eba0 0308 	sub.w	r3, r0, r8
 80056d2:	fa09 f303 	lsl.w	r3, r9, r3
 80056d6:	4313      	orrs	r3, r2
 80056d8:	9304      	str	r3, [sp, #16]
 80056da:	46a2      	mov	sl, r4
 80056dc:	e7d2      	b.n	8005684 <_svfiprintf_r+0x9c>
 80056de:	9b03      	ldr	r3, [sp, #12]
 80056e0:	1d19      	adds	r1, r3, #4
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	9103      	str	r1, [sp, #12]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	bfbb      	ittet	lt
 80056ea:	425b      	neglt	r3, r3
 80056ec:	f042 0202 	orrlt.w	r2, r2, #2
 80056f0:	9307      	strge	r3, [sp, #28]
 80056f2:	9307      	strlt	r3, [sp, #28]
 80056f4:	bfb8      	it	lt
 80056f6:	9204      	strlt	r2, [sp, #16]
 80056f8:	7823      	ldrb	r3, [r4, #0]
 80056fa:	2b2e      	cmp	r3, #46	; 0x2e
 80056fc:	d10c      	bne.n	8005718 <_svfiprintf_r+0x130>
 80056fe:	7863      	ldrb	r3, [r4, #1]
 8005700:	2b2a      	cmp	r3, #42	; 0x2a
 8005702:	d135      	bne.n	8005770 <_svfiprintf_r+0x188>
 8005704:	9b03      	ldr	r3, [sp, #12]
 8005706:	1d1a      	adds	r2, r3, #4
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	9203      	str	r2, [sp, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	bfb8      	it	lt
 8005710:	f04f 33ff 	movlt.w	r3, #4294967295
 8005714:	3402      	adds	r4, #2
 8005716:	9305      	str	r3, [sp, #20]
 8005718:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80057e4 <_svfiprintf_r+0x1fc>
 800571c:	7821      	ldrb	r1, [r4, #0]
 800571e:	2203      	movs	r2, #3
 8005720:	4650      	mov	r0, sl
 8005722:	f7fa fd75 	bl	8000210 <memchr>
 8005726:	b140      	cbz	r0, 800573a <_svfiprintf_r+0x152>
 8005728:	2340      	movs	r3, #64	; 0x40
 800572a:	eba0 000a 	sub.w	r0, r0, sl
 800572e:	fa03 f000 	lsl.w	r0, r3, r0
 8005732:	9b04      	ldr	r3, [sp, #16]
 8005734:	4303      	orrs	r3, r0
 8005736:	3401      	adds	r4, #1
 8005738:	9304      	str	r3, [sp, #16]
 800573a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800573e:	4826      	ldr	r0, [pc, #152]	; (80057d8 <_svfiprintf_r+0x1f0>)
 8005740:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005744:	2206      	movs	r2, #6
 8005746:	f7fa fd63 	bl	8000210 <memchr>
 800574a:	2800      	cmp	r0, #0
 800574c:	d038      	beq.n	80057c0 <_svfiprintf_r+0x1d8>
 800574e:	4b23      	ldr	r3, [pc, #140]	; (80057dc <_svfiprintf_r+0x1f4>)
 8005750:	bb1b      	cbnz	r3, 800579a <_svfiprintf_r+0x1b2>
 8005752:	9b03      	ldr	r3, [sp, #12]
 8005754:	3307      	adds	r3, #7
 8005756:	f023 0307 	bic.w	r3, r3, #7
 800575a:	3308      	adds	r3, #8
 800575c:	9303      	str	r3, [sp, #12]
 800575e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005760:	4433      	add	r3, r6
 8005762:	9309      	str	r3, [sp, #36]	; 0x24
 8005764:	e767      	b.n	8005636 <_svfiprintf_r+0x4e>
 8005766:	fb0c 3202 	mla	r2, ip, r2, r3
 800576a:	460c      	mov	r4, r1
 800576c:	2001      	movs	r0, #1
 800576e:	e7a5      	b.n	80056bc <_svfiprintf_r+0xd4>
 8005770:	2300      	movs	r3, #0
 8005772:	3401      	adds	r4, #1
 8005774:	9305      	str	r3, [sp, #20]
 8005776:	4619      	mov	r1, r3
 8005778:	f04f 0c0a 	mov.w	ip, #10
 800577c:	4620      	mov	r0, r4
 800577e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005782:	3a30      	subs	r2, #48	; 0x30
 8005784:	2a09      	cmp	r2, #9
 8005786:	d903      	bls.n	8005790 <_svfiprintf_r+0x1a8>
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0c5      	beq.n	8005718 <_svfiprintf_r+0x130>
 800578c:	9105      	str	r1, [sp, #20]
 800578e:	e7c3      	b.n	8005718 <_svfiprintf_r+0x130>
 8005790:	fb0c 2101 	mla	r1, ip, r1, r2
 8005794:	4604      	mov	r4, r0
 8005796:	2301      	movs	r3, #1
 8005798:	e7f0      	b.n	800577c <_svfiprintf_r+0x194>
 800579a:	ab03      	add	r3, sp, #12
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	462a      	mov	r2, r5
 80057a0:	4b0f      	ldr	r3, [pc, #60]	; (80057e0 <_svfiprintf_r+0x1f8>)
 80057a2:	a904      	add	r1, sp, #16
 80057a4:	4638      	mov	r0, r7
 80057a6:	f3af 8000 	nop.w
 80057aa:	1c42      	adds	r2, r0, #1
 80057ac:	4606      	mov	r6, r0
 80057ae:	d1d6      	bne.n	800575e <_svfiprintf_r+0x176>
 80057b0:	89ab      	ldrh	r3, [r5, #12]
 80057b2:	065b      	lsls	r3, r3, #25
 80057b4:	f53f af2c 	bmi.w	8005610 <_svfiprintf_r+0x28>
 80057b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057ba:	b01d      	add	sp, #116	; 0x74
 80057bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057c0:	ab03      	add	r3, sp, #12
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	462a      	mov	r2, r5
 80057c6:	4b06      	ldr	r3, [pc, #24]	; (80057e0 <_svfiprintf_r+0x1f8>)
 80057c8:	a904      	add	r1, sp, #16
 80057ca:	4638      	mov	r0, r7
 80057cc:	f000 f87a 	bl	80058c4 <_printf_i>
 80057d0:	e7eb      	b.n	80057aa <_svfiprintf_r+0x1c2>
 80057d2:	bf00      	nop
 80057d4:	08006b74 	.word	0x08006b74
 80057d8:	08006b7e 	.word	0x08006b7e
 80057dc:	00000000 	.word	0x00000000
 80057e0:	08005531 	.word	0x08005531
 80057e4:	08006b7a 	.word	0x08006b7a

080057e8 <_printf_common>:
 80057e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057ec:	4616      	mov	r6, r2
 80057ee:	4699      	mov	r9, r3
 80057f0:	688a      	ldr	r2, [r1, #8]
 80057f2:	690b      	ldr	r3, [r1, #16]
 80057f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057f8:	4293      	cmp	r3, r2
 80057fa:	bfb8      	it	lt
 80057fc:	4613      	movlt	r3, r2
 80057fe:	6033      	str	r3, [r6, #0]
 8005800:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005804:	4607      	mov	r7, r0
 8005806:	460c      	mov	r4, r1
 8005808:	b10a      	cbz	r2, 800580e <_printf_common+0x26>
 800580a:	3301      	adds	r3, #1
 800580c:	6033      	str	r3, [r6, #0]
 800580e:	6823      	ldr	r3, [r4, #0]
 8005810:	0699      	lsls	r1, r3, #26
 8005812:	bf42      	ittt	mi
 8005814:	6833      	ldrmi	r3, [r6, #0]
 8005816:	3302      	addmi	r3, #2
 8005818:	6033      	strmi	r3, [r6, #0]
 800581a:	6825      	ldr	r5, [r4, #0]
 800581c:	f015 0506 	ands.w	r5, r5, #6
 8005820:	d106      	bne.n	8005830 <_printf_common+0x48>
 8005822:	f104 0a19 	add.w	sl, r4, #25
 8005826:	68e3      	ldr	r3, [r4, #12]
 8005828:	6832      	ldr	r2, [r6, #0]
 800582a:	1a9b      	subs	r3, r3, r2
 800582c:	42ab      	cmp	r3, r5
 800582e:	dc26      	bgt.n	800587e <_printf_common+0x96>
 8005830:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005834:	1e13      	subs	r3, r2, #0
 8005836:	6822      	ldr	r2, [r4, #0]
 8005838:	bf18      	it	ne
 800583a:	2301      	movne	r3, #1
 800583c:	0692      	lsls	r2, r2, #26
 800583e:	d42b      	bmi.n	8005898 <_printf_common+0xb0>
 8005840:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005844:	4649      	mov	r1, r9
 8005846:	4638      	mov	r0, r7
 8005848:	47c0      	blx	r8
 800584a:	3001      	adds	r0, #1
 800584c:	d01e      	beq.n	800588c <_printf_common+0xa4>
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	68e5      	ldr	r5, [r4, #12]
 8005852:	6832      	ldr	r2, [r6, #0]
 8005854:	f003 0306 	and.w	r3, r3, #6
 8005858:	2b04      	cmp	r3, #4
 800585a:	bf08      	it	eq
 800585c:	1aad      	subeq	r5, r5, r2
 800585e:	68a3      	ldr	r3, [r4, #8]
 8005860:	6922      	ldr	r2, [r4, #16]
 8005862:	bf0c      	ite	eq
 8005864:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005868:	2500      	movne	r5, #0
 800586a:	4293      	cmp	r3, r2
 800586c:	bfc4      	itt	gt
 800586e:	1a9b      	subgt	r3, r3, r2
 8005870:	18ed      	addgt	r5, r5, r3
 8005872:	2600      	movs	r6, #0
 8005874:	341a      	adds	r4, #26
 8005876:	42b5      	cmp	r5, r6
 8005878:	d11a      	bne.n	80058b0 <_printf_common+0xc8>
 800587a:	2000      	movs	r0, #0
 800587c:	e008      	b.n	8005890 <_printf_common+0xa8>
 800587e:	2301      	movs	r3, #1
 8005880:	4652      	mov	r2, sl
 8005882:	4649      	mov	r1, r9
 8005884:	4638      	mov	r0, r7
 8005886:	47c0      	blx	r8
 8005888:	3001      	adds	r0, #1
 800588a:	d103      	bne.n	8005894 <_printf_common+0xac>
 800588c:	f04f 30ff 	mov.w	r0, #4294967295
 8005890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005894:	3501      	adds	r5, #1
 8005896:	e7c6      	b.n	8005826 <_printf_common+0x3e>
 8005898:	18e1      	adds	r1, r4, r3
 800589a:	1c5a      	adds	r2, r3, #1
 800589c:	2030      	movs	r0, #48	; 0x30
 800589e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058a2:	4422      	add	r2, r4
 80058a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058ac:	3302      	adds	r3, #2
 80058ae:	e7c7      	b.n	8005840 <_printf_common+0x58>
 80058b0:	2301      	movs	r3, #1
 80058b2:	4622      	mov	r2, r4
 80058b4:	4649      	mov	r1, r9
 80058b6:	4638      	mov	r0, r7
 80058b8:	47c0      	blx	r8
 80058ba:	3001      	adds	r0, #1
 80058bc:	d0e6      	beq.n	800588c <_printf_common+0xa4>
 80058be:	3601      	adds	r6, #1
 80058c0:	e7d9      	b.n	8005876 <_printf_common+0x8e>
	...

080058c4 <_printf_i>:
 80058c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058c8:	7e0f      	ldrb	r7, [r1, #24]
 80058ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058cc:	2f78      	cmp	r7, #120	; 0x78
 80058ce:	4691      	mov	r9, r2
 80058d0:	4680      	mov	r8, r0
 80058d2:	460c      	mov	r4, r1
 80058d4:	469a      	mov	sl, r3
 80058d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058da:	d807      	bhi.n	80058ec <_printf_i+0x28>
 80058dc:	2f62      	cmp	r7, #98	; 0x62
 80058de:	d80a      	bhi.n	80058f6 <_printf_i+0x32>
 80058e0:	2f00      	cmp	r7, #0
 80058e2:	f000 80d8 	beq.w	8005a96 <_printf_i+0x1d2>
 80058e6:	2f58      	cmp	r7, #88	; 0x58
 80058e8:	f000 80a3 	beq.w	8005a32 <_printf_i+0x16e>
 80058ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058f4:	e03a      	b.n	800596c <_printf_i+0xa8>
 80058f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058fa:	2b15      	cmp	r3, #21
 80058fc:	d8f6      	bhi.n	80058ec <_printf_i+0x28>
 80058fe:	a101      	add	r1, pc, #4	; (adr r1, 8005904 <_printf_i+0x40>)
 8005900:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005904:	0800595d 	.word	0x0800595d
 8005908:	08005971 	.word	0x08005971
 800590c:	080058ed 	.word	0x080058ed
 8005910:	080058ed 	.word	0x080058ed
 8005914:	080058ed 	.word	0x080058ed
 8005918:	080058ed 	.word	0x080058ed
 800591c:	08005971 	.word	0x08005971
 8005920:	080058ed 	.word	0x080058ed
 8005924:	080058ed 	.word	0x080058ed
 8005928:	080058ed 	.word	0x080058ed
 800592c:	080058ed 	.word	0x080058ed
 8005930:	08005a7d 	.word	0x08005a7d
 8005934:	080059a1 	.word	0x080059a1
 8005938:	08005a5f 	.word	0x08005a5f
 800593c:	080058ed 	.word	0x080058ed
 8005940:	080058ed 	.word	0x080058ed
 8005944:	08005a9f 	.word	0x08005a9f
 8005948:	080058ed 	.word	0x080058ed
 800594c:	080059a1 	.word	0x080059a1
 8005950:	080058ed 	.word	0x080058ed
 8005954:	080058ed 	.word	0x080058ed
 8005958:	08005a67 	.word	0x08005a67
 800595c:	682b      	ldr	r3, [r5, #0]
 800595e:	1d1a      	adds	r2, r3, #4
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	602a      	str	r2, [r5, #0]
 8005964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800596c:	2301      	movs	r3, #1
 800596e:	e0a3      	b.n	8005ab8 <_printf_i+0x1f4>
 8005970:	6820      	ldr	r0, [r4, #0]
 8005972:	6829      	ldr	r1, [r5, #0]
 8005974:	0606      	lsls	r6, r0, #24
 8005976:	f101 0304 	add.w	r3, r1, #4
 800597a:	d50a      	bpl.n	8005992 <_printf_i+0xce>
 800597c:	680e      	ldr	r6, [r1, #0]
 800597e:	602b      	str	r3, [r5, #0]
 8005980:	2e00      	cmp	r6, #0
 8005982:	da03      	bge.n	800598c <_printf_i+0xc8>
 8005984:	232d      	movs	r3, #45	; 0x2d
 8005986:	4276      	negs	r6, r6
 8005988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800598c:	485e      	ldr	r0, [pc, #376]	; (8005b08 <_printf_i+0x244>)
 800598e:	230a      	movs	r3, #10
 8005990:	e019      	b.n	80059c6 <_printf_i+0x102>
 8005992:	680e      	ldr	r6, [r1, #0]
 8005994:	602b      	str	r3, [r5, #0]
 8005996:	f010 0f40 	tst.w	r0, #64	; 0x40
 800599a:	bf18      	it	ne
 800599c:	b236      	sxthne	r6, r6
 800599e:	e7ef      	b.n	8005980 <_printf_i+0xbc>
 80059a0:	682b      	ldr	r3, [r5, #0]
 80059a2:	6820      	ldr	r0, [r4, #0]
 80059a4:	1d19      	adds	r1, r3, #4
 80059a6:	6029      	str	r1, [r5, #0]
 80059a8:	0601      	lsls	r1, r0, #24
 80059aa:	d501      	bpl.n	80059b0 <_printf_i+0xec>
 80059ac:	681e      	ldr	r6, [r3, #0]
 80059ae:	e002      	b.n	80059b6 <_printf_i+0xf2>
 80059b0:	0646      	lsls	r6, r0, #25
 80059b2:	d5fb      	bpl.n	80059ac <_printf_i+0xe8>
 80059b4:	881e      	ldrh	r6, [r3, #0]
 80059b6:	4854      	ldr	r0, [pc, #336]	; (8005b08 <_printf_i+0x244>)
 80059b8:	2f6f      	cmp	r7, #111	; 0x6f
 80059ba:	bf0c      	ite	eq
 80059bc:	2308      	moveq	r3, #8
 80059be:	230a      	movne	r3, #10
 80059c0:	2100      	movs	r1, #0
 80059c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059c6:	6865      	ldr	r5, [r4, #4]
 80059c8:	60a5      	str	r5, [r4, #8]
 80059ca:	2d00      	cmp	r5, #0
 80059cc:	bfa2      	ittt	ge
 80059ce:	6821      	ldrge	r1, [r4, #0]
 80059d0:	f021 0104 	bicge.w	r1, r1, #4
 80059d4:	6021      	strge	r1, [r4, #0]
 80059d6:	b90e      	cbnz	r6, 80059dc <_printf_i+0x118>
 80059d8:	2d00      	cmp	r5, #0
 80059da:	d04d      	beq.n	8005a78 <_printf_i+0x1b4>
 80059dc:	4615      	mov	r5, r2
 80059de:	fbb6 f1f3 	udiv	r1, r6, r3
 80059e2:	fb03 6711 	mls	r7, r3, r1, r6
 80059e6:	5dc7      	ldrb	r7, [r0, r7]
 80059e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059ec:	4637      	mov	r7, r6
 80059ee:	42bb      	cmp	r3, r7
 80059f0:	460e      	mov	r6, r1
 80059f2:	d9f4      	bls.n	80059de <_printf_i+0x11a>
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	d10b      	bne.n	8005a10 <_printf_i+0x14c>
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	07de      	lsls	r6, r3, #31
 80059fc:	d508      	bpl.n	8005a10 <_printf_i+0x14c>
 80059fe:	6923      	ldr	r3, [r4, #16]
 8005a00:	6861      	ldr	r1, [r4, #4]
 8005a02:	4299      	cmp	r1, r3
 8005a04:	bfde      	ittt	le
 8005a06:	2330      	movle	r3, #48	; 0x30
 8005a08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a10:	1b52      	subs	r2, r2, r5
 8005a12:	6122      	str	r2, [r4, #16]
 8005a14:	f8cd a000 	str.w	sl, [sp]
 8005a18:	464b      	mov	r3, r9
 8005a1a:	aa03      	add	r2, sp, #12
 8005a1c:	4621      	mov	r1, r4
 8005a1e:	4640      	mov	r0, r8
 8005a20:	f7ff fee2 	bl	80057e8 <_printf_common>
 8005a24:	3001      	adds	r0, #1
 8005a26:	d14c      	bne.n	8005ac2 <_printf_i+0x1fe>
 8005a28:	f04f 30ff 	mov.w	r0, #4294967295
 8005a2c:	b004      	add	sp, #16
 8005a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a32:	4835      	ldr	r0, [pc, #212]	; (8005b08 <_printf_i+0x244>)
 8005a34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a38:	6829      	ldr	r1, [r5, #0]
 8005a3a:	6823      	ldr	r3, [r4, #0]
 8005a3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a40:	6029      	str	r1, [r5, #0]
 8005a42:	061d      	lsls	r5, r3, #24
 8005a44:	d514      	bpl.n	8005a70 <_printf_i+0x1ac>
 8005a46:	07df      	lsls	r7, r3, #31
 8005a48:	bf44      	itt	mi
 8005a4a:	f043 0320 	orrmi.w	r3, r3, #32
 8005a4e:	6023      	strmi	r3, [r4, #0]
 8005a50:	b91e      	cbnz	r6, 8005a5a <_printf_i+0x196>
 8005a52:	6823      	ldr	r3, [r4, #0]
 8005a54:	f023 0320 	bic.w	r3, r3, #32
 8005a58:	6023      	str	r3, [r4, #0]
 8005a5a:	2310      	movs	r3, #16
 8005a5c:	e7b0      	b.n	80059c0 <_printf_i+0xfc>
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	f043 0320 	orr.w	r3, r3, #32
 8005a64:	6023      	str	r3, [r4, #0]
 8005a66:	2378      	movs	r3, #120	; 0x78
 8005a68:	4828      	ldr	r0, [pc, #160]	; (8005b0c <_printf_i+0x248>)
 8005a6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a6e:	e7e3      	b.n	8005a38 <_printf_i+0x174>
 8005a70:	0659      	lsls	r1, r3, #25
 8005a72:	bf48      	it	mi
 8005a74:	b2b6      	uxthmi	r6, r6
 8005a76:	e7e6      	b.n	8005a46 <_printf_i+0x182>
 8005a78:	4615      	mov	r5, r2
 8005a7a:	e7bb      	b.n	80059f4 <_printf_i+0x130>
 8005a7c:	682b      	ldr	r3, [r5, #0]
 8005a7e:	6826      	ldr	r6, [r4, #0]
 8005a80:	6961      	ldr	r1, [r4, #20]
 8005a82:	1d18      	adds	r0, r3, #4
 8005a84:	6028      	str	r0, [r5, #0]
 8005a86:	0635      	lsls	r5, r6, #24
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	d501      	bpl.n	8005a90 <_printf_i+0x1cc>
 8005a8c:	6019      	str	r1, [r3, #0]
 8005a8e:	e002      	b.n	8005a96 <_printf_i+0x1d2>
 8005a90:	0670      	lsls	r0, r6, #25
 8005a92:	d5fb      	bpl.n	8005a8c <_printf_i+0x1c8>
 8005a94:	8019      	strh	r1, [r3, #0]
 8005a96:	2300      	movs	r3, #0
 8005a98:	6123      	str	r3, [r4, #16]
 8005a9a:	4615      	mov	r5, r2
 8005a9c:	e7ba      	b.n	8005a14 <_printf_i+0x150>
 8005a9e:	682b      	ldr	r3, [r5, #0]
 8005aa0:	1d1a      	adds	r2, r3, #4
 8005aa2:	602a      	str	r2, [r5, #0]
 8005aa4:	681d      	ldr	r5, [r3, #0]
 8005aa6:	6862      	ldr	r2, [r4, #4]
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	4628      	mov	r0, r5
 8005aac:	f7fa fbb0 	bl	8000210 <memchr>
 8005ab0:	b108      	cbz	r0, 8005ab6 <_printf_i+0x1f2>
 8005ab2:	1b40      	subs	r0, r0, r5
 8005ab4:	6060      	str	r0, [r4, #4]
 8005ab6:	6863      	ldr	r3, [r4, #4]
 8005ab8:	6123      	str	r3, [r4, #16]
 8005aba:	2300      	movs	r3, #0
 8005abc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ac0:	e7a8      	b.n	8005a14 <_printf_i+0x150>
 8005ac2:	6923      	ldr	r3, [r4, #16]
 8005ac4:	462a      	mov	r2, r5
 8005ac6:	4649      	mov	r1, r9
 8005ac8:	4640      	mov	r0, r8
 8005aca:	47d0      	blx	sl
 8005acc:	3001      	adds	r0, #1
 8005ace:	d0ab      	beq.n	8005a28 <_printf_i+0x164>
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	079b      	lsls	r3, r3, #30
 8005ad4:	d413      	bmi.n	8005afe <_printf_i+0x23a>
 8005ad6:	68e0      	ldr	r0, [r4, #12]
 8005ad8:	9b03      	ldr	r3, [sp, #12]
 8005ada:	4298      	cmp	r0, r3
 8005adc:	bfb8      	it	lt
 8005ade:	4618      	movlt	r0, r3
 8005ae0:	e7a4      	b.n	8005a2c <_printf_i+0x168>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	4632      	mov	r2, r6
 8005ae6:	4649      	mov	r1, r9
 8005ae8:	4640      	mov	r0, r8
 8005aea:	47d0      	blx	sl
 8005aec:	3001      	adds	r0, #1
 8005aee:	d09b      	beq.n	8005a28 <_printf_i+0x164>
 8005af0:	3501      	adds	r5, #1
 8005af2:	68e3      	ldr	r3, [r4, #12]
 8005af4:	9903      	ldr	r1, [sp, #12]
 8005af6:	1a5b      	subs	r3, r3, r1
 8005af8:	42ab      	cmp	r3, r5
 8005afa:	dcf2      	bgt.n	8005ae2 <_printf_i+0x21e>
 8005afc:	e7eb      	b.n	8005ad6 <_printf_i+0x212>
 8005afe:	2500      	movs	r5, #0
 8005b00:	f104 0619 	add.w	r6, r4, #25
 8005b04:	e7f5      	b.n	8005af2 <_printf_i+0x22e>
 8005b06:	bf00      	nop
 8005b08:	08006b85 	.word	0x08006b85
 8005b0c:	08006b96 	.word	0x08006b96

08005b10 <memcpy>:
 8005b10:	440a      	add	r2, r1
 8005b12:	4291      	cmp	r1, r2
 8005b14:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b18:	d100      	bne.n	8005b1c <memcpy+0xc>
 8005b1a:	4770      	bx	lr
 8005b1c:	b510      	push	{r4, lr}
 8005b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b26:	4291      	cmp	r1, r2
 8005b28:	d1f9      	bne.n	8005b1e <memcpy+0xe>
 8005b2a:	bd10      	pop	{r4, pc}

08005b2c <memmove>:
 8005b2c:	4288      	cmp	r0, r1
 8005b2e:	b510      	push	{r4, lr}
 8005b30:	eb01 0402 	add.w	r4, r1, r2
 8005b34:	d902      	bls.n	8005b3c <memmove+0x10>
 8005b36:	4284      	cmp	r4, r0
 8005b38:	4623      	mov	r3, r4
 8005b3a:	d807      	bhi.n	8005b4c <memmove+0x20>
 8005b3c:	1e43      	subs	r3, r0, #1
 8005b3e:	42a1      	cmp	r1, r4
 8005b40:	d008      	beq.n	8005b54 <memmove+0x28>
 8005b42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b4a:	e7f8      	b.n	8005b3e <memmove+0x12>
 8005b4c:	4402      	add	r2, r0
 8005b4e:	4601      	mov	r1, r0
 8005b50:	428a      	cmp	r2, r1
 8005b52:	d100      	bne.n	8005b56 <memmove+0x2a>
 8005b54:	bd10      	pop	{r4, pc}
 8005b56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b5e:	e7f7      	b.n	8005b50 <memmove+0x24>

08005b60 <_free_r>:
 8005b60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b62:	2900      	cmp	r1, #0
 8005b64:	d044      	beq.n	8005bf0 <_free_r+0x90>
 8005b66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b6a:	9001      	str	r0, [sp, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f1a1 0404 	sub.w	r4, r1, #4
 8005b72:	bfb8      	it	lt
 8005b74:	18e4      	addlt	r4, r4, r3
 8005b76:	f000 f913 	bl	8005da0 <__malloc_lock>
 8005b7a:	4a1e      	ldr	r2, [pc, #120]	; (8005bf4 <_free_r+0x94>)
 8005b7c:	9801      	ldr	r0, [sp, #4]
 8005b7e:	6813      	ldr	r3, [r2, #0]
 8005b80:	b933      	cbnz	r3, 8005b90 <_free_r+0x30>
 8005b82:	6063      	str	r3, [r4, #4]
 8005b84:	6014      	str	r4, [r2, #0]
 8005b86:	b003      	add	sp, #12
 8005b88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b8c:	f000 b90e 	b.w	8005dac <__malloc_unlock>
 8005b90:	42a3      	cmp	r3, r4
 8005b92:	d908      	bls.n	8005ba6 <_free_r+0x46>
 8005b94:	6825      	ldr	r5, [r4, #0]
 8005b96:	1961      	adds	r1, r4, r5
 8005b98:	428b      	cmp	r3, r1
 8005b9a:	bf01      	itttt	eq
 8005b9c:	6819      	ldreq	r1, [r3, #0]
 8005b9e:	685b      	ldreq	r3, [r3, #4]
 8005ba0:	1949      	addeq	r1, r1, r5
 8005ba2:	6021      	streq	r1, [r4, #0]
 8005ba4:	e7ed      	b.n	8005b82 <_free_r+0x22>
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	b10b      	cbz	r3, 8005bb0 <_free_r+0x50>
 8005bac:	42a3      	cmp	r3, r4
 8005bae:	d9fa      	bls.n	8005ba6 <_free_r+0x46>
 8005bb0:	6811      	ldr	r1, [r2, #0]
 8005bb2:	1855      	adds	r5, r2, r1
 8005bb4:	42a5      	cmp	r5, r4
 8005bb6:	d10b      	bne.n	8005bd0 <_free_r+0x70>
 8005bb8:	6824      	ldr	r4, [r4, #0]
 8005bba:	4421      	add	r1, r4
 8005bbc:	1854      	adds	r4, r2, r1
 8005bbe:	42a3      	cmp	r3, r4
 8005bc0:	6011      	str	r1, [r2, #0]
 8005bc2:	d1e0      	bne.n	8005b86 <_free_r+0x26>
 8005bc4:	681c      	ldr	r4, [r3, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	6053      	str	r3, [r2, #4]
 8005bca:	4421      	add	r1, r4
 8005bcc:	6011      	str	r1, [r2, #0]
 8005bce:	e7da      	b.n	8005b86 <_free_r+0x26>
 8005bd0:	d902      	bls.n	8005bd8 <_free_r+0x78>
 8005bd2:	230c      	movs	r3, #12
 8005bd4:	6003      	str	r3, [r0, #0]
 8005bd6:	e7d6      	b.n	8005b86 <_free_r+0x26>
 8005bd8:	6825      	ldr	r5, [r4, #0]
 8005bda:	1961      	adds	r1, r4, r5
 8005bdc:	428b      	cmp	r3, r1
 8005bde:	bf04      	itt	eq
 8005be0:	6819      	ldreq	r1, [r3, #0]
 8005be2:	685b      	ldreq	r3, [r3, #4]
 8005be4:	6063      	str	r3, [r4, #4]
 8005be6:	bf04      	itt	eq
 8005be8:	1949      	addeq	r1, r1, r5
 8005bea:	6021      	streq	r1, [r4, #0]
 8005bec:	6054      	str	r4, [r2, #4]
 8005bee:	e7ca      	b.n	8005b86 <_free_r+0x26>
 8005bf0:	b003      	add	sp, #12
 8005bf2:	bd30      	pop	{r4, r5, pc}
 8005bf4:	200005dc 	.word	0x200005dc

08005bf8 <sbrk_aligned>:
 8005bf8:	b570      	push	{r4, r5, r6, lr}
 8005bfa:	4e0e      	ldr	r6, [pc, #56]	; (8005c34 <sbrk_aligned+0x3c>)
 8005bfc:	460c      	mov	r4, r1
 8005bfe:	6831      	ldr	r1, [r6, #0]
 8005c00:	4605      	mov	r5, r0
 8005c02:	b911      	cbnz	r1, 8005c0a <sbrk_aligned+0x12>
 8005c04:	f000 f8bc 	bl	8005d80 <_sbrk_r>
 8005c08:	6030      	str	r0, [r6, #0]
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	f000 f8b7 	bl	8005d80 <_sbrk_r>
 8005c12:	1c43      	adds	r3, r0, #1
 8005c14:	d00a      	beq.n	8005c2c <sbrk_aligned+0x34>
 8005c16:	1cc4      	adds	r4, r0, #3
 8005c18:	f024 0403 	bic.w	r4, r4, #3
 8005c1c:	42a0      	cmp	r0, r4
 8005c1e:	d007      	beq.n	8005c30 <sbrk_aligned+0x38>
 8005c20:	1a21      	subs	r1, r4, r0
 8005c22:	4628      	mov	r0, r5
 8005c24:	f000 f8ac 	bl	8005d80 <_sbrk_r>
 8005c28:	3001      	adds	r0, #1
 8005c2a:	d101      	bne.n	8005c30 <sbrk_aligned+0x38>
 8005c2c:	f04f 34ff 	mov.w	r4, #4294967295
 8005c30:	4620      	mov	r0, r4
 8005c32:	bd70      	pop	{r4, r5, r6, pc}
 8005c34:	200005e0 	.word	0x200005e0

08005c38 <_malloc_r>:
 8005c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c3c:	1ccd      	adds	r5, r1, #3
 8005c3e:	f025 0503 	bic.w	r5, r5, #3
 8005c42:	3508      	adds	r5, #8
 8005c44:	2d0c      	cmp	r5, #12
 8005c46:	bf38      	it	cc
 8005c48:	250c      	movcc	r5, #12
 8005c4a:	2d00      	cmp	r5, #0
 8005c4c:	4607      	mov	r7, r0
 8005c4e:	db01      	blt.n	8005c54 <_malloc_r+0x1c>
 8005c50:	42a9      	cmp	r1, r5
 8005c52:	d905      	bls.n	8005c60 <_malloc_r+0x28>
 8005c54:	230c      	movs	r3, #12
 8005c56:	603b      	str	r3, [r7, #0]
 8005c58:	2600      	movs	r6, #0
 8005c5a:	4630      	mov	r0, r6
 8005c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c60:	4e2e      	ldr	r6, [pc, #184]	; (8005d1c <_malloc_r+0xe4>)
 8005c62:	f000 f89d 	bl	8005da0 <__malloc_lock>
 8005c66:	6833      	ldr	r3, [r6, #0]
 8005c68:	461c      	mov	r4, r3
 8005c6a:	bb34      	cbnz	r4, 8005cba <_malloc_r+0x82>
 8005c6c:	4629      	mov	r1, r5
 8005c6e:	4638      	mov	r0, r7
 8005c70:	f7ff ffc2 	bl	8005bf8 <sbrk_aligned>
 8005c74:	1c43      	adds	r3, r0, #1
 8005c76:	4604      	mov	r4, r0
 8005c78:	d14d      	bne.n	8005d16 <_malloc_r+0xde>
 8005c7a:	6834      	ldr	r4, [r6, #0]
 8005c7c:	4626      	mov	r6, r4
 8005c7e:	2e00      	cmp	r6, #0
 8005c80:	d140      	bne.n	8005d04 <_malloc_r+0xcc>
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	4631      	mov	r1, r6
 8005c86:	4638      	mov	r0, r7
 8005c88:	eb04 0803 	add.w	r8, r4, r3
 8005c8c:	f000 f878 	bl	8005d80 <_sbrk_r>
 8005c90:	4580      	cmp	r8, r0
 8005c92:	d13a      	bne.n	8005d0a <_malloc_r+0xd2>
 8005c94:	6821      	ldr	r1, [r4, #0]
 8005c96:	3503      	adds	r5, #3
 8005c98:	1a6d      	subs	r5, r5, r1
 8005c9a:	f025 0503 	bic.w	r5, r5, #3
 8005c9e:	3508      	adds	r5, #8
 8005ca0:	2d0c      	cmp	r5, #12
 8005ca2:	bf38      	it	cc
 8005ca4:	250c      	movcc	r5, #12
 8005ca6:	4629      	mov	r1, r5
 8005ca8:	4638      	mov	r0, r7
 8005caa:	f7ff ffa5 	bl	8005bf8 <sbrk_aligned>
 8005cae:	3001      	adds	r0, #1
 8005cb0:	d02b      	beq.n	8005d0a <_malloc_r+0xd2>
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	442b      	add	r3, r5
 8005cb6:	6023      	str	r3, [r4, #0]
 8005cb8:	e00e      	b.n	8005cd8 <_malloc_r+0xa0>
 8005cba:	6822      	ldr	r2, [r4, #0]
 8005cbc:	1b52      	subs	r2, r2, r5
 8005cbe:	d41e      	bmi.n	8005cfe <_malloc_r+0xc6>
 8005cc0:	2a0b      	cmp	r2, #11
 8005cc2:	d916      	bls.n	8005cf2 <_malloc_r+0xba>
 8005cc4:	1961      	adds	r1, r4, r5
 8005cc6:	42a3      	cmp	r3, r4
 8005cc8:	6025      	str	r5, [r4, #0]
 8005cca:	bf18      	it	ne
 8005ccc:	6059      	strne	r1, [r3, #4]
 8005cce:	6863      	ldr	r3, [r4, #4]
 8005cd0:	bf08      	it	eq
 8005cd2:	6031      	streq	r1, [r6, #0]
 8005cd4:	5162      	str	r2, [r4, r5]
 8005cd6:	604b      	str	r3, [r1, #4]
 8005cd8:	4638      	mov	r0, r7
 8005cda:	f104 060b 	add.w	r6, r4, #11
 8005cde:	f000 f865 	bl	8005dac <__malloc_unlock>
 8005ce2:	f026 0607 	bic.w	r6, r6, #7
 8005ce6:	1d23      	adds	r3, r4, #4
 8005ce8:	1af2      	subs	r2, r6, r3
 8005cea:	d0b6      	beq.n	8005c5a <_malloc_r+0x22>
 8005cec:	1b9b      	subs	r3, r3, r6
 8005cee:	50a3      	str	r3, [r4, r2]
 8005cf0:	e7b3      	b.n	8005c5a <_malloc_r+0x22>
 8005cf2:	6862      	ldr	r2, [r4, #4]
 8005cf4:	42a3      	cmp	r3, r4
 8005cf6:	bf0c      	ite	eq
 8005cf8:	6032      	streq	r2, [r6, #0]
 8005cfa:	605a      	strne	r2, [r3, #4]
 8005cfc:	e7ec      	b.n	8005cd8 <_malloc_r+0xa0>
 8005cfe:	4623      	mov	r3, r4
 8005d00:	6864      	ldr	r4, [r4, #4]
 8005d02:	e7b2      	b.n	8005c6a <_malloc_r+0x32>
 8005d04:	4634      	mov	r4, r6
 8005d06:	6876      	ldr	r6, [r6, #4]
 8005d08:	e7b9      	b.n	8005c7e <_malloc_r+0x46>
 8005d0a:	230c      	movs	r3, #12
 8005d0c:	603b      	str	r3, [r7, #0]
 8005d0e:	4638      	mov	r0, r7
 8005d10:	f000 f84c 	bl	8005dac <__malloc_unlock>
 8005d14:	e7a1      	b.n	8005c5a <_malloc_r+0x22>
 8005d16:	6025      	str	r5, [r4, #0]
 8005d18:	e7de      	b.n	8005cd8 <_malloc_r+0xa0>
 8005d1a:	bf00      	nop
 8005d1c:	200005dc 	.word	0x200005dc

08005d20 <_realloc_r>:
 8005d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d24:	4680      	mov	r8, r0
 8005d26:	4614      	mov	r4, r2
 8005d28:	460e      	mov	r6, r1
 8005d2a:	b921      	cbnz	r1, 8005d36 <_realloc_r+0x16>
 8005d2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d30:	4611      	mov	r1, r2
 8005d32:	f7ff bf81 	b.w	8005c38 <_malloc_r>
 8005d36:	b92a      	cbnz	r2, 8005d44 <_realloc_r+0x24>
 8005d38:	f7ff ff12 	bl	8005b60 <_free_r>
 8005d3c:	4625      	mov	r5, r4
 8005d3e:	4628      	mov	r0, r5
 8005d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d44:	f000 f838 	bl	8005db8 <_malloc_usable_size_r>
 8005d48:	4284      	cmp	r4, r0
 8005d4a:	4607      	mov	r7, r0
 8005d4c:	d802      	bhi.n	8005d54 <_realloc_r+0x34>
 8005d4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005d52:	d812      	bhi.n	8005d7a <_realloc_r+0x5a>
 8005d54:	4621      	mov	r1, r4
 8005d56:	4640      	mov	r0, r8
 8005d58:	f7ff ff6e 	bl	8005c38 <_malloc_r>
 8005d5c:	4605      	mov	r5, r0
 8005d5e:	2800      	cmp	r0, #0
 8005d60:	d0ed      	beq.n	8005d3e <_realloc_r+0x1e>
 8005d62:	42bc      	cmp	r4, r7
 8005d64:	4622      	mov	r2, r4
 8005d66:	4631      	mov	r1, r6
 8005d68:	bf28      	it	cs
 8005d6a:	463a      	movcs	r2, r7
 8005d6c:	f7ff fed0 	bl	8005b10 <memcpy>
 8005d70:	4631      	mov	r1, r6
 8005d72:	4640      	mov	r0, r8
 8005d74:	f7ff fef4 	bl	8005b60 <_free_r>
 8005d78:	e7e1      	b.n	8005d3e <_realloc_r+0x1e>
 8005d7a:	4635      	mov	r5, r6
 8005d7c:	e7df      	b.n	8005d3e <_realloc_r+0x1e>
	...

08005d80 <_sbrk_r>:
 8005d80:	b538      	push	{r3, r4, r5, lr}
 8005d82:	4d06      	ldr	r5, [pc, #24]	; (8005d9c <_sbrk_r+0x1c>)
 8005d84:	2300      	movs	r3, #0
 8005d86:	4604      	mov	r4, r0
 8005d88:	4608      	mov	r0, r1
 8005d8a:	602b      	str	r3, [r5, #0]
 8005d8c:	f7fc f800 	bl	8001d90 <_sbrk>
 8005d90:	1c43      	adds	r3, r0, #1
 8005d92:	d102      	bne.n	8005d9a <_sbrk_r+0x1a>
 8005d94:	682b      	ldr	r3, [r5, #0]
 8005d96:	b103      	cbz	r3, 8005d9a <_sbrk_r+0x1a>
 8005d98:	6023      	str	r3, [r4, #0]
 8005d9a:	bd38      	pop	{r3, r4, r5, pc}
 8005d9c:	200005e4 	.word	0x200005e4

08005da0 <__malloc_lock>:
 8005da0:	4801      	ldr	r0, [pc, #4]	; (8005da8 <__malloc_lock+0x8>)
 8005da2:	f000 b811 	b.w	8005dc8 <__retarget_lock_acquire_recursive>
 8005da6:	bf00      	nop
 8005da8:	200005e8 	.word	0x200005e8

08005dac <__malloc_unlock>:
 8005dac:	4801      	ldr	r0, [pc, #4]	; (8005db4 <__malloc_unlock+0x8>)
 8005dae:	f000 b80c 	b.w	8005dca <__retarget_lock_release_recursive>
 8005db2:	bf00      	nop
 8005db4:	200005e8 	.word	0x200005e8

08005db8 <_malloc_usable_size_r>:
 8005db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dbc:	1f18      	subs	r0, r3, #4
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	bfbc      	itt	lt
 8005dc2:	580b      	ldrlt	r3, [r1, r0]
 8005dc4:	18c0      	addlt	r0, r0, r3
 8005dc6:	4770      	bx	lr

08005dc8 <__retarget_lock_acquire_recursive>:
 8005dc8:	4770      	bx	lr

08005dca <__retarget_lock_release_recursive>:
 8005dca:	4770      	bx	lr

08005dcc <_init>:
 8005dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dce:	bf00      	nop
 8005dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dd2:	bc08      	pop	{r3}
 8005dd4:	469e      	mov	lr, r3
 8005dd6:	4770      	bx	lr

08005dd8 <_fini>:
 8005dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dda:	bf00      	nop
 8005ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dde:	bc08      	pop	{r3}
 8005de0:	469e      	mov	lr, r3
 8005de2:	4770      	bx	lr
